"use strict";(self.webpackChunkliquidscript_docs=self.webpackChunkliquidscript_docs||[]).push([[64400],{38856:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var l=a(74848),i=a(28453);const s={},t="Template Static Analysis",r={id:"guides/static-analysis",title:"Template Static Analysis",description:"_New in version 1.3.0_",source:"@site/docs/guides/static-analysis.md",sourceDirName:"guides",slug:"/guides/static-analysis",permalink:"/liquidscript/guides/static-analysis",draft:!1,unlisted:!1,editUrl:"https://github.com/jg-rp/liquidscript/tree/docs/docs/guides/static-analysis.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Custom Loaders",permalink:"/liquidscript/guides/custom-loaders"},next:{title:"Resource Limits",permalink:"/liquidscript/guides/resource-limits"}},o={},c=[{value:"All Template Variables",id:"all-template-variables",level:2},{value:"Global Template Variables",id:"global-template-variables",level:2},{value:"Local Template Variables",id:"local-template-variables",level:2},{value:"Filters",id:"filters",level:2},{value:"Tags",id:"tags",level:2},{value:"Analyzing Partial Templates",id:"analyzing-partial-templates",level:2},{value:"Analyzing Custom Tags",id:"analyzing-custom-tags",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h1,{id:"template-static-analysis",children:"Template Static Analysis"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.em,{children:"New in version 1.3.0"})})}),"\n",(0,l.jsxs)(n.p,{children:["Use the ",(0,l.jsx)(n.a,{href:"/liquidscript/api/classes/Template#analyze",children:(0,l.jsx)(n.code,{children:"analyze()"})})," or ",(0,l.jsx)(n.a,{href:"/liquidscript/api/classes/Template#analyzesync",children:(0,l.jsx)(n.code,{children:"analyzeSync()"})})," methods of a Liquid ",(0,l.jsx)(n.a,{href:"/liquidscript/api/classes/Template",children:(0,l.jsx)(n.code,{children:"Template"})})," to traverse its abstract syntax tree and report template variable, tag and filter usage."]}),"\n",(0,l.jsx)(n.h2,{id:"all-template-variables",children:"All Template Variables"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.a,{href:"/liquidscript/api/type-aliases/TemplateAnalysis",children:(0,l.jsx)(n.code,{children:"TemplateAnalysis"})})," object returned from ",(0,l.jsx)(n.a,{href:"/liquidscript/api/classes/Template#analyze",children:(0,l.jsx)(n.code,{children:"Template.analyze()"})})," includes a ",(0,l.jsx)(n.code,{children:"variables"})," property, mapping template variable names to arrays of locations where those names occur. Each location is an object with a ",(0,l.jsx)(n.code,{children:"templateName"})," and ",(0,l.jsx)(n.code,{children:"lineNumber"})," property."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'import { Template } from "liquidscript";\n\nconst template = Template.fromString(`\\\n{% assign people = "Sally, John, Brian, Sue" | split: ", " %}\n{{ people }}\n{% for name in people %}\n    {{ forloop.index }} - {{ greeting }}, {{ name }}!\n{% endfor %}`);\n\nconst analysis = template.analyzeSync();\nconsole.log(Object.keys(analysis.variables));\n\nfor (const [name, locations] of Object.entries(analysis.variables)) {\n  for (const { templateName, lineNumber } of locations) {\n    console.log(`\'${name}\' found in \'${templateName}\' on line ${lineNumber}`);\n  }\n}\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"['people', 'forloop.index', 'greeting', 'name']\n'people' found in '<string>' on line 2\n'people' found in '<string>' on line 3\n'forloop.index' found in '<string>' on line 4\n'greeting' found in '<string>' on line 4\n'name' found in '<string>' on line 4\n"})}),"\n",(0,l.jsx)(n.h2,{id:"global-template-variables",children:"Global Template Variables"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"globalVariables"})," property of a ",(0,l.jsx)(n.a,{href:"/liquidscript/api/type-aliases/TemplateAnalysis",children:(0,l.jsx)(n.code,{children:"TemplateAnalysis"})})," object is similar to ",(0,l.jsx)(n.code,{children:"variables"}),", but only includes those variables that are not in scope from previous ",(0,l.jsx)(n.code,{children:"assign"}),", ",(0,l.jsx)(n.code,{children:"capture"}),", ",(0,l.jsx)(n.code,{children:"increment"})," or ",(0,l.jsx)(n.code,{children:"decrement"})," tags, or added to a block's scope by a block tag."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'import { Template } from "liquidscript";\n\nconst template = Template.fromString(`\\\n{% assign people = "Sally, John, Brian, Sue" | split: ", " %}\n{{ people }}\n{% for name in people %}\n    {{ forloop.index }} - {{ greeting }}, {{ name }}!\n{% endfor %}`);\n\nconst analysis = template.analyzeSync();\nconsole.log("all variables:", Object.keys(analysis.variables));\nconsole.log("global variables:", Object.keys(analysis.globalVariables));\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"all variables:  ['people', 'forloop.index', 'greeting', 'name']\nglobal variables:  ['greeting']\n"})}),"\n",(0,l.jsxs)(n.p,{children:["While ",(0,l.jsx)(n.code,{children:"greeting"})," is assumed to be global (that is, provided by application developers rather than a template author), LiquidScript knows that ",(0,l.jsx)(n.code,{children:"forloop"})," is in scope for the duration of the ",(0,l.jsx)(n.code,{children:"for"})," block. If ",(0,l.jsx)(n.code,{children:"people"})," were referenced before being assigned, we'd see an entry in the ",(0,l.jsx)(n.code,{children:"people"})," array for each location where it is out of scope."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'import { Template } from "liquidscript";\n\nconst template = Template.fromString(`\\\n{{ people }}\n{% assign people = "Sally, John, Brian, Sue" | split: ", " %}\n{{ people }}`);\n\nconst analysis = template.analyzeSync();\n\nfor (const [name, locations] of Object.entries(analysis.globalVariables)) {\n  for (const { templateName, lineNumber } of locations) {\n    console.log(\n      `\'${name}\' is out of scope in \'${templateName}\' on line ${lineNumber}`\n    );\n  }\n}\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"'people' is out of scope in '<string>' on line 1\n"})}),"\n",(0,l.jsx)(n.h2,{id:"local-template-variables",children:"Local Template Variables"}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"localVariables"})," property of a ",(0,l.jsx)(n.a,{href:"/liquidscript/api/type-aliases/TemplateAnalysis",children:(0,l.jsx)(n.code,{children:"TemplateAnalysis"})})," object is, again, a mapping of template variable names to their locations. Each entry is the location of an ",(0,l.jsx)(n.code,{children:"assign"}),", ",(0,l.jsx)(n.code,{children:"capture"}),", ",(0,l.jsx)(n.code,{children:"increment"}),", or ",(0,l.jsx)(n.code,{children:"decrement"})," tag (or any custom tag that introduces names into the template local namespace) that initializes or updates the variable."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'import { Template } from "liquidscript";\n\nconst template = Template.fromString(`\\\n{% assign people = "Sally, John, Brian, Sue" | split: ", " %}\n{% assign people = "Bob, Frank" | split: ", " %}`);\n\nconst analysis = template.analyzeSync();\n\nfor (const [name, locations] of Object.entries(analysis.localVariables)) {\n  for (const { templateName, lineNumber } of locations) {\n    console.log(\n      `\'${name}\' assigned in \'${templateName}\' on line ${lineNumber}`\n    );\n  }\n}\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"'people' assigned in '<string>' on line 1\n'people' assigned in '<string>' on line 2\n"})}),"\n",(0,l.jsx)(n.h2,{id:"filters",children:"Filters"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.em,{children:"New in version 1.8.0"})})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"filters"})," property of ",(0,l.jsx)(n.a,{href:"/liquidscript/api/type-aliases/TemplateAnalysis",children:(0,l.jsx)(n.code,{children:"TemplateAnalysis"})})," is an object mapping filter names to their locations."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"import { Template } from \"liquidscript\";\n\nconst template = Template.fromString(`\\\n{% assign people = \"Sally, John, Brian, Sue\" | split: \", \" %}\n{% for person in people %}\n  - {{ person | upcase | prepend: 'Hello, ' }}\n{% endfor %}`);\n\nconst analysis = template.analyzeSync();\n\nfor (const [filterName, locations] of Object.entries(analysis.filters)) {\n  for (const { templateName, lineNumber } of locations) {\n    console.log(\n      `'${filterName}' found in '${templateName}' on line ${lineNumber}`\n    );\n  }\n}\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"'split' found in '<string>' on line 1\n'upcase' found in '<string>' on line 3\n'prepend' found in '<string>' on line 3\n"})}),"\n",(0,l.jsx)(n.h2,{id:"tags",children:"Tags"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.em,{children:"New in version 1.8.0"})})}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"tags"})," property of ",(0,l.jsx)(n.a,{href:"/liquidscript/api/type-aliases/TemplateAnalysis",children:(0,l.jsx)(n.code,{children:"TemplateAnalysis"})})," is an object mapping tag names to their locations. Note that, for block tags, we only report the locations of the opening tag, and ",(0,l.jsx)(n.code,{children:"{% raw %}"})," tags will never be included."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"import { Template } from \"liquidscript\";\n\nconst template = Template.fromString(`\\\n{% assign people = \"Sally, John, Brian, Sue\" | split: \", \" %}\n{% for person in people %}\n  - {{ person | upcase | prepend: 'Hello, ' }}\n{% endfor %}`);\n\nconst analysis = template.analyzeSync();\n\nfor (const [tagName, locations] of Object.entries(analysis.tags)) {\n  for (const { templateName, lineNumber } of locations) {\n    console.log(\n      `'${tagName}' found in '${templateName}' on line ${lineNumber}`\n    );\n  }\n}\n"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"'assign' found in '<string>' on line 1\n'for' found in '<string>' on line 2\n"})}),"\n",(0,l.jsx)(n.h2,{id:"analyzing-partial-templates",children:"Analyzing Partial Templates"}),"\n",(0,l.jsxs)(n.p,{children:["When the ",(0,l.jsx)(n.code,{children:"followPartials"})," option to ",(0,l.jsx)(n.a,{href:"/liquidscript/api/classes/Template#analyze",children:(0,l.jsx)(n.code,{children:"Template.analyze()"})})," is ",(0,l.jsx)(n.code,{children:"true"})," (the default), LiquidScript will attempt to load and analyze templates from ",(0,l.jsx)(n.code,{children:"include"})," and ",(0,l.jsx)(n.code,{children:"render"})," tags. In the case of ",(0,l.jsx)(n.code,{children:"include"}),", this is only possible when the template name is a string literal."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'import { Environment, ObjectLoader } from "liquidscript";\n\nconst templates = {\n  layout: `"\\\n        {% include \'nav\', title: page_name %}\n        {% render \'foot\' with website as site_name %}\n    `,\n  nav: "{{ title }} nav bar",\n  foot: "a footer for {{ site_name }}",\n};\n\nconst env = new Environment({ loader: new ObjectLoader(templates) });\nconst layout = env.getTemplateSync("layout");\n\nconst analysis = layout.analyzeSync({ followPartials: true });\nconsole.log(analysis.variables);\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"{\n  title: [ { templateName: 'nav', lineNumber: 1 } ],\n  page_name: [ { templateName: 'layout', lineNumber: 1 } ],\n  site_name: [ { templateName: 'foot', lineNumber: 1 } ],\n  website: [ { templateName: 'layout', lineNumber: 2 } ]\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["When the ",(0,l.jsx)(n.code,{children:"raiseForFailures"})," option is ",(0,l.jsx)(n.code,{children:"true"})," (the default), we should expect a ",(0,l.jsx)(n.a,{href:"/liquidscript/api/classes/TemplateTraversalError",children:(0,l.jsx)(n.code,{children:"TemplateTraversalError"})})," to be thrown if a partial template can not be loaded. If ",(0,l.jsx)(n.code,{children:"raiseForFailures"})," is ",(0,l.jsx)(n.code,{children:"false"}),", a mapping of unloadable ",(0,l.jsx)(n.code,{children:"include"}),"/",(0,l.jsx)(n.code,{children:"render"})," tags is available as ",(0,l.jsx)(n.code,{children:"TemplateAnalysis.unloadablePartials"}),"."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'import { Environment, ObjectLoader } from "liquidscript";\n\nconst templates = {\n  layout: `"\\\n        {% include \'nav\', title: page_name %}\n        {% render \'foot\' with website as site_name %}\n    `,\n};\n\nconst env = new Environment({ loader: new ObjectLoader(templates) });\nconst layout = env.getTemplateSync("layout");\n\nconst analysis = layout.analyzeSync({\n  followPartials: true,\n  raiseForFailures: false,\n});\nconsole.log(analysis.unloadablePartials);\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"{\n  nav: [ { templateName: 'layout', lineNumber: 1 } ],\n  foot: [ { templateName: 'layout', lineNumber: 2 } ]\n}\n"})}),"\n",(0,l.jsx)(n.h2,{id:"analyzing-custom-tags",children:"Analyzing Custom Tags"}),"\n",(0,l.jsxs)(n.p,{children:["All built-in tags (the tag's ",(0,l.jsx)(n.code,{children:"Node"})," and ",(0,l.jsx)(n.code,{children:"Expression"})," objects) implement a ",(0,l.jsx)(n.code,{children:"children()"})," method. When analyzing a custom tag that does not implement ",(0,l.jsx)(n.code,{children:"children()"}),", and with the ",(0,l.jsx)(n.code,{children:"raiseForFailures"})," argument set to ",(0,l.jsx)(n.code,{children:"true"})," (the default), LiquidSCript will raise a ",(0,l.jsx)(n.a,{href:"/liquidscript/api/classes/TemplateTraversalError",children:(0,l.jsx)(n.code,{children:"TemplateTraversalError"})}),". When ",(0,l.jsx)(n.code,{children:"raiseForFailures"})," is ",(0,l.jsx)(n.code,{children:"false"}),", a mapping of unvisitable AST nodes and expressions is available as ",(0,l.jsx)(n.code,{children:"TemplateAnalysis.failedVisits"}),"."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'import {\n  Environment,\n  Node,\n  ObjectLoader,\n  RenderContext,\n  RenderStream,\n  Tag,\n  tokens,\n} from "liquidscript";\n\nclass ExampleNode implements Node {\n  constructor(readonly token: tokens.Token) {}\n\n  async render(context: RenderContext, out: RenderStream): Promise<void> {\n    out.write("example node");\n  }\n\n  renderSync(context: RenderContext, out: RenderStream): void {\n    out.write("example node");\n  }\n\n  // This node does not implement `children()`\n}\n\nclass ExampleTag implements Tag {\n  parse(stream: tokens.TokenStream): Node {\n    return new ExampleNode(stream.current);\n  }\n\n  // This tag does not implement `children()`\n}\n\nconst templates = {\n  layout: "{% example %}",\n};\n\nconst env = new Environment({ loader: new ObjectLoader(templates) });\nenv.addTag("example", new ExampleTag());\n\nconst layout = env.getTemplateSync("layout");\nconst analysis = layout.analyzeSync({\n  followPartials: true,\n  raiseForFailures: false,\n});\nconsole.log(analysis.failedVisits);\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"{ ExampleNode: [ { templateName: 'layout', lineNumber: 1 } ] }\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"/liquidscript/api/interfaces/Node#children",children:(0,l.jsx)(n.code,{children:"Node.children()"})})," should return an array of ",(0,l.jsx)(n.a,{href:"/liquidscript/api/type-aliases/ChildNode",children:(0,l.jsx)(n.code,{children:"ChildNode"})})," objects. Each ",(0,l.jsx)(n.code,{children:"ChildNode"})," includes a child ",(0,l.jsx)(n.a,{href:"/liquidscript/api/interfaces/Expression",children:(0,l.jsx)(n.code,{children:"Expression"})})," and/or ",(0,l.jsx)(n.a,{href:"/liquidscript/api/interfaces/Node",children:(0,l.jsx)(n.code,{children:"Node"})}),", plus any names the tag adds to the template local scope or subsequent block scope. Please see ",(0,l.jsx)(n.a,{href:"https://github.com/jg-rp/liquidscript/tree/main/src/builtin/tags",children:"src/builtin/tags"})," for examples."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"/liquidscript/api/interfaces/Expression#children",children:(0,l.jsx)(n.code,{children:"Expression.children()"})})," is expected to return an array of child ",(0,l.jsx)(n.code,{children:"Expression"}),"s. For example, ",(0,l.jsx)(n.a,{href:"/liquidscript/api/classes/RangeLiteral#children",children:(0,l.jsx)(n.code,{children:"RangeLiteral.children()"})})," returns an array containing expressions for its ",(0,l.jsx)(n.code,{children:"start"})," and ",(0,l.jsx)(n.code,{children:"stop"})," properties. Please see ",(0,l.jsx)(n.a,{href:"https://github.com/jg-rp/liquidscript/blob/main/src/expression.ts",children:"src/expression.ts"})," for examples."]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>r});var l=a(96540);const i={},s=l.createContext(i);function t(e){const n=l.useContext(s);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),l.createElement(s.Provider,{value:n},e.children)}}}]);