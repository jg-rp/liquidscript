"use strict";(self.webpackChunkliquidscript_docs=self.webpackChunkliquidscript_docs||[]).push([[9086],{9494:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(6687);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=s(n),u=i,k=c["".concat(p,".").concat(u)]||c[u]||m[u]||l;return n?a.createElement(k,r(r({ref:t},d),{},{components:n})):a.createElement(k,r({ref:t},d))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6968:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(1943),i=(n(6687),n(9494));const l={},r="Extra Tags",o={unversionedId:"extra/tags",id:"extra/tags",title:"Extra Tags",description:"This page documents extra tags available in LiquidScript. These tags are not part of standard Liquid and are not registered automatically with each new LiquidScript environment.",source:"@site/docs/extra/tags.md",sourceDirName:"extra",slug:"/extra/tags",permalink:"/liquidscript/extra/tags",draft:!1,editUrl:"https://github.com/jg-rp/liquidscript/tree/docs/docs/extra/tags.md",tags:[],version:"current",frontMatter:{},sidebar:"languageSidebar",previous:{title:"Liquid Tags",permalink:"/liquidscript/language/tags"}},p={},s=[{value:"extends / block",id:"extends--block",level:2},{value:"Block Names",id:"block-names",level:3},{value:"Block Scope",id:"block-scope",level:3},{value:"Required Blocks",id:"required-blocks",level:3},{value:"Super Blocks",id:"super-blocks",level:3},{value:"if (not)",id:"if-not",level:2},{value:"inline if / else",id:"inline-if--else",level:2},{value:"With Filters",id:"with-filters",level:3},{value:"macro / call",id:"macro--call",level:2},{value:"Excess Arguments",id:"excess-arguments",level:3},{value:"with",id:"with",level:2}],d={toc:s},c="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"extra-tags"},"Extra Tags"),(0,i.kt)("p",null,"This page documents extra tags available in LiquidScript. These tags are not part of standard Liquid and are not registered automatically with each new LiquidScript environment."),(0,i.kt)("h2",{id:"extends--block"},"extends / block"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"New in version 1.8.0"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain"},'{% extends "<string>" %}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain"},"{% block <identifier,string> [, required] %}\n  <literal,statement,tag> ...\n{% endblock [<identifier,string>] %}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"{% extends %}")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"{% block %}")," tags add template inheritance features to Python Liquid. In this example, ",(0,i.kt)("inlineCode",{parentName:"p"},"page.html")," inherits from ",(0,i.kt)("inlineCode",{parentName:"p"},"base.html")," and overrides the ",(0,i.kt)("inlineCode",{parentName:"p"},"content")," block. As ",(0,i.kt)("inlineCode",{parentName:"p"},"page.html")," does not define a ",(0,i.kt)("inlineCode",{parentName:"p"},"footer")," block, the footer from ",(0,i.kt)("inlineCode",{parentName:"p"},"base.html")," is used."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Environment, extra, ObjectLoader } from "liquidscript";\n\nconst loader = new ObjectLoader({\n  "base.html":\n    "<body>\\n" +\n    \'  <div id="content">{% block content required %}{% endblock %}</div>\\n\' +\n    \'  <div id="footer">{% block footer %}Default footer{% endblock %}</div>\\n\' +\n    "</body>",\n  "page.html":\n    "{% extends \'base.html\' %}\\n" +\n    "{% block content %}Hello, {{ you }}!{% endblock %}",\n});\n\nconst env = new Environment({ loader });\nextra.addInheritanceTags(env);\n\nconst template = env.getTemplateSync("page.html");\nconsole.log(template.renderSync({ you: "World" }));\n')),(0,i.kt)("p",null,"A template can contain at most one ",(0,i.kt)("inlineCode",{parentName:"p"},"{% extends %}")," tag, and that tag should normally be the first in the template. All other template text and tags (including whitespace) preceding ",(0,i.kt)("inlineCode",{parentName:"p"},"{% extends %}")," will be output normally. Subsequent template text and tags outside any ",(0,i.kt)("inlineCode",{parentName:"p"},"{% block %}")," tags will be ignored, unless rendering a base template directly."),(0,i.kt)("p",null,"As soon as an ",(0,i.kt)("inlineCode",{parentName:"p"},"{% extends %}")," tag is found, template rendering stops and Python Liquid loads the parent template (using the configured ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/introduction/loading-templates"},"loader"),") before searching for ",(0,i.kt)("inlineCode",{parentName:"p"},"{% block %}")," tags. We keep loading and searching up the inheritance chain until a parent template with no ",(0,i.kt)("inlineCode",{parentName:"p"},"{% extends %}")," tag is found, this is the ",(0,i.kt)("em",{parentName:"p"},"base")," template."),(0,i.kt)("p",null,"The base template is then rendered, substituting its blocks with those defined in its children."),(0,i.kt)("h3",{id:"block-names"},"Block Names"),(0,i.kt)("p",null,"Every ",(0,i.kt)("inlineCode",{parentName:"p"},"{% block %}")," must have a name and that name must be unique within a single template. Block names must be valid Liquid identifiers, optionally enclosed in quotes (quoted and unquoted block names are equivalent)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"{% endblock %}")," tags can include a name too. If given a name and that name does not match the one given at the start of the block, a ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/TemplateInheritanceError"},(0,i.kt)("inlineCode",{parentName:"a"},"TemplateInheritanceError"))," is thrown when parsing the template."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-liquid"},'<body>\n  <div id="content">\n    {% block content %}\n      {% block title %}\n        <h1>Some Title</h1>\n      {% endblock title %}\n    {% endblock content %}\n  </div>\n  <div id="footer">\n    {% block footer %}\n      Default footer\n    {% endblock footer %}\n  </div>\n</body>\n')),(0,i.kt)("h3",{id:"block-scope"},"Block Scope"),(0,i.kt)("p",null,"All blocks are scoped. Variables defined in base templates and enclosing blocks will be in scope when rendering overridden blocks."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="base"',title:'"base"'},"{% assign thing = 'item' %}\n{% for i in (1..3) %}\n  {% block list-item %}{% endblock %}\n{% endfor %}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="child"',title:'"child"'},'{% extends "base" %}\n{% block list-item %}\n  {{ thing }} #{{ i }}\n{% endblock %}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"item #1\n\nitem #2\n\nitem #3\n")),(0,i.kt)("p",null,"Variables defined in an overridden block will go out of scope after that block has been rendered."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="base"',title:'"base"'},'{% assign greeting = "Hello" %}\n{% block say-hi %}{{ greeting }}, World!{% endblock %}\n{{ greeting }}, World!\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="child"',title:'"child"'},'{% extends "base" %}\n{% block say-hi %}\n  {% assign greeting = "Goodbye" %}\n  {{ greeting }}, World!\n  {{ block.super }}\n{% endblock %}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Goodbye, World!\nHello, World!\n\nHello, World!\n")),(0,i.kt)("h3",{id:"required-blocks"},"Required Blocks"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"{% block %}")," tag's ",(0,i.kt)("inlineCode",{parentName:"p"},"required")," argument to indicate that the block must be overridden by a child template. If a required block does not get implemented by a child template, a ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/TemplateInheritanceError"},(0,i.kt)("inlineCode",{parentName:"a"},"TemplateInheritanceError"))," error is thrown at render time."),(0,i.kt)("p",null,"In this example, if the template were to be rendered directly, we would expect a ",(0,i.kt)("inlineCode",{parentName:"p"},"TemplateInheritanceError")," due to the ",(0,i.kt)("inlineCode",{parentName:"p"},"content")," block being required."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="base"',title:'"base"'},'<head>\n  {% block head %}{% endblock %}\n<head>\n<body>\n  <div id="content">{% block content required %}{% endblock %}</div>\n  <div id="footer">{% block footer %}Default footer{% endblock %}</div>\n</body>\n')),(0,i.kt)("h3",{id:"super-blocks"},"Super Blocks"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"block")," object is available inside every ",(0,i.kt)("inlineCode",{parentName:"p"},"{% block %}")," tag. It has just one property, ",(0,i.kt)("inlineCode",{parentName:"p"},"super"),". If a ",(0,i.kt)("inlineCode",{parentName:"p"},"{% block %}")," is overriding a parent block, ",(0,i.kt)("inlineCode",{parentName:"p"},"{{ block.super }}")," will render the parent's implementation of that block."),(0,i.kt)("p",null,"In this example we use ",(0,i.kt)("inlineCode",{parentName:"p"},"{{ block.super }}")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"footer")," block to output the base template's footer with a year appended to it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="base"',title:'"base"'},'<head>\n  {% block head %}{% endblock %}\n<head>\n<body>\n  <div id="content">{% block content required %}{% endblock %}</div>\n  <div id="footer">{% block footer %}Default footer{% endblock %}</div>\n</body>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="child"',title:'"child"'},'{% extends "base" %}\n{% block content %}Hello, World!{% endblock %}\n{% block footer %}{{ block.super }} - 2023{% endblock %}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="output"',title:'"output"'},'<body>\n  <div id="content">Hello, World!</div>\n  <div id="footer">Default footer - 2023</div>\n</body>\n')),(0,i.kt)("h2",{id:"if-not"},"if (not)"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"New in version 1.1.0"))),(0,i.kt)("p",null,"A drop-in replacement for the standard ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#if"},(0,i.kt)("inlineCode",{parentName:"a"},"if"))," tag that supports logical ",(0,i.kt)("inlineCode",{parentName:"p"},"not")," and grouping with parentheses. Please see ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#expressions"},"the tag reference")," for a description of the standard ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," expression."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"{% if <expression> %}\n  <literal,statement,tag> ...\n  [ {% elsif <expression> %} <literal,statement,tag> ... [ {% elsif <expression> %} ... ]]\n  [ {% else %} <literal,statement,tag> ... ]\n{% endif %}\n")),(0,i.kt)("p",null,"Register ",(0,i.kt)("inlineCode",{parentName:"p"},"liquidscript.extra.tags.IfNotTag")," with an ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment"},(0,i.kt)("inlineCode",{parentName:"a"},"Environment"))," to make it available to templates rendered from that environment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Environment, extra } from "liquidscript";\n\nconst env = new Environment();\nenv.addTag("if", new extra.tags.IfNotTag());\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"and")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"or")," operators in Liquid are right associative. Where ",(0,i.kt)("inlineCode",{parentName:"p"},"true and false and false or true")," is equivalent to ",(0,i.kt)("inlineCode",{parentName:"p"},"(true and (false and (false or true)))"),", evaluating to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),". JavaScript, on the other hand, would parse an equivalent expression as ",(0,i.kt)("inlineCode",{parentName:"p"},"(((true && false) && false) || true)"),", evaluating to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,"This implementation of ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," maintains that right associativity so that any standard ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," expression will behave the same, with or without non-standard ",(0,i.kt)("inlineCode",{parentName:"p"},"if"),". Only when ",(0,i.kt)("inlineCode",{parentName:"p"},"not")," or parentheses are used will behavior deviate from the standard."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="example.liquid"',title:'"example.liquid"'},"{% if ((user.privileged and not user.blocked) or user.is_admin) %}\n  Hello, {{ user.name }}!\n{% else %}\n  User is blocked.\n{% endif %}\n")),(0,i.kt)("h2",{id:"inline-if--else"},"inline if / else"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"New in version 1.7.0"))),(0,i.kt)("p",null,"Drop-in replacements for the standard output statement, ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#assign"},(0,i.kt)("inlineCode",{parentName:"a"},"assign"))," tag, and ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#echo"},(0,i.kt)("inlineCode",{parentName:"a"},"echo"))," tag that support inline ",(0,i.kt)("inlineCode",{parentName:"p"},"if"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"else")," expressions. You can find a BNF-like description of the inline conditional expression in ",(0,i.kt)("a",{parentName:"p",href:"https://gist.github.com/jg-rp/e2dc4da9e5033e087e46016008a9d91c#file-inline_if_expression-bnf"},"this gist"),"."),(0,i.kt)("p",null,"Register one or more of ",(0,i.kt)("inlineCode",{parentName:"p"},"ConditionalOutputStatement"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ConditionalAssignTag")," amd ",(0,i.kt)("inlineCode",{parentName:"p"},"ConditionalEchoTag")," from ",(0,i.kt)("inlineCode",{parentName:"p"},"liquidscript.extra.tags")," with an ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment"},(0,i.kt)("inlineCode",{parentName:"a"},"Environment"))," to make them available to templates rendered from that environment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Environment, extra } from "liquidscript";\n\nconst env = new Environment();\nenv.addTag("statement", new extra.tags.ConditionalOutputStatement());\nenv.addTag("assign", new extra.tags.ConditionalAssignTag());\nenv.addTag("echo", new extra.tags.ConditionalEchoTag());\n')),(0,i.kt)("p",null,"Inline ",(0,i.kt)("inlineCode",{parentName:"p"},"if"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"else")," expressions are designed to be backwards compatible with standard filtered expressions. As long as there are no template variables called ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"else")," within a filtered expression, standard output statements, ",(0,i.kt)("inlineCode",{parentName:"p"},"assign")," tags and ",(0,i.kt)("inlineCode",{parentName:"p"},"echo")," tags will behave the same."),(0,i.kt)("p",null,"In this example, if ",(0,i.kt)("inlineCode",{parentName:"p"},"user.logged_in")," is false or undefined (see ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/introduction/undefined#falsy-undefined"},"Falsy Undefined"),"), ",(0,i.kt)("inlineCode",{parentName:"p"},"please log in")," will be output."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ user.name if user.logged_in else 'please log in' }}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"else")," part of an inline expression is optional, defaulting to ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/introduction/undefined"},"undefined"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{{ 'hello user' if user.logged_in }}!\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"!\n")),(0,i.kt)("p",null,"Inline conditional expressions are evaluated lazily. If the condition is falsy, the leading object is not evaluated. Equally, if the condition is truthy, any expression following ",(0,i.kt)("inlineCode",{parentName:"p"},"else")," will not be evaluated."),(0,i.kt)("h3",{id:"with-filters"},"With Filters"),(0,i.kt)("p",null,"Filters can appear before an inline ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," expression."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{{ 'hello user' | capitalize if user.logged_in else 'please log in' }}\n")),(0,i.kt)("p",null,"Or after an inline ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," expression. In which case filters will only be applied to the ",(0,i.kt)("inlineCode",{parentName:"p"},"else")," clause."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{% assign param = 'hello user' if user.logged_in else 'please log in' | url_encode %}\n")),(0,i.kt)("p",null,"Or both."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{{% assign param = 'hello user' | capitalize if user.logged_in else 'please log in' | url_encode %}\n")),(0,i.kt)("p",null,"Use a double pipe (",(0,i.kt)("inlineCode",{parentName:"p"},"||"),') to start any filters you want to apply regardless of which branch is taken. Subsequent "tail filters" should be separated by a single pipe (',(0,i.kt)("inlineCode",{parentName:"p"},"|"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{{% assign name =\n  user.nickname | downcase\n  if user.has_nickname\n  else user.last_name | capitalize\n  || prepend: user.title | strip\n%}\n")),(0,i.kt)("h2",{id:"macro--call"},"macro / call"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"New in version 1.7.0"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain"},"{% macro <identifier,string> [[,] [ <object>, ... ] [ <identifier>: <object>, ... ]] %}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain"},"{% call <identifier,string> [[,] [ <object>, ... ] [ <identifier>: <object>, ... ]] %}\n")),(0,i.kt)("p",null,"Define parameterized Liquid snippets using the ",(0,i.kt)("inlineCode",{parentName:"p"},"macro")," tag and call them using the ",(0,i.kt)("inlineCode",{parentName:"p"},"call")," tag."),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"macro")," tag is like defining a function. Its parameter list defines arguments, possibly with default values. A ",(0,i.kt)("inlineCode",{parentName:"p"},"macro")," tag's block has its own scope including its arguments and template global variables, just like the ",(0,i.kt)("inlineCode",{parentName:"p"},"render")," tag."),(0,i.kt)("p",null,"Note that argument defaults are bound late. They are evaluated when a ",(0,i.kt)("inlineCode",{parentName:"p"},"call")," expression is evaluated, not when the macro is defined."),(0,i.kt)("p",null,"Register and instance ",(0,i.kt)("inlineCode",{parentName:"p"},"liquidscript.extra.tags.CallTag")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"liquidscript.extra.tags.MacroTag")," with an ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment"},(0,i.kt)("inlineCode",{parentName:"a"},"Environment"))," to make them available to templates rendered from that environment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Environment, extra } from "liquidscript";\n\nconst env = new Environment();\nenv.addTag("call", new extra.tags.CallTag());\nenv.addTag("macro", new extra.tags.MacroTag());\n')),(0,i.kt)("p",null,"This example defines a ",(0,i.kt)("inlineCode",{parentName:"p"},"price")," macro, then calls it twice with different arguments."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-liquid"},"{% macro 'price' product, on_sale: false %}\n  <div class=\"price-wrapper\">\n  {% if on_sale %}\n    <p>Was {{ product.regular_price | prepend: '$' }}</p>\n    <p>Now {{ product.price | prepend: '$' }}</p>\n  {% else %}\n    <p>{{ product.price | prepend: '$' }}</p>\n  {% endif %}\n  </div>\n{% endmacro %}\n\n{% call 'price' products[0], on_sale: true %}\n{% call 'price' products[1] %}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="output"',title:'"output"'},'<div class="price-wrapper">\n  <p>Was $5.99</p>\n  <p>Now $4.99</p>\n</div>\n\n<div class="price-wrapper">\n  <p>$12.00</p>\n</div>\n')),(0,i.kt)("h3",{id:"excess-arguments"},"Excess Arguments"),(0,i.kt)("p",null,"Excess arguments passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"call")," are collected into ",(0,i.kt)("inlineCode",{parentName:"p"},"args")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"kwargs"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},"{% macro 'foo' %}\n  {% for arg in args %}\n    - {{ arg }}\n  {% endfor %}\n\n  {% for arg in kwargs %}\n    - {{ arg.0 }} => {{ arg.1 }}\n  {% endfor %}\n{% endmacro %}\n\n{% call 'foo' 42, 43, 99, a: 3.14, b: 2.71828 %}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"- 42\n- 43\n- 99\n\n- a => 3.14\n- b => 2.71828\n")),(0,i.kt)("h2",{id:"with"},"with"),(0,i.kt)("p",null,"Extend the current scope for the duration of the ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," block. Useful for aliasing long or nested variable names. Also useful for caching the result of a drop's methods, if the drop does not perform its own caching."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain"},"{% with <identifier>: <object> [, <identifier>: object ... ] %}\n  <literal,statement,tag> ...\n{% endwith %}\n")),(0,i.kt)("p",null,"Register ",(0,i.kt)("inlineCode",{parentName:"p"},"liquidscript.extra.tags.WithTag")," with an ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment"},(0,i.kt)("inlineCode",{parentName:"a"},"Environment"))," to make it available to templates rendered from that environment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Environment, extra } from "liquidscript";\n\nconst env = new Environment();\nenv.addTag("with", new extra.tags.WithTag());\n')),(0,i.kt)("p",null,"This implementation keeps template variables set inside the with block, using ",(0,i.kt)("inlineCode",{parentName:"p"},"assign")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"capture"),", alive after the block has been rendered."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="example.liquid"',title:'"example.liquid"'},"{% with product: collection.products.first %}\n  {{- product.title -}}\n{% endwith %}\n")))}m.isMDXComponent=!0}}]);