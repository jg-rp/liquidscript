"use strict";(self.webpackChunkliquidscript_docs=self.webpackChunkliquidscript_docs||[]).push([[20333],{90378:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var r=t(74848),a=t(28453);const i={},l="Render Context",s={id:"introduction/render-context",title:"Render Context",description:"The result of rendering a template depends on the context in which it is rendered. That is, available variables and their values, and options set on the bound Environment.",source:"@site/docs/introduction/render-context.md",sourceDirName:"introduction",slug:"/introduction/render-context",permalink:"/liquidscript/introduction/render-context",draft:!1,unlisted:!1,editUrl:"https://github.com/jg-rp/liquidscript/tree/docs/docs/introduction/render-context.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Loading Templates",permalink:"/liquidscript/introduction/loading-templates"},next:{title:"Objects and Drops",permalink:"/liquidscript/introduction/objects-and-drops"}},o={},d=[{value:"Environment Globals",id:"environment-globals",level:2},{value:"Template Globals",id:"template-globals",level:2},{value:"Render Arguments",id:"render-arguments",level:2},{value:"Matter",id:"matter",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"render-context",children:"Render Context"}),"\n",(0,r.jsxs)(n.p,{children:["The result of rendering a template depends on the ",(0,r.jsx)(n.a,{href:"/liquidscript/api/classes/RenderContext",children:"context"})," in which it is rendered. That is, available variables and their values, and options set on the bound ",(0,r.jsx)(n.a,{href:"/liquidscript/api/classes/Environment",children:"Environment"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Template ",(0,r.jsx)(n.em,{children:"global"})," variables are those added to a render context by application developers. From a template author's perspective, ",(0,r.jsx)(n.em,{children:"globals"})," are read-only and are available to all templates, including those rendered with the ",(0,r.jsx)(n.code,{children:"render"})," tag."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Local"})," variables are those defined by template authors using ",(0,r.jsx)(n.code,{children:"{% assign %}"})," and ",(0,r.jsx)(n.code,{children:"{% capture %}"}),". Local variables can mask names defined in the global namespace, but never change them."]}),"\n",(0,r.jsxs)(n.p,{children:["Named counters created with ",(0,r.jsx)(n.a,{href:"/liquidscript/language/tags#increment",children:(0,r.jsx)(n.code,{children:"{% increment %}"})})," and ",(0,r.jsx)(n.a,{href:"/liquidscript/language/tags#decrement",children:(0,r.jsx)(n.code,{children:"{% decrement %}"})})," have their own namespace. Outside of an ",(0,r.jsx)(n.code,{children:"increment"})," or ",(0,r.jsx)(n.code,{children:"decrement"})," tag, Liquid will look in the counters namespace last, after ",(0,r.jsx)(n.em,{children:"locals"})," and ",(0,r.jsx)(n.em,{children:"globals"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"environment-globals",children:"Environment Globals"}),"\n",(0,r.jsxs)(n.p,{children:["You can add ",(0,r.jsx)(n.em,{children:"global"})," variables to an ",(0,r.jsx)(n.a,{href:"/liquidscript/api/classes/Environment",children:"Environment"})," using the ",(0,r.jsx)(n.a,{href:"/liquidscript/api/type-aliases/EnvironmentOptions",children:(0,r.jsx)(n.code,{children:"globals"})})," option. Environment globals are automatically added to the render context of every ",(0,r.jsx)(n.a,{href:"/liquidscript/api/classes/Template",children:"Template"})," created from that environment."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { Environment } from "liquidscript";\n\nconst env = new Environment({ globals: { site_name: "My Site" } });\nconst source = `\n<html>\n  <head>\n    <title>{{ site_name }}</title>\n  </head>\n</html>\n`;\n\nconst template = env.fromString(source);\nconsole.log(template.renderSync());\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",metastring:'title="output"',children:"<html>\n  <head>\n    <title>My Site</title>\n  </head>\n</html>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"template-globals",children:"Template Globals"}),"\n",(0,r.jsxs)(n.p,{children:["Similar to ",(0,r.jsx)(n.a,{href:"#environment-globals",children:"Environment Globals"}),", you can pin global template variables to a ",(0,r.jsx)(n.a,{href:"/liquidscript/api/classes/Template",children:"Template"}),". Globals set on a template will be merged with any set on its environment and added to the render context automatically."]}),"\n",(0,r.jsx)(n.p,{children:"If environment and template globals have conflicting names, template variables will take priority over environment variables."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { Environment } from "liquidscript";\n\nconst env = new Environment({ globals: { site_name: "My Site" } });\nconst source = `\n<html>\n  <head>\n    <title>{{ site_name }} - {{ page.name }}</title>\n  </head>\n</html>\n`;\n\nconst template = env.fromString(source, { page: { name: "Blog" } });\nconsole.log(template.renderSync());\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",metastring:'title="output"',children:"<html>\n  <head>\n    <title>My Site - Blog</title>\n  </head>\n</html>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"render-arguments",children:"Render Arguments"}),"\n",(0,r.jsxs)(n.p,{children:["Properties from the object passes to ",(0,r.jsx)(n.a,{href:"/liquidscript/api/classes/Template#render",children:(0,r.jsx)(n.code,{children:"Template.render()"})})," and ",(0,r.jsx)(n.a,{href:"/liquidscript/api/classes/Template#rendersync",children:(0,r.jsx)(n.code,{children:"Template.renderSync()"})})," are also added to the ",(0,r.jsx)(n.em,{children:"global"})," namespace, although, unlike environment and template globals, they do not persist between calls to ",(0,r.jsx)(n.code,{children:"render()"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"render()"})," keyword arguments take priority over environment and template globals."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { Environment } from "liquidscript";\n\nconst env = new Environment({ globals: { site_name: "My Site" } });\nconst source = `\n<html>\n  <head>\n    <title>{{ site_name }} - {{ page.name }}</title>\n  </head>\n  <body>\n    <p>Hello, {{ user.name }}</p>\n  </body>\n</html>\n`;\n\nconst template = env.fromString(source, { page: { name: "Blog" } });\nconsole.log(template.renderSync({ user: { name: "Sally" } }));\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",metastring:'title="output"',children:"<html>\n  <head>\n    <title>My Site - Blog</title>\n  </head>\n  <body>\n    <p>Hello, Sally</p>\n  </body>\n</html>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"matter",children:"Matter"}),"\n",(0,r.jsxs)(n.p,{children:["Matter variables are those that are added to a ",(0,r.jsx)(n.a,{href:"/liquidscript/api/classes/Template",children:"template"})," by a ",(0,r.jsx)(n.a,{href:"/liquidscript/introduction/loading-templates",children:"loader"}),". They could be from a ",(0,r.jsx)(n.a,{href:"/liquidscript/guides/custom-loaders#front-matter-loader",children:"front matter loader"})," or extra meta data from a ",(0,r.jsx)(n.a,{href:"/liquidscript/guides/custom-loaders#async-database-loader",children:"database loader"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["These, too, are merged into the ",(0,r.jsx)(n.em,{children:"global"})," namespace, taking priority over template globals, but not ",(0,r.jsx)(n.code,{children:"render()"})," keyword arguments."]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var r=t(96540);const a={},i=r.createContext(a);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);