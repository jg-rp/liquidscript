"use strict";(self.webpackChunkliquidscript_docs=self.webpackChunkliquidscript_docs||[]).push([[52349],{55110:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var r=t(74848),i=t(28453),s=t(11470),a=t(19365);const l={},o="Custom Filters",c={id:"guides/custom-filters",title:"Custom Filters",description:"Liquid filters are JavaScript functions. A filter function is any callable that accepts at least one argument, the result of the left hand side of a filtered expression. The function's return value will be output, assigned or piped to more filters.",source:"@site/docs/guides/custom-filters.mdx",sourceDirName:"guides",slug:"/guides/custom-filters",permalink:"/liquidscript/guides/custom-filters",draft:!1,unlisted:!1,editUrl:"https://github.com/jg-rp/liquidscript/tree/docs/docs/guides/custom-filters.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"HTML Auto-Escape",permalink:"/liquidscript/introduction/auto-escape"},next:{title:"Custom Tags",permalink:"/liquidscript/guides/custom-tags"}},u={},d=[{value:"Add a Filter",id:"add-a-filter",level:2},{value:"Replace a Filter",id:"replace-a-filter",level:2},{value:"Remove a Filter",id:"remove-a-filter",level:2},{value:"Filter Context",id:"filter-context",level:2},{value:"Keyword Arguments and Options",id:"keyword-arguments-and-options",level:3},{value:"Liquid Numbers and Arithmetic",id:"liquid-numbers-and-arithmetic",level:2},{value:"Auto-Escape and Markup",id:"auto-escape-and-markup",level:2},{value:"Missing and Excess Arguments",id:"missing-and-excess-arguments",level:2},{value:"Undefined vs undefined",id:"undefined-vs-undefined",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"custom-filters",children:"Custom Filters"}),"\n",(0,r.jsxs)(n.p,{children:["Liquid ",(0,r.jsx)(n.a,{href:"/liquidscript/language/introduction#filters",children:"filters"})," are JavaScript functions. A filter function is any callable that accepts at least one argument, the result of the left hand side of a filtered expression. The function's return value will be output, assigned or piped to more filters."]}),"\n",(0,r.jsxs)(n.p,{children:["You can add to, remove or modify Liquid's ",(0,r.jsx)(n.a,{href:"/liquidscript/language/filters",children:"built-in filters"})," to suit your needs by registering filter functions with an ",(0,r.jsx)(n.a,{href:"/liquidscript/api/classes/Environment",children:"Environment"}),", then rendering your templates from that environment."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["All built-in filters are implemented in this way, so have a look in ",(0,r.jsx)(n.a,{href:"https://github.com/jg-rp/liquidscript/tree/main/src/builtin/filters",children:"src/builtin/filters/"})," for more examples."]})}),"\n",(0,r.jsx)(n.h2,{id:"add-a-filter",children:"Add a Filter"}),"\n",(0,r.jsxs)(n.p,{children:["Add a custom template filter to an ",(0,r.jsx)(n.a,{href:"/liquidscript/api/classes/Environment",children:"Environment"})," by calling its ",(0,r.jsx)(n.a,{href:"/liquidscript/api/classes/Environment#addfilter",children:(0,r.jsx)(n.code,{children:"addFilter()"})})," method. Here's a simple example of adding JavaScript's ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith",children:(0,r.jsx)(n.code,{children:"String.prototype.endsWith"})})," as a filter function."]}),"\n",(0,r.jsxs)(s.A,{groupId:"js-ts",children:[(0,r.jsx)(a.A,{value:"js",label:"JavaScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { Environment } from "liquidscript";\n\nconst env = new Environment();\nenv.addFilter("ends_with", (val, arg) => val.endsWith(arg));\n'})})}),(0,r.jsx)(a.A,{value:"ts",label:"TypeScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { Environment } from "liquidscript";\n\nconst env = new Environment();\nenv.addFilter("ends_with", (val: string, arg: string) => val.endsWith(arg));\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"In a template you'd use it like this."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-liquid",children:'{% assign foo = "foobar" | ends_with: "bar" %}\n{% if foo %}\n    \x3c!-- do something --\x3e\n{% endif %}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"replace-a-filter",children:"Replace a Filter"}),"\n",(0,r.jsxs)(n.p,{children:["If given the name of an existing filter function, ",(0,r.jsx)(n.a,{href:"/liquidscript/api/classes/Environment#addfilter",children:(0,r.jsx)(n.code,{children:"Environment.add_filter()"})})," will replace it without warning. For example, suppose you wish to replace the ",(0,r.jsx)(n.a,{href:"/liquidscript/language/filters#slice",children:"slice"})," filter for one which uses start and end values instead of start and length, and is a bit more forgiving in terms of allowed inputs."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { Environment, Markup, filters, object } from "liquidscript";\n\nfunction mySlice(value, start, end) {\n  // Make sure the input value is an array or string.\n  value = object.isArray(value) ? value : object.liquidStringify(value);\n  // Make sure `start` is a number.\n  start = filters.parseNumberOrZero(start);\n  // End is optional\n  if (end === undefined) return value.slice(start);\n  // Make sure `end` is a number.\n  end = filters.parseNumberOrZero(end);\n  return value.slice(start, end);\n}\n\nconst env = new Environment();\nenv.addFilter("slice", mySlice);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"remove-a-filter",children:"Remove a Filter"}),"\n",(0,r.jsxs)(n.p,{children:["Remove a filter by deleting it from ",(0,r.jsx)(n.a,{href:"/liquidscript/api/classes/Environment#filters",children:(0,r.jsx)(n.code,{children:"Environment.filters"})}),". It's a plain object mapping filter names to filter functions."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { Environment } from "liquidscript";\n\nconst env = new Environment();\ndelete env.filters.base64_decode;\n'})}),"\n",(0,r.jsx)(n.h2,{id:"filter-context",children:"Filter Context"}),"\n",(0,r.jsxs)(n.p,{children:["Filter functions are applied with their ",(0,r.jsx)(n.code,{children:"this"})," value set to a ",(0,r.jsx)(n.a,{href:"/liquidscript/api/type-aliases/FilterContext",children:(0,r.jsx)(n.code,{children:"FilterContext"})}),", giving filters access to the current environment and render context."]}),"\n",(0,r.jsxs)(n.p,{children:["This example resolves the name ",(0,r.jsx)(n.code,{children:'"handle"'})," in the scope of the current render context, then uses the result as part of the filter's return value. We also reference the ",(0,r.jsx)(n.code,{children:"autoEscape"})," option set on the active environment."]}),"\n",(0,r.jsxs)(s.A,{groupId:"js-ts",children:[(0,r.jsx)(a.A,{value:"js",label:"JavaScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { Environment, Markup } from "liquidscript";\n\nfunction LinkToTag(label, tag) {\n  const handle = this.context.resolveSync("handle");\n  const result = `<a title="Show tag ${tag}" href="/collections/${handle}/${tag}">${label}</a>`;\n  return this.context.environment.autoEscape ? new Markup(result) : result;\n}\n\nconst env = new Environment();\nenv.addFilter("link_to_tag", LinkToTag);\n'})})}),(0,r.jsx)(a.A,{value:"ts",label:"TypeScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { Environment, Markup, FilterContext } from "liquidscript";\n\nfunction LinkToTag(this: FilterContext, label: string, tag: string): string {\n  const handle = this.context.resolveSync("handle");\n  const result = `<a title="Show tag ${tag}" href="/collections/${handle}/${tag}">${label}</a>`;\n  return this.context.environment.autoEscape ? new Markup(result) : result;\n}\n\nconst env = new Environment();\nenv.addFilter("link_to_tag", LinkToTag);\n'})})})]}),"\n",(0,r.jsx)(n.h3,{id:"keyword-arguments-and-options",children:"Keyword Arguments and Options"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.a,{href:"/liquidscript/api/type-aliases/FilterContext",children:(0,r.jsx)(n.code,{children:"FilterContext"})})," also includes any keyword arguments passed to the filter. These are available as ",(0,r.jsx)(n.code,{children:"this.options"}),". The ",(0,r.jsx)(n.a,{href:"/liquidscript/language/filters#default",children:(0,r.jsx)(n.code,{children:"default"})})," filter is the only built-in filter to use a keyword argument. For example, ",(0,r.jsx)(n.code,{children:"{{ user.name | default: 'anonymous', allow_false: false }}"})]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["In Liquid, keyword arguments can appear in any order, even before and inbetween positional arguments. It is because of this, and the desire to allow filters with ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters",children:"rest parameters"}),", that LiquidScript puts options in the filter context object instead of the last argument of the filter function."]})}),"\n",(0,r.jsx)(n.h2,{id:"liquid-numbers-and-arithmetic",children:"Liquid Numbers and Arithmetic"}),"\n",(0,r.jsxs)(n.p,{children:["Unlike JavaScript, Liquid has distinct integer and float number types. To maintain compatibility with the reference implementation of Liquid, LiquidScript defines an ",(0,r.jsx)(n.a,{href:"/liquidscript/api/classes/Integer",children:(0,r.jsx)(n.code,{children:"Integer"})})," type, a ",(0,r.jsx)(n.a,{href:"/liquidscript/api/classes/Float",children:(0,r.jsx)(n.code,{children:"Float"})})," type and ",(0,r.jsx)(n.a,{href:"/liquidscript/api/functions/parseNumberT",children:"utility functions"})," for converting to these types."]}),"\n",(0,r.jsxs)(n.p,{children:["Both ",(0,r.jsx)(n.code,{children:"Integer"})," and ",(0,r.jsx)(n.code,{children:"Float"})," export methods for performing decimal arithmetic, as opposed to JavaScript's usual floating point arithmetic."]}),"\n",(0,r.jsxs)(n.p,{children:["When writing custom filters that expect numbers as inputs, you should be prepared to handle JavaScript primitive numbers ",(0,r.jsx)(n.strong,{children:"and"})," Liquid numbers. All built-in math filters convert their arguments to Liquid's ",(0,r.jsx)(n.a,{href:"/liquidscript/api/functions/parseNumberT",children:(0,r.jsx)(n.code,{children:"NumberT"})})," type on input, exclusively use methods of those types for arithmetic, and return a ",(0,r.jsx)(n.code,{children:"NumberT"})," too."]}),"\n",(0,r.jsxs)(n.p,{children:["To illustrate, here's the implementation of the ",(0,r.jsx)(n.a,{href:"/liquidscript/language/filters#plus",children:(0,r.jsx)(n.code,{children:"plus"})})," filter. It makes no assumptions about the type of its arguments and both arguments default to zero if they can't be converted to a number."]}),"\n",(0,r.jsxs)(s.A,{groupId:"js-ts",children:[(0,r.jsx)(a.A,{value:"js",label:"JavaScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import { FilterContext, NumberT, checkArguments, filters } from "liquidscript";\n\nfunction plus(left, right) {\n  // Throw an error if there are too many or too few arguments.\n  checkArguments(arguments.length, 1, 1);\n  return filters.parseNumberOrZero(left).plus(filters.parseNumberOrZero(right));\n}\n'})})}),(0,r.jsx)(a.A,{value:"ts",label:"TypeScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import { FilterContext, NumberT, checkArguments, filters } from "liquidscript";\n\nfunction plus(this: FilterContext, left: unknown, right: unknown): NumberT {\n  // Throw an error if there are too many or too few arguments.\n  checkArguments(arguments.length, 1, 1);\n  return filters.parseNumberOrZero(left).plus(filters.parseNumberOrZero(right));\n}\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"auto-escape-and-markup",children:"Auto-Escape and Markup"}),"\n",(0,r.jsxs)(n.p,{children:["LiquidScript exports a ",(0,r.jsx)(n.a,{href:"/liquidscript/api/classes/Markup",children:(0,r.jsx)(n.code,{children:"Markup"})})," object that wraps a string, indicating it is safe to output without ",(0,r.jsx)(n.a,{href:"/liquidscript/introduction/auto-escape",children:"HTML escaping"}),". Most filter functions that expect strings as inputs should be prepared to handle ",(0,r.jsx)(n.code,{children:"Markup"})," objects too."]}),"\n",(0,r.jsxs)(n.p,{children:["Here's an implementation of the ",(0,r.jsx)(n.a,{href:"/liquidscript/language/filters#append",children:(0,r.jsx)(n.code,{children:"append"})})," filter that demonstrates handling of ",(0,r.jsx)(n.code,{children:"Markup"})," objects."]}),"\n",(0,r.jsxs)(s.A,{groupId:"js-ts",children:[(0,r.jsx)(a.A,{value:"js",label:"JavaScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'import {\n  FilterContext,\n  checkArguments,\n  Markup,\n  toLiquidString,\n  object,\n} from "liquidscript";\n\nfunction append(left, other) {\n  // Throw an error if there are too many or too few arguments.\n  checkArguments(arguments.length, 1, 1);\n\n  if (left instanceof Markup)\n    return new Markup(\n      left[toLiquidString]() + Markup.escape(other)[toLiquidString]()\n    );\n\n  if (other instanceof Markup) {\n    return new Markup(\n      Markup.escape(left)[toLiquidString]() + other[toLiquidString]()\n    );\n  }\n\n  return object.liquidStringify(left) + object.liquidStringify(other);\n}\n'})})}),(0,r.jsx)(a.A,{value:"ts",label:"TypeScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import {\n  FilterContext,\n  checkArguments,\n  Markup,\n  toLiquidString,\n  object,\n} from "liquidscript";\n\nfunction append(\n  this: FilterContext,\n  left: unknown,\n  other: unknown\n): string | Markup {\n  // Throw an error if there are too many or too few arguments.\n  checkArguments(arguments.length, 1, 1);\n\n  if (left instanceof Markup)\n    return new Markup(\n      left[toLiquidString]() + Markup.escape(other)[toLiquidString]()\n    );\n\n  if (other instanceof Markup) {\n    return new Markup(\n      Markup.escape(left)[toLiquidString]() + other[toLiquidString]()\n    );\n  }\n\n  return object.liquidStringify(left) + object.liquidStringify(other);\n}\n'})})})]}),"\n",(0,r.jsx)(n.h2,{id:"missing-and-excess-arguments",children:"Missing and Excess Arguments"}),"\n",(0,r.jsxs)(n.p,{children:["All filters built in to Liquid throw a ",(0,r.jsx)(n.a,{href:"/liquidscript/api/classes/LiquidFilterArgumentError",children:(0,r.jsx)(n.code,{children:"LiquidFilterArgumentError"})})," if a required argument is missing or too many arguments are provided."]}),"\n",(0,r.jsxs)(n.p,{children:["When writing custom filters, if you want to be consistent with those built-in filters, you can use ",(0,r.jsx)(n.a,{href:"/liquidscript/api/functions/checkArguments",children:(0,r.jsx)(n.code,{children:"checkArguments"})})," to throw an error with a suitable message."]}),"\n",(0,r.jsx)(n.h2,{id:"undefined-vs-undefined",children:"Undefined vs undefined"}),"\n",(0,r.jsxs)(n.p,{children:["LiquidScript defines an ",(0,r.jsx)(n.a,{href:"/liquidscript/introduction/undefined",children:(0,r.jsx)(n.code,{children:"Undefined"})})," type, which is distinct from JavaScript's primitive ",(0,r.jsx)(n.code,{children:"undefined"})," value. With ",(0,r.jsx)(n.a,{href:"/liquidscript/api/classes/LaxUndefined",children:(0,r.jsx)(n.code,{children:"LaxUndefined"})}),", ",(0,r.jsx)(n.code,{children:"Undefined"}),' objects will be passed to filter functions if they are "called" with arguments that can not be resolved by the active render context.']}),"\n",(0,r.jsxs)(n.p,{children:["If a filter function needs to detect ",(0,r.jsx)(n.code,{children:"Undefined"})," and ",(0,r.jsx)(n.code,{children:"undefined"})," arguments, it can use ",(0,r.jsx)(n.a,{href:"/liquidscript/api/namespaces/object/functions/isUndefined",children:(0,r.jsx)(n.code,{children:"object.isUndefined()"})}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>a});t(96540);var r=t(34164);const i={tabItem:"tabItem_Ymn6"};var s=t(74848);function a(e){let{children:n,hidden:t,className:a}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,a),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>q});var r=t(96540),i=t(34164),s=t(23104),a=t(56347),l=t(205),o=t(57485),c=t(31682),u=t(70679);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:i}}=e;return{value:n,label:t,attributes:r,default:i}}))}(t);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const i=(0,a.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(i.location.search);n.set(s,e),i.replace({...i.location,search:n.toString()})}),[s,i])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,s=h(e),[a,o]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:s}))),[c,d]=f({queryString:t,groupId:i}),[m,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,s]=(0,u.Dv)(t);return[i,(0,r.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:i}),x=(()=>{const e=c??m;return p({value:e,tabValues:s})?e:null})();(0,l.A)((()=>{x&&o(x)}),[x]);return{selectedValue:a,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),g(e)}),[d,g,s]),tabValues:s}}var g=t(92303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=t(74848);function v(e){let{className:n,block:t,selectedValue:r,selectValue:a,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),u=e=>{const n=e.currentTarget,t=o.indexOf(n),i=l[t].value;i!==r&&(c(n),a(i))},d=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>o.push(e),onKeyDown:d,onClick:u,...s,className:(0,i.A)("tabs__item",x.tabItem,s?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:i}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function y(e){const n=m(e);return(0,j.jsxs)("div",{className:(0,i.A)("tabs-container",x.tabList),children:[(0,j.jsx)(v,{...n,...e}),(0,j.jsx)(b,{...n,...e})]})}function q(e){const n=(0,g.A)();return(0,j.jsx)(y,{...e,children:d(e.children)},String(n))}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(96540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);