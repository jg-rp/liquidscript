"use strict";(self.webpackChunkliquidscript_docs=self.webpackChunkliquidscript_docs||[]).push([[29088],{8935:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});var t=i(74848),s=i(28453);const l={},a="Extra Tags",r={id:"extra/tags",title:"Extra Tags",description:"This page documents extra tags available in LiquidScript. These tags are not part of standard Liquid and are not registered automatically with each new LiquidScript environment.",source:"@site/docs/extra/tags.md",sourceDirName:"extra",slug:"/extra/tags",permalink:"/liquidscript/extra/tags",draft:!1,unlisted:!1,editUrl:"https://github.com/jg-rp/liquidscript/tree/docs/docs/extra/tags.md",tags:[],version:"current",frontMatter:{},sidebar:"languageSidebar",previous:{title:"Liquid Tags",permalink:"/liquidscript/language/tags"}},d={},c=[{value:"extends / block",id:"extends--block",level:2},{value:"Block Names",id:"block-names",level:3},{value:"Block Scope",id:"block-scope",level:3},{value:"Required Blocks",id:"required-blocks",level:3},{value:"Super Blocks",id:"super-blocks",level:3},{value:"if (not)",id:"if-not",level:2},{value:"inline if / else",id:"inline-if--else",level:2},{value:"With Filters",id:"with-filters",level:3},{value:"macro / call",id:"macro--call",level:2},{value:"Excess Arguments",id:"excess-arguments",level:3},{value:"with",id:"with",level:2}];function o(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"extra-tags",children:"Extra Tags"}),"\n",(0,t.jsx)(n.p,{children:"This page documents extra tags available in LiquidScript. These tags are not part of standard Liquid and are not registered automatically with each new LiquidScript environment."}),"\n",(0,t.jsx)(n.h2,{id:"extends--block",children:"extends / block"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"New in version 1.8.0"})})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plain",children:'{% extends "<string>" %}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plain",children:"{% block <identifier,string> [, required] %}\n  <literal,statement,tag> ...\n{% endblock [<identifier,string>] %}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"{% extends %}"})," and ",(0,t.jsx)(n.code,{children:"{% block %}"})," tags add template inheritance features to LiquidScript. In this example, ",(0,t.jsx)(n.code,{children:"page.html"})," inherits from ",(0,t.jsx)(n.code,{children:"base.html"})," and overrides the ",(0,t.jsx)(n.code,{children:"content"})," block. As ",(0,t.jsx)(n.code,{children:"page.html"})," does not define a ",(0,t.jsx)(n.code,{children:"footer"})," block, the footer from ",(0,t.jsx)(n.code,{children:"base.html"})," is used."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { Environment, extra, ObjectLoader } from "liquidscript";\n\nconst loader = new ObjectLoader({\n  "base.html":\n    "<body>\\n" +\n    \'  <div id="content">{% block content required %}{% endblock %}</div>\\n\' +\n    \'  <div id="footer">{% block footer %}Default footer{% endblock %}</div>\\n\' +\n    "</body>",\n  "page.html":\n    "{% extends \'base.html\' %}\\n" +\n    "{% block content %}Hello, {{ you }}!{% endblock %}",\n});\n\nconst env = new Environment({ loader });\nextra.addInheritanceTags(env);\n\nconst template = env.getTemplateSync("page.html");\nconsole.log(template.renderSync({ you: "World" }));\n'})}),"\n",(0,t.jsxs)(n.p,{children:["A template can contain at most one ",(0,t.jsx)(n.code,{children:"{% extends %}"})," tag, and that tag should normally be the first in the template. All other template text and tags (including whitespace) preceding ",(0,t.jsx)(n.code,{children:"{% extends %}"})," will be output normally. Subsequent template text and tags outside any ",(0,t.jsx)(n.code,{children:"{% block %}"})," tags will be ignored, unless rendering a base template directly."]}),"\n",(0,t.jsxs)(n.p,{children:["As soon as an ",(0,t.jsx)(n.code,{children:"{% extends %}"})," tag is found, template rendering stops and LiquidScript loads the parent template (using the configured ",(0,t.jsx)(n.a,{href:"/liquidscript/introduction/loading-templates",children:"loader"}),") before searching for ",(0,t.jsx)(n.code,{children:"{% block %}"})," tags. We keep loading and searching up the inheritance chain until a parent template with no ",(0,t.jsx)(n.code,{children:"{% extends %}"})," tag is found, this is the ",(0,t.jsx)(n.em,{children:"base"})," template."]}),"\n",(0,t.jsx)(n.p,{children:"The base template is then rendered, substituting its blocks with those defined in its children."}),"\n",(0,t.jsx)(n.h3,{id:"block-names",children:"Block Names"}),"\n",(0,t.jsxs)(n.p,{children:["Every ",(0,t.jsx)(n.code,{children:"{% block %}"})," must have a name and that name must be unique within a single template. Block names must be valid Liquid identifiers, optionally enclosed in quotes (quoted and unquoted block names are equivalent)."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"{% endblock %}"})," tags can include a name too. If given a name and that name does not match the one given at the start of the block, a ",(0,t.jsx)(n.a,{href:"/liquidscript/api/classes/TemplateInheritanceError",children:(0,t.jsx)(n.code,{children:"TemplateInheritanceError"})})," is thrown when parsing the template."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-liquid",children:'<body>\n  <div id="content">\n    {% block content %}\n      {% block title %}\n        <h1>Some Title</h1>\n      {% endblock title %}\n    {% endblock content %}\n  </div>\n  <div id="footer">\n    {% block footer %}\n      Default footer\n    {% endblock footer %}\n  </div>\n</body>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"block-scope",children:"Block Scope"}),"\n",(0,t.jsx)(n.p,{children:"All blocks are scoped. Variables defined in base templates and enclosing blocks will be in scope when rendering overridden blocks."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-liquid",metastring:'title="base"',children:"{% assign thing = 'item' %}\n{% for i in (1..3) %}\n  {% block list-item %}{% endblock %}\n{% endfor %}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-liquid",metastring:'title="child"',children:'{% extends "base" %}\n{% block list-item %}\n  {{ thing }} #{{ i }}\n{% endblock %}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"item #1\n\nitem #2\n\nitem #3\n"})}),"\n",(0,t.jsx)(n.p,{children:"Variables defined in an overridden block will go out of scope after that block has been rendered."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-liquid",metastring:'title="base"',children:'{% assign greeting = "Hello" %}\n{% block say-hi %}{{ greeting }}, World!{% endblock %}\n{{ greeting }}, World!\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-liquid",metastring:'title="child"',children:'{% extends "base" %}\n{% block say-hi %}\n  {% assign greeting = "Goodbye" %}\n  {{ greeting }}, World!\n  {{ block.super }}\n{% endblock %}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"Goodbye, World!\nHello, World!\n\nHello, World!\n"})}),"\n",(0,t.jsx)(n.h3,{id:"required-blocks",children:"Required Blocks"}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.code,{children:"{% block %}"})," tag's ",(0,t.jsx)(n.code,{children:"required"})," argument to indicate that the block must be overridden by a child template. If a required block does not get implemented by a child template, a ",(0,t.jsx)(n.a,{href:"/liquidscript/api/classes/TemplateInheritanceError",children:(0,t.jsx)(n.code,{children:"TemplateInheritanceError"})})," error is thrown at render time."]}),"\n",(0,t.jsxs)(n.p,{children:["In this example, if the template were to be rendered directly, we would expect a ",(0,t.jsx)(n.code,{children:"TemplateInheritanceError"})," due to the ",(0,t.jsx)(n.code,{children:"content"})," block being required."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-liquid",metastring:'title="base"',children:'<head>\n  {% block head %}{% endblock %}\n<head>\n<body>\n  <div id="content">{% block content required %}{% endblock %}</div>\n  <div id="footer">{% block footer %}Default footer{% endblock %}</div>\n</body>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"super-blocks",children:"Super Blocks"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"block"})," object is available inside every ",(0,t.jsx)(n.code,{children:"{% block %}"})," tag. It has just one property, ",(0,t.jsx)(n.code,{children:"super"}),". If a ",(0,t.jsx)(n.code,{children:"{% block %}"})," is overriding a parent block, ",(0,t.jsx)(n.code,{children:"{{ block.super }}"})," will render the parent's implementation of that block."]}),"\n",(0,t.jsxs)(n.p,{children:["In this example we use ",(0,t.jsx)(n.code,{children:"{{ block.super }}"})," in the ",(0,t.jsx)(n.code,{children:"footer"})," block to output the base template's footer with a year appended to it."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-liquid",metastring:'title="base"',children:'<head>\n  {% block head %}{% endblock %}\n<head>\n<body>\n  <div id="content">{% block content required %}{% endblock %}</div>\n  <div id="footer">{% block footer %}Default footer{% endblock %}</div>\n</body>\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-liquid",metastring:'title="child"',children:'{% extends "base" %}\n{% block content %}Hello, World!{% endblock %}\n{% block footer %}{{ block.super }} - 2023{% endblock %}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",metastring:'title="output"',children:'<body>\n  <div id="content">Hello, World!</div>\n  <div id="footer">Default footer - 2023</div>\n</body>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"if-not",children:"if (not)"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"New in version 1.1.0"})})}),"\n",(0,t.jsxs)(n.p,{children:["A drop-in replacement for the standard ",(0,t.jsx)(n.a,{href:"/liquidscript/language/tags#if",children:(0,t.jsx)(n.code,{children:"if"})})," tag that supports logical ",(0,t.jsx)(n.code,{children:"not"})," and grouping with parentheses. Please see ",(0,t.jsx)(n.a,{href:"/liquidscript/language/tags#expressions",children:"the tag reference"})," for a description of the standard ",(0,t.jsx)(n.code,{children:"if"})," expression."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"{% if <expression> %}\n  <literal,statement,tag> ...\n  [ {% elsif <expression> %} <literal,statement,tag> ... [ {% elsif <expression> %} ... ]]\n  [ {% else %} <literal,statement,tag> ... ]\n{% endif %}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Register ",(0,t.jsx)(n.code,{children:"liquidscript.extra.tags.IfNotTag"})," with an ",(0,t.jsx)(n.a,{href:"/liquidscript/api/classes/Environment",children:(0,t.jsx)(n.code,{children:"Environment"})})," to make it available to templates rendered from that environment."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { Environment, extra } from "liquidscript";\n\nconst env = new Environment();\nenv.addTag("if", new extra.tags.IfNotTag());\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"and"})," and ",(0,t.jsx)(n.code,{children:"or"})," operators in Liquid are right associative. Where ",(0,t.jsx)(n.code,{children:"true and false and false or true"})," is equivalent to ",(0,t.jsx)(n.code,{children:"(true and (false and (false or true)))"}),", evaluating to ",(0,t.jsx)(n.code,{children:"false"}),". JavaScript, on the other hand, would parse an equivalent expression as ",(0,t.jsx)(n.code,{children:"(((true && false) && false) || true)"}),", evaluating to ",(0,t.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["This implementation of ",(0,t.jsx)(n.code,{children:"if"})," maintains that right associativity so that any standard ",(0,t.jsx)(n.code,{children:"if"})," expression will behave the same, with or without non-standard ",(0,t.jsx)(n.code,{children:"if"}),". Only when ",(0,t.jsx)(n.code,{children:"not"})," or parentheses are used will behavior deviate from the standard."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-liquid",metastring:'title="example.liquid"',children:"{% if ((user.privileged and not user.blocked) or user.is_admin) %}\n  Hello, {{ user.name }}!\n{% else %}\n  User is blocked.\n{% endif %}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"inline-if--else",children:"inline if / else"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"New in version 1.7.0"})})}),"\n",(0,t.jsxs)(n.p,{children:["Drop-in replacements for the standard output statement, ",(0,t.jsx)(n.a,{href:"/liquidscript/language/tags#assign",children:(0,t.jsx)(n.code,{children:"assign"})})," tag, and ",(0,t.jsx)(n.a,{href:"/liquidscript/language/tags#echo",children:(0,t.jsx)(n.code,{children:"echo"})})," tag that support inline ",(0,t.jsx)(n.code,{children:"if"}),"/",(0,t.jsx)(n.code,{children:"else"})," expressions. You can find a BNF-like description of the inline conditional expression in ",(0,t.jsx)(n.a,{href:"https://gist.github.com/jg-rp/e2dc4da9e5033e087e46016008a9d91c#file-inline_if_expression-bnf",children:"this gist"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Register one or more of ",(0,t.jsx)(n.code,{children:"ConditionalOutputStatement"}),", ",(0,t.jsx)(n.code,{children:"ConditionalAssignTag"})," and ",(0,t.jsx)(n.code,{children:"ConditionalEchoTag"})," from ",(0,t.jsx)(n.code,{children:"liquidscript.extra.tags"})," with an ",(0,t.jsx)(n.a,{href:"/liquidscript/api/classes/Environment",children:(0,t.jsx)(n.code,{children:"Environment"})})," to make them available to templates rendered from that environment."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { Environment, extra } from "liquidscript";\n\nconst env = new Environment();\nenv.addTag("statement", new extra.tags.ConditionalOutputStatement());\nenv.addTag("assign", new extra.tags.ConditionalAssignTag());\nenv.addTag("echo", new extra.tags.ConditionalEchoTag());\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Inline ",(0,t.jsx)(n.code,{children:"if"}),"/",(0,t.jsx)(n.code,{children:"else"})," expressions are designed to be backwards compatible with standard filtered expressions. As long as there are no template variables called ",(0,t.jsx)(n.code,{children:"if"})," or ",(0,t.jsx)(n.code,{children:"else"})," within a filtered expression, standard output statements, ",(0,t.jsx)(n.code,{children:"assign"})," tags and ",(0,t.jsx)(n.code,{children:"echo"})," tags will behave the same."]}),"\n",(0,t.jsxs)(n.p,{children:["In this example, if ",(0,t.jsx)(n.code,{children:"user.logged_in"})," is false or undefined (see ",(0,t.jsx)(n.a,{href:"/liquidscript/introduction/undefined#falsy-undefined",children:"Falsy Undefined"}),"), ",(0,t.jsx)(n.code,{children:"please log in"})," will be output."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-liquid",children:"{{ user.name if user.logged_in else 'please log in' }}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"else"})," part of an inline expression is optional, defaulting to ",(0,t.jsx)(n.a,{href:"/liquidscript/introduction/undefined",children:"undefined"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-liquid",metastring:'title="template"',children:"{{ 'hello user' if user.logged_in }}!\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"!\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Inline conditional expressions are evaluated lazily. If the condition is falsy, the leading object is not evaluated. Equally, if the condition is truthy, any expression following ",(0,t.jsx)(n.code,{children:"else"})," will not be evaluated."]}),"\n",(0,t.jsx)(n.h3,{id:"with-filters",children:"With Filters"}),"\n",(0,t.jsxs)(n.p,{children:["Filters can appear before an inline ",(0,t.jsx)(n.code,{children:"if"})," expression."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-liquid",metastring:'title="template"',children:"{{ 'hello user' | capitalize if user.logged_in else 'please log in' }}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Or after an inline ",(0,t.jsx)(n.code,{children:"if"})," expression. In which case filters will only be applied to the ",(0,t.jsx)(n.code,{children:"else"})," clause."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-liquid",metastring:'title="template"',children:"{% assign param = 'hello user' if user.logged_in else 'please log in' | url_encode %}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Or both."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-liquid",metastring:'title="template"',children:"{{% assign param = 'hello user' | capitalize if user.logged_in else 'please log in' | url_encode %}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Use a double pipe (",(0,t.jsx)(n.code,{children:"||"}),') to start any filters you want to apply regardless of which branch is taken. Subsequent "tail filters" should be separated by a single pipe (',(0,t.jsx)(n.code,{children:"|"}),")."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-liquid",metastring:'title="template"',children:"{{% assign name =\n  user.nickname | downcase\n  if user.has_nickname\n  else user.last_name | capitalize\n  || prepend: user.title | strip\n%}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"macro--call",children:"macro / call"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"New in version 1.7.0"})})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plain",children:"{% macro <identifier,string> [[,] [ <object>, ... ] [ <identifier>: <object>, ... ]] %}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plain",children:"{% call <identifier,string> [[,] [ <object>, ... ] [ <identifier>: <object>, ... ]] %}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Define parameterized Liquid snippets using the ",(0,t.jsx)(n.code,{children:"macro"})," tag and call them using the ",(0,t.jsx)(n.code,{children:"call"})," tag."]}),"\n",(0,t.jsxs)(n.p,{children:["Using the ",(0,t.jsx)(n.code,{children:"macro"})," tag is like defining a function. Its parameter list defines arguments, possibly with default values. A ",(0,t.jsx)(n.code,{children:"macro"})," tag's block has its own scope including its arguments and template global variables, just like the ",(0,t.jsx)(n.code,{children:"render"})," tag."]}),"\n",(0,t.jsxs)(n.p,{children:["Note that argument defaults are bound late. They are evaluated when a ",(0,t.jsx)(n.code,{children:"call"})," expression is evaluated, not when the macro is defined."]}),"\n",(0,t.jsxs)(n.p,{children:["Register and instance ",(0,t.jsx)(n.code,{children:"liquidscript.extra.tags.CallTag"})," and ",(0,t.jsx)(n.code,{children:"liquidscript.extra.tags.MacroTag"})," with an ",(0,t.jsx)(n.a,{href:"/liquidscript/api/classes/Environment",children:(0,t.jsx)(n.code,{children:"Environment"})})," to make them available to templates rendered from that environment."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { Environment, extra } from "liquidscript";\n\nconst env = new Environment();\nenv.addTag("call", new extra.tags.CallTag());\nenv.addTag("macro", new extra.tags.MacroTag());\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This example defines a ",(0,t.jsx)(n.code,{children:"price"})," macro, then calls it twice with different arguments."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-liquid",children:"{% macro 'price' product, on_sale: false %}\n  <div class=\"price-wrapper\">\n  {% if on_sale %}\n    <p>Was {{ product.regular_price | prepend: '$' }}</p>\n    <p>Now {{ product.price | prepend: '$' }}</p>\n  {% else %}\n    <p>{{ product.price | prepend: '$' }}</p>\n  {% endif %}\n  </div>\n{% endmacro %}\n\n{% call 'price' products[0], on_sale: true %}\n{% call 'price' products[1] %}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",metastring:'title="output"',children:'<div class="price-wrapper">\n  <p>Was $5.99</p>\n  <p>Now $4.99</p>\n</div>\n\n<div class="price-wrapper">\n  <p>$12.00</p>\n</div>\n'})}),"\n",(0,t.jsx)(n.h3,{id:"excess-arguments",children:"Excess Arguments"}),"\n",(0,t.jsxs)(n.p,{children:["Excess arguments passed to ",(0,t.jsx)(n.code,{children:"call"})," are collected into ",(0,t.jsx)(n.code,{children:"args"})," and ",(0,t.jsx)(n.code,{children:"kwargs"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-liquid",metastring:'title="template"',children:"{% macro 'foo' %}\n  {% for arg in args %}\n    - {{ arg }}\n  {% endfor %}\n\n  {% for arg in kwargs %}\n    - {{ arg.0 }} => {{ arg.1 }}\n  {% endfor %}\n{% endmacro %}\n\n{% call 'foo' 42, 43, 99, a: 3.14, b: 2.71828 %}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plain",metastring:'title="output"',children:"- 42\n- 43\n- 99\n\n- a => 3.14\n- b => 2.71828\n"})}),"\n",(0,t.jsx)(n.h2,{id:"with",children:"with"}),"\n",(0,t.jsxs)(n.p,{children:["Extend the current scope for the duration of the ",(0,t.jsx)(n.code,{children:"with"})," block. Useful for aliasing long or nested variable names. Also useful for caching the result of a drop's methods, if the drop does not perform its own caching."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-plain",children:"{% with <identifier>: <object> [, <identifier>: object ... ] %}\n  <literal,statement,tag> ...\n{% endwith %}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Register ",(0,t.jsx)(n.code,{children:"liquidscript.extra.tags.WithTag"})," with an ",(0,t.jsx)(n.a,{href:"/liquidscript/api/classes/Environment",children:(0,t.jsx)(n.code,{children:"Environment"})})," to make it available to templates rendered from that environment."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'import { Environment, extra } from "liquidscript";\n\nconst env = new Environment();\nenv.addTag("with", new extra.tags.WithTag());\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This implementation keeps template variables set inside the with block, using ",(0,t.jsx)(n.code,{children:"assign"})," or ",(0,t.jsx)(n.code,{children:"capture"}),", alive after the block has been rendered."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-liquid",metastring:'title="example.liquid"',children:"{% with product: collection.products.first %}\n  {{- product.title -}}\n{% endwith %}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>r});var t=i(96540);const s={},l=t.createContext(s);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);