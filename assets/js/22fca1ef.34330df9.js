"use strict";(self.webpackChunkliquidscript_docs=self.webpackChunkliquidscript_docs||[]).push([[1884],{9494:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(6687);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||s;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[m]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4712:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(6687),r=n(4923);const s={tabItem:"tabItem_QpX5"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s.tabItem,i),hidden:n},t)}},1547:(e,t,n)=>{n.d(t,{Z:()=>b});var a=n(1943),r=n(6687),s=n(4923),i=n(2315),o=n(668),l=n(4130),p=n(5681),c=n(7514);function m(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function u(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??m(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=u(e),[i,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[l,p]=g({queryString:n,groupId:a}),[m,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),h=(()=>{const e=l??m;return d({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{h&&o(h)}),[h]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),k(e)}),[p,k,s]),tabValues:s}}var h=n(3979);const f={tabList:"tabList_AtKJ",tabItem:"tabItem_n7BL"};function x(e){let{className:t,block:n,selectedValue:o,selectValue:l,tabValues:p}=e;const c=[],{blockElementScrollPositionUntilNextRender:m}=(0,i.o5)(),u=e=>{const t=e.currentTarget,n=c.indexOf(t),a=p[n].value;a!==o&&(m(t),l(a))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:d,onClick:u},i,{className:(0,s.Z)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":o===t})}),n??t)})))}function N(e){let{lazy:t,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function y(e){const t=k(e);return r.createElement("div",{className:(0,s.Z)("tabs-container",f.tabList)},r.createElement(x,(0,a.Z)({},e,t)),r.createElement(N,(0,a.Z)({},e,t)))}function b(e){const t=(0,h.Z)();return r.createElement(y,(0,a.Z)({key:String(t)},e))}},9601:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>p,toc:()=>m});var a=n(1943),r=(n(6687),n(9494)),s=n(1547),i=n(4712);const o={},l="Custom Tags",p={unversionedId:"guides/custom-tags",id:"guides/custom-tags",title:"Custom Tags",description:"Liquid tags are defined by a pair of JavaScript objects. One implementing the Tag interface and one implementing the Node interface. The parse method of a Tag is responsible for parsing a tag's expression and returning a Node, which will be added to a template's parse tree.",source:"@site/docs/guides/custom-tags.mdx",sourceDirName:"guides",slug:"/guides/custom-tags",permalink:"/liquidscript/guides/custom-tags",draft:!1,editUrl:"https://github.com/jg-rp/liquidscript/tree/docs/docs/guides/custom-tags.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Custom Filters",permalink:"/liquidscript/guides/custom-filters"},next:{title:"Custom Loaders",permalink:"/liquidscript/guides/custom-loaders"}},c={},m=[{value:"Add a Tag",id:"add-a-tag",level:2},{value:"Example Tag",id:"example-tag",level:3},{value:"Example Node",id:"example-node",level:3},{value:"Example Tag Usage",id:"example-tag-usage",level:3},{value:"Replace a Tag",id:"replace-a-tag",level:2},{value:"Remove a Tag",id:"remove-a-tag",level:2},{value:"Jekyll Style Include Example",id:"jekyll-style-include-example",level:2}],u={toc:m},d="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"custom-tags"},"Custom Tags"),(0,r.kt)("p",null,"Liquid ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/language/introduction#tags"},"tags")," are defined by a pair of JavaScript objects. One implementing the ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Tag"},(0,r.kt)("inlineCode",{parentName:"a"},"Tag"))," interface and one implementing the ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Node"},(0,r.kt)("inlineCode",{parentName:"a"},"Node"))," interface. The ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Node"},(0,r.kt)("inlineCode",{parentName:"a"},"parse"))," method of a ",(0,r.kt)("inlineCode",{parentName:"p"},"Tag")," is responsible for parsing a tag's expression and returning a ",(0,r.kt)("inlineCode",{parentName:"p"},"Node"),", which will be added to a template's parse tree."),(0,r.kt)("p",null,"You can add to, remove or modify Liquid's built-in tags to suit your needs by registering tags with an Environment, then rendering your templates from that environment."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"All built-in tags are implemented this way, so have a look in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquidscript/tree/main/src/builtin/tags"},"src/builtin/tags/")," for more examples.")),(0,r.kt)("h2",{id:"add-a-tag"},"Add a Tag"),(0,r.kt)("p",null,"Taking inspiration from ",(0,r.kt)("a",{parentName:"p",href:"https://docs.djangoproject.com/en/3.2/ref/templates/builtins/#with"},"Django's Template Language"),", lets implement a ",(0,r.kt)("inlineCode",{parentName:"p"},"with")," tag, which extends the local scope for the duration of its block. Our ",(0,r.kt)("inlineCode",{parentName:"p"},"with")," tag's expressions consists of one or more named arguments separated by commas. Each argument is a variable name, followed by a colon, then a Liquid keyword, string, integer, float, range expression or identifier."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain"},"{% with <identifier>: <object> [, <identifier>: object ... ] %}\n  <literal,statement,tag> ...\n{% endwith %}\n")),(0,r.kt)("p",null,"This implementation keeps any variables set inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"with")," block (using ",(0,r.kt)("inlineCode",{parentName:"p"},"assign")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"capture"),") alive after the block has been rendered."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"We use ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes"},"class syntax")," here for both JavaScript and TypeScript examples. Constructor functions and objects with function valued properties would work equally as well.")),(0,r.kt)("h3",{id:"example-tag"},"Example Tag"),(0,r.kt)("p",null,"A ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Tag"},(0,r.kt)("inlineCode",{parentName:"a"},"Tag"))," is free to parse its expression any way it chooses. Built in tags use regular expressions to ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator"},"generate")," a ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/expressions.ExpressionTokenStream"},"stream of tokens"),", then step through those tokens yielding ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Expression"},(0,r.kt)("inlineCode",{parentName:"a"},"Expression"))," objects."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Despite their names, ",(0,r.kt)("inlineCode",{parentName:"p"},"ExpressionTokenStream"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"TokenStream")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"RenderStream")," do not implement a Node.js stream or a web stream.")),(0,r.kt)("p",null,"Here we'll reuse the tokenizer from the ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#include"},(0,r.kt)("inlineCode",{parentName:"a"},"include"))," tag, as it, too, accepts any number of comma separated named arguments. We will, however, supply a different set of allowed keywords to the tokenizer function."),(0,r.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="with_tag.js"',title:'"with_tag.js"'},'import { expressions, tokens } from "liquidscript";\n\n// Reuse the `include` tokenizer.\nconst tokenize = expressions.include.makeTokenizer(\n  expressions.include.RE,\n  new Set([\n    expressions.TOKEN_TRUE,\n    expressions.TOKEN_FALSE,\n    expressions.TOKEN_NIL,\n    expressions.TOKEN_NULL,\n  ])\n);\n\n// Indicates the end of a `with` block.\nconst TAG_ENDWITH = "endwith";\nconst END_WITH_BLOCK = new Set([TAG_ENDWITH]);\n\n// ...\n'))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="with_tag.ts"',title:'"with_tag.ts"'},'import {\n  Environment,\n  Expression,\n  Tag,\n  expressions,\n  tokens,\n  Node,\n  BlockNode,\n  RenderContext,\n  RenderStream,\n  ContextScope,\n} from "liquidscript";\n\n// Reuse the `include` tokenizer.\nconst tokenize = expressions.include.makeTokenizer(\n  expressions.include.RE,\n  new Set([\n    expressions.TOKEN_TRUE,\n    expressions.TOKEN_FALSE,\n    expressions.TOKEN_NIL,\n    expressions.TOKEN_NULL,\n  ])\n);\n\n// Indicates the end of a `with` block.\nconst TAG_ENDWITH = "endwith";\nconst END_WITH_BLOCK = new Set([TAG_ENDWITH]);\n\ntype Arguments = {\n  [index: string]: Expression;\n};\n\n// ...\n')))),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Tag#parse"},(0,r.kt)("inlineCode",{parentName:"a"},"parse()"))," method of a ",(0,r.kt)("inlineCode",{parentName:"p"},"Tag")," object receives a ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/tokens.TemplateTokenStream"},(0,r.kt)("inlineCode",{parentName:"a"},"TokenStream"))," and a reference to the active ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment"},(0,r.kt)("inlineCode",{parentName:"a"},"Environment")),". This stream of ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/namespaces/tokens#variables"},"tokens")," includes template literals, output statements, tags and unparsed tag expressions."),(0,r.kt)("p",null,"The current token in the stream will always be of the type ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/namespaces/tokens#token_tag"},(0,r.kt)("inlineCode",{parentName:"a"},"TOKEN_TAG")),", representing the start of the tag we're parsing. By convention, this token is used to populate the ",(0,r.kt)("inlineCode",{parentName:"p"},"token")," property of the associated ",(0,r.kt)("inlineCode",{parentName:"p"},"Node")," object. If the tag has an expression (anything after the tag's name), it will immediately follow the ",(0,r.kt)("inlineCode",{parentName:"p"},"TOKEN_TAG")," in the stream as a ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/namespaces/tokens#token_expression"},(0,r.kt)("inlineCode",{parentName:"a"},"TOKEN_EXPRESSION")),". In the example bellow we use ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/tokens.TokenStream#expect"},(0,r.kt)("inlineCode",{parentName:"a"},"TokenStream.expect()"))," to confirm that an expression was provided."),(0,r.kt)("p",null,"We use ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Parser#parseblock"},(0,r.kt)("inlineCode",{parentName:"a"},"parseBlock()"))," from the active environment to parse our ",(0,r.kt)("inlineCode",{parentName:"p"},"with")," tag's block, which could contain any number of other tags and output statements. Every block tag is expected to leave the stream with it's \"end\" tag as the current token."),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"parseExpression")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"parseArgument")," are an implementation detail and not part of the ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Tag"},(0,r.kt)("inlineCode",{parentName:"a"},"Tag"))," interface."),(0,r.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="with_tag.js (continued)"',title:'"with_tag.js','(continued)"':!0},"class WithTag {\n  parse(stream, environment) {\n    const token = stream.next();\n    stream.expect(tokens.TOKEN_EXPRESSION);\n    const args = this.parseExpression(stream.current);\n    stream.next();\n    const block = environment.parser.parseBlock(stream, END_WITH_BLOCK, token);\n    stream.expectTag(TAG_ENDWITH);\n    return new WithNode(token, args, block);\n  }\n\n  parseExpression(expressionToken) {\n    const args = {};\n    const eStream = new expressions.ExpressionTokenStream(\n      tokenize(expressionToken.value, expressionToken.index)\n    );\n\n    while (eStream.current.kind !== tokens.TOKEN_EOF) {\n      const [key, expr] = this.parseArgument(eStream);\n      args[key] = expr;\n      // Eat comma.\n      if (eStream.current.kind === expressions.TOKEN_COMMA) eStream.next();\n    }\n\n    return args;\n  }\n\n  parseArgument(eStream) {\n    const key = expressions.parseUnchainedIdentifier(eStream).toString();\n    eStream.next();\n    eStream.expect(expressions.TOKEN_COLON);\n    eStream.next(); // Eat colon\n    const val = expressions.filtered.parseObject(eStream);\n    eStream.next();\n    return [key, val];\n  }\n}\n\n// ...\n"))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="with_tag.ts (continued)"',title:'"with_tag.ts','(continued)"':!0},"class WithTag implements Tag {\n  public parse(stream: tokens.TokenStream, environment: Environment): Node {\n    const token = stream.next();\n    stream.expect(tokens.TOKEN_EXPRESSION);\n    const args = this.parseExpression(stream.current);\n    stream.next();\n    const block = environment.parser.parseBlock(stream, END_WITH_BLOCK, token);\n    stream.expectTag(TAG_ENDWITH);\n    return new WithNode(token, args, block);\n  }\n\n  protected parseExpression(expressionToken: tokens.Token): Arguments {\n    const args: Arguments = {};\n    const eStream = new expressions.ExpressionTokenStream(\n      tokenize(expressionToken.value, expressionToken.index)\n    );\n\n    while (eStream.current.kind !== tokens.TOKEN_EOF) {\n      const [key, expr] = this.parseArgument(eStream);\n      args[key] = expr;\n      // Eat comma.\n      if (eStream.current.kind === expressions.TOKEN_COMMA) eStream.next();\n    }\n\n    return args;\n  }\n\n  protected parseArgument(\n    eStream: expressions.ExpressionTokenStream\n  ): [string, Expression] {\n    const key = expressions.parseUnchainedIdentifier(eStream).toString();\n    eStream.next();\n    eStream.expect(expressions.TOKEN_COLON);\n    eStream.next(); // Eat colon\n    const val = expressions.filtered.parseObject(eStream);\n    eStream.next();\n    return [key, val];\n  }\n}\n\n// ...\n")))),(0,r.kt)("h3",{id:"example-node"},"Example Node"),(0,r.kt)("p",null,"Every ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Node"},(0,r.kt)("inlineCode",{parentName:"a"},"Node"))," is required to implement synchronous and asynchronous versions of a ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Node#render"},(0,r.kt)("inlineCode",{parentName:"a"},"render"))," method. By referencing its ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Expression"},(0,r.kt)("inlineCode",{parentName:"a"},"Expressions"))," and the active ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/RenderContext"},"render context"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"render")," method is responsible for writing text to the ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/RenderStream"},"output stream"),"."),(0,r.kt)("p",null,"Our ",(0,r.kt)("inlineCode",{parentName:"p"},"WithNode")," simply evaluates each of its arguments and uses the results to extend the scope of the active render context before rendering its ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/BlockNode"},"block"),"."),(0,r.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="with_tag.js (continued)"',title:'"with_tag.js','(continued)"':!0},"class WithNode {\n  constructor(token, args, block) {\n    this.token = token;\n    this.args = args;\n    this.block = block;\n  }\n\n  async render(context, out) {\n    const scope = {};\n    for (const [key, value] of Object.entries(this.args)) {\n      scope[key] = await value.evaluate(context);\n    }\n    await context.extend(scope, () => this.block.render(context, out));\n  }\n\n  renderSync(context, out) {\n    const scope = Object.fromEntries(\n      Object.entries(this.args).map(([key, value]) => [\n        key,\n        value.evaluateSync(context),\n      ])\n    );\n    context.extendSync(scope, () => this.block.renderSync(context, out));\n  }\n\n  children() {\n    return [{ node: this.block }];\n  }\n}\n"))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="with_tag.ts (continued)"',title:'"with_tag.ts','(continued)"':!0},"class WithNode implements Node {\n  constructor(\n    readonly token: tokens.Token,\n    readonly args: Arguments,\n    readonly block: BlockNode\n  ) {}\n\n  async render(context: RenderContext, out: RenderStream): Promise<void> {\n    const scope: ContextScope = {};\n    for (const [key, value] of Object.entries(this.args)) {\n      scope[key] = await value.evaluate(context);\n    }\n    await context.extend(scope, () => this.block.render(context, out));\n  }\n\n  renderSync(context: RenderContext, out: RenderStream): void {\n    const scope: ContextScope = Object.fromEntries(\n      Object.entries(this.args).map(([key, value]) => [\n        key,\n        value.evaluateSync(context),\n      ])\n    );\n    context.extendSync(scope, () => this.block.renderSync(context, out));\n  }\n\n  children(): Node[] {\n    return [{ node: this.block }];\n  }\n}\n")))),(0,r.kt)("h3",{id:"example-tag-usage"},"Example Tag Usage"),(0,r.kt)("p",null,"If the above tag implementation is exported from a module called ",(0,r.kt)("inlineCode",{parentName:"p"},"with_tag.js")," (or ",(0,r.kt)("inlineCode",{parentName:"p"},"ts"),"), we can import and register the tag with a LiquidScript ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment"},(0,r.kt)("inlineCode",{parentName:"a"},"Environment")),", then use ",(0,r.kt)("inlineCode",{parentName:"p"},"{% with %}")," in templates rendered from that environment."),(0,r.kt)("p",null,"The first argument of ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment#addtag"},(0,r.kt)("inlineCode",{parentName:"a"},"addTag()"))," is the tag's name, as used by template authors. The second argument is our object implementing the ",(0,r.kt)("inlineCode",{parentName:"p"},"Tag")," interface."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment } from "liquidscript";\nimport { WithTag } from "./with_tag";\n\nconst env = new Environment();\nenv.addTag("with", new WithTag());\n\nconst template = env.fromString(`\n{% with greeting: \'Hello\', name: \'Sally\' %}\n  {{ greeting }}, {{ name }}!\n{% endwith %}\n`);\n\nconsole.log(template.renderSync());\n// Hello, Sally!\n')),(0,r.kt)("h2",{id:"replace-a-tag"},"Replace a Tag"),(0,r.kt)("p",null,"If given the name of an existing tag, ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment#addtag"},(0,r.kt)("inlineCode",{parentName:"a"},"Environment.addTag()"))," will replace it without warning. For example, the extra ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/extra/tags#if-not"},'"if not" tag'),", which adds support for negating expressions with ",(0,r.kt)("inlineCode",{parentName:"p"},"not")," and grouping terms with parentheses, is a drop-in replacement for the standard ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#if"},(0,r.kt)("inlineCode",{parentName:"a"},"if"))," tag."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment, extra } from "liquidscript";\n\nconst env = new Environment();\nenv.addTag("if", new extra.tags.IfNotTag());\n')),(0,r.kt)("h2",{id:"remove-a-tag"},"Remove a Tag"),(0,r.kt)("p",null,"Remove a tag by deleting it from ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment#tags"},(0,r.kt)("inlineCode",{parentName:"a"},"Environment.tags")),". It's a plain object mapping tag names to ",(0,r.kt)("inlineCode",{parentName:"p"},"Tag")," objects. This example removes the little known ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#ifchanged"},(0,r.kt)("inlineCode",{parentName:"a"},"ifchanged"))," tag, making it unavailable to templates rendered from the environment."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment } from "liquidscript";\n\nconst env = new Environment();\ndelete env.tags.ifchanged;\n')),(0,r.kt)("h2",{id:"jekyll-style-include-example"},"Jekyll Style Include Example"),(0,r.kt)("p",null,"This example implements an ",(0,r.kt)("inlineCode",{parentName:"p"},"{% include %}")," tag, as found in ",(0,r.kt)("a",{parentName:"p",href:"https://jekyllrb.com/"},"Jekyll"),". Unlike the ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#include"},"standard ",(0,r.kt)("inlineCode",{parentName:"a"},"include")," tag"),", this implementation expects either the name of the template without quotes (",(0,r.kt)("inlineCode",{parentName:"p"},"my_template.liquid"),"), or a fully formed output statement (",(0,r.kt)("inlineCode",{parentName:"p"},"{{ some_variable }}"),") that resolves to a string. Additionally, key/value arguments should be separated by ",(0,r.kt)("inlineCode",{parentName:"p"},"=")," rather than ",(0,r.kt)("inlineCode",{parentName:"p"},":"),", and those arguments are put into an ",(0,r.kt)("inlineCode",{parentName:"p"},"include")," namespace rather than merging them into the existing scope."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"A ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/guides/custom-loaders#loading-sections-and-snippets"},"custom template loader")," would also be needed to mimic Jekyll's folder structure.")),(0,r.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="jekyll_include_tag.mjs"',title:'"jekyll_include_tag.mjs"'},'import { StringLiteral, expressions, tokens } from "liquidscript";\n\nconst RE_VARIABLE_SYNTAX =\n  /^\\s*\\{\\{\\s*(?<stmt>[\\w\\-.]+\\s*(?:\\|.*)?)\\}\\}\\s*(?<args>.*)$/ds;\n\nclass JekyllIncludeTag {\n  parse(stream) {\n    const token = stream.next();\n    stream.expect(tokens.TOKEN_EXPRESSION);\n\n    // An expression that evaluates to the template name\n    let templateNameExpression;\n    // An expression token stream including argument tokens only.\n    let argStream;\n\n    const match = stream.current.value.match(RE_VARIABLE_SYNTAX);\n    if (match) {\n      templateNameExpression = expressions.filtered.parse(match.groups.stmt);\n      argStream = new expressions.ExpressionTokenStream(\n        expressions.arguments.tokenize(\n          match.groups.args,\n          stream.current.index + match.indices.groups.args[0]\n        )\n      );\n    } else {\n      const [name, args] = stream.current.value.trim().split(/\\s(.*)/s);\n      templateNameExpression = new StringLiteral(name);\n      argStream = new expressions.ExpressionTokenStream(\n        expressions.arguments.tokenize(args, stream.current.index + name.length)\n      );\n    }\n\n    // Key/value pairs, separated by commas, with `=` between each key and\n    // it\'s corresponding value.\n    const args = expressions.arguments.parseArguments(\n      argStream,\n      expressions.TOKEN_ASSIGN\n    );\n\n    return new JekyllIncludeNode(token, templateNameExpression, args);\n  }\n}\n\nclass JekyllIncludeNode {\n  constructor(token, templateName, args) {\n    this.token = token;\n    this.templateName = templateName;\n    this.args = args;\n  }\n\n  async render(context, out) {\n    // Resolve the template name. It could be a variable that resolves to a\n    // string or a string literal.\n    const templateName = await this.templateName.evaluate(context);\n\n    // Load the template. We tag it with "include" so the template loader\n    // knows what tag is asking for a template.\n    const template = await context.getTemplate(templateName, {\n      tag: "include",\n    });\n\n    // Arguments go into an `include` namespace.\n    const includeScope = {};\n    for (const [key, value] of Object.entries(this.args)) {\n      includeScope[key] = await value.evaluate(context);\n    }\n\n    await context.extend({ include: includeScope }, async () => {\n      await template.renderWithContext(context, out, false, true);\n    });\n  }\n\n  renderSync(context, out) {\n    const templateName = this.templateName.evaluateSync(context);\n    const template = context.getTemplateSync(templateName, { tag: "include" });\n\n    const includeScope = {};\n    for (const [key, value] of Object.entries(this.args)) {\n      includeScope[key] = value.evaluateSync(context);\n    }\n\n    context.extendSync({ include: includeScope }, () => {\n      template.renderWithContextSync(context, out, false, true);\n    });\n  }\n}\n'))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="jekyll_include_tag.ts"',title:'"jekyll_include_tag.ts"'},'import {\n  ContextScope,\n  Expression,\n  expressions,\n  LiquidTypeError,\n  Node,\n  object,\n  RenderContext,\n  RenderStream,\n  StringLiteral,\n  tokens,\n  Tag,\n} from "liquidscript";\n\nconst RE_VARIABLE_SYNTAX =\n  /^\\s*\\{\\{\\s*(?<stmt>[\\w\\-.]+\\s*(?:\\|.*)?)\\}\\}\\s*(?<args>.*)$/ds;\n\n/**\n * The match object we expect back from our variable syntax regular expression.\n */\ninterface VariableSyntaxMatch {\n  groups: { stmt: string; args: string };\n  indices: { groups: { stmt: number[]; args: number[] } };\n}\n\n/**\n * A type predicate for the `VariableSyntaxMatch` interface.\n */\nfunction isVariableSyntaxMatch(match: unknown): match is VariableSyntaxMatch {\n  return match !== null;\n}\n\nclass JekyllIncludeTag implements Tag {\n  parse(stream: tokens.TokenStream) {\n    const token = stream.next();\n    stream.expect(tokens.TOKEN_EXPRESSION);\n\n    // An expression that evaluates to the template name.\n    let templateNameExpression;\n    // An expression token stream including argument tokens only.\n    let argStream;\n\n    const match = stream.current.value.match(RE_VARIABLE_SYNTAX);\n    if (isVariableSyntaxMatch(match)) {\n      templateNameExpression = expressions.filtered.parse(match.groups.stmt);\n      argStream = new expressions.ExpressionTokenStream(\n        expressions.arguments.tokenize(\n          match.groups.args,\n          stream.current.index + match.indices.groups.args[0]\n        )\n      );\n    } else {\n      const [name, args] = stream.current.value.trim().split(/\\s(.*)/s);\n      templateNameExpression = new StringLiteral(name);\n      argStream = new expressions.ExpressionTokenStream(\n        expressions.arguments.tokenize(args, stream.current.index + name.length)\n      );\n    }\n\n    // Key/value pairs, separated by commas, with `=` between each key and\n    // it\'s corresponding value.\n    const args = expressions.arguments.parseArguments(\n      argStream,\n      expressions.TOKEN_ASSIGN\n    );\n\n    return new JekyllIncludeNode(token, templateNameExpression, args);\n  }\n}\n\nclass JekyllIncludeNode implements Node {\n  constructor(\n    readonly token: tokens.Token,\n    readonly templateName: Expression,\n    readonly args: expressions.arguments.Arguments\n  ) {}\n\n  async render(context: RenderContext, out: RenderStream) {\n    // Resolve the template name. It could be a variable that resolves to a\n    // string or a string literal.\n    const templateName = await this.templateName.evaluate(context);\n\n    if (!object.isString(templateName))\n      throw new LiquidTypeError(\n        `invalid template name, expected a string, found ${templateName}`,\n        this.token\n      );\n\n    // Load the template. We tag it with "include" so the template loader\n    // knows what tag is asking for a template.\n    const template = await context.getTemplate(templateName, {\n      tag: "include",\n    });\n\n    // Arguments go into an `include` namespace.\n    const includeScope: ContextScope = {};\n    for (const [key, value] of Object.entries(this.args)) {\n      includeScope[key] = await value.evaluate(context);\n    }\n\n    await context.extend({ include: includeScope }, async () => {\n      await template.renderWithContext(context, out, false, true);\n    });\n  }\n\n  renderSync(context: RenderContext, out: RenderStream) {\n    const templateName = this.templateName.evaluateSync(context);\n\n    if (!object.isString(templateName))\n      throw new LiquidTypeError(\n        `invalid template name, expected a string, found ${templateName}`,\n        this.token\n      );\n\n    const template = context.getTemplateSync(templateName, { tag: "include" });\n\n    const includeScope: ContextScope = {};\n    for (const [key, value] of Object.entries(this.args)) {\n      includeScope[key] = value.evaluateSync(context);\n    }\n\n    context.extendSync({ include: includeScope }, () => {\n      template.renderWithContextSync(context, out, false, true);\n    });\n  }\n}\n')))))}g.isMDXComponent=!0}}]);