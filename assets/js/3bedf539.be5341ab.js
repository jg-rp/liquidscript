"use strict";(self.webpackChunkliquidscript_docs=self.webpackChunkliquidscript_docs||[]).push([[1326],{9494:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return k}});var a=n(6687);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=o(n),k=r,f=u["".concat(p,".").concat(k)]||u[k]||m[k]||i;return n?a.createElement(f,s(s({ref:t},d),{},{components:n})):a.createElement(f,s({ref:t},d))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var o=2;o<i;o++)s[o]=n[o];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8213:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return l},metadata:function(){return o},toc:function(){return m}});var a=n(9853),r=n(5309),i=(n(6687),n(9494)),s=["components"],l={id:"expressions.arguments",title:"Namespace: arguments",sidebar_label:"arguments",custom_edit_url:null},p=void 0,o={unversionedId:"api/namespaces/expressions.arguments",id:"api/namespaces/expressions.arguments",title:"Namespace: arguments",description:"expressions.arguments",source:"@site/docs/api/namespaces/expressions.arguments.md",sourceDirName:"api/namespaces",slug:"/api/namespaces/expressions.arguments",permalink:"/liquidscript/api/namespaces/expressions.arguments",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"expressions.arguments",title:"Namespace: arguments",sidebar_label:"arguments",custom_edit_url:null},sidebar:"API",previous:{title:"tokens",permalink:"/liquidscript/api/namespaces/tokens"},next:{title:"boolean",permalink:"/liquidscript/api/namespaces/expressions.boolean"}},d={},m=[{value:"Type aliases",id:"type-aliases",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Index signature",id:"index-signature",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"Variables",id:"variables",level:2},{value:"RE",id:"re",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"RULES",id:"rules",level:3},{value:"Defined in",id:"defined-in-2",level:4},{value:"Functions",id:"functions",level:2},{value:"makeTokenizer",id:"maketokenizer",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"parse",id:"parse",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"parseArguments",id:"parsearguments",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-5",level:4},{value:"tokenize",id:"tokenize",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-6",level:4}],u={toc:m};function k(e){var t=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/namespaces/expressions"},"expressions"),".arguments"),(0,i.kt)("h2",{id:"type-aliases"},"Type aliases"),(0,i.kt)("h3",{id:"arguments"},"Arguments"),(0,i.kt)("p",null,"\u01ac ",(0,i.kt)("strong",{parentName:"p"},"Arguments"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"Object")),(0,i.kt)("p",null,"An object mapping argument names to Liquid expressions."),(0,i.kt)("h4",{id:"index-signature"},"Index signature"),(0,i.kt)("p",null,"\u25aa ","[index: ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"]",": ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Expression"},(0,i.kt)("inlineCode",{parentName:"a"},"Expression"))),(0,i.kt)("h4",{id:"defined-in"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquidscript/blob/3faaf9f/src/expressions/arguments/parse.ts#L15"},"src/expressions/arguments/parse.ts:15")),(0,i.kt)("h2",{id:"variables"},"Variables"),(0,i.kt)("h3",{id:"re"},"RE"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,i.kt)("strong",{parentName:"p"},"RE"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"RegExp")),(0,i.kt)("p",null,"The compiled regular expression, built using ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/namespaces/expressions.arguments#rules"},"RULES"),"."),(0,i.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquidscript/blob/3faaf9f/src/expressions/arguments/lex.ts#L71"},"src/expressions/arguments/lex.ts:71")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"rules"},"RULES"),(0,i.kt)("p",null,"\u2022 ",(0,i.kt)("inlineCode",{parentName:"p"},"Const")," ",(0,i.kt)("strong",{parentName:"p"},"RULES"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"[][]"),(0,i.kt)("p",null,"Regular expression patterns for tokens in a Liquid argument list."),(0,i.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquidscript/blob/3faaf9f/src/expressions/arguments/lex.ts#L40"},"src/expressions/arguments/lex.ts:40")),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"maketokenizer"},"makeTokenizer"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"makeTokenizer"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"re"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"keywords"),"): ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/namespaces/expressions#tokenizer"},(0,i.kt)("inlineCode",{parentName:"a"},"Tokenizer"))),(0,i.kt)("p",null,"Returns a generator function for tokenizing argument list expressions\nusing the given regular expression and keywords."),(0,i.kt)("h4",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"re")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"RegExp"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"keywords")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"Set"),"<",(0,i.kt)("inlineCode",{parentName:"td"},"string"),">")))),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/namespaces/expressions#tokenizer"},(0,i.kt)("inlineCode",{parentName:"a"},"Tokenizer"))),(0,i.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquidscript/blob/3faaf9f/src/expressions/arguments/lex.ts#L250"},"src/expressions/arguments/lex.ts:250")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"parse"},"parse"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"parse"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"expr"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"separatorTokenKind?"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"startIndex?"),"): ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/namespaces/expressions.arguments#arguments"},(0,i.kt)("inlineCode",{parentName:"a"},"Arguments"))),(0,i.kt)("p",null,"Parse keyword or named arguments from a Liquid expression string."),(0,i.kt)("p",null,"Each key/value pair is assumed to be separated by a comma. Leading and\ntrailing commas are OK."),(0,i.kt)("p",null,'If the same key/name appears multiple times, the last occurrence in the\nargument "list" will take priority.'),(0,i.kt)("p",null,"Values can be string, integer, float, true, false or nil literals, an\nidentifier or a range expression. An identifier value could be chained\nusing a mixture of dot and bracket notation."),(0,i.kt)("h4",{id:"parameters-1"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"expr")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"undefined")),(0,i.kt)("td",{parentName:"tr",align:"left"},"A Liquid expression containing zero or more keyword arguments.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"separatorTokenKind")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TOKEN_COLON")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The token kind that separates an arguments key from its value.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"startIndex")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"1")),(0,i.kt)("td",{parentName:"tr",align:"left"},"-")))),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/namespaces/expressions.arguments#arguments"},(0,i.kt)("inlineCode",{parentName:"a"},"Arguments"))),(0,i.kt)("p",null,"An object with string keys and ",(0,i.kt)("inlineCode",{parentName:"p"},"Expression")," values."),(0,i.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquidscript/blob/3faaf9f/src/expressions/arguments/parse.ts#L77"},"src/expressions/arguments/parse.ts:77")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"parsearguments"},"parseArguments"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"parseArguments"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"stream"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"separatorTokenKind?"),"): ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/namespaces/expressions.arguments#arguments"},(0,i.kt)("inlineCode",{parentName:"a"},"Arguments"))),(0,i.kt)("p",null,"Parse keyword or named arguments from a stream of expression tokens\nuntil the end of the stream."),(0,i.kt)("p",null,"Each key/value pair is assumed to be separated by a comma. Leading and\ntrailing commas are OK."),(0,i.kt)("p",null,'If the same key/name appears multiple times, the last occurrence in the\nargument "list" will take priority.'),(0,i.kt)("p",null,"Values can be string, integer, float, true, false or nil literals, an\nidentifier or a range expression. An identifier value could be chained\nusing a mixture of dot and bracket notation."),(0,i.kt)("h4",{id:"parameters-2"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"stream")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("a",{parentName:"td",href:"/liquidscript/api/classes/expressions.ExpressionTokenStream"},(0,i.kt)("inlineCode",{parentName:"a"},"ExpressionTokenStream"))),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"undefined")),(0,i.kt)("td",{parentName:"tr",align:"left"},"A stream of expression tokens.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"separatorTokenKind")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"TOKEN_COLON")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The token kind that separates an arguments key from its value.")))),(0,i.kt)("h4",{id:"returns-2"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/namespaces/expressions.arguments#arguments"},(0,i.kt)("inlineCode",{parentName:"a"},"Arguments"))),(0,i.kt)("p",null,"An object with string keys and ",(0,i.kt)("inlineCode",{parentName:"p"},"Expression")," values."),(0,i.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquidscript/blob/3faaf9f/src/expressions/arguments/parse.ts#L38"},"src/expressions/arguments/parse.ts:38")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"tokenize"},"tokenize"),(0,i.kt)("p",null,"\u25b8 ",(0,i.kt)("strong",{parentName:"p"},"tokenize"),"(",(0,i.kt)("inlineCode",{parentName:"p"},"expression"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"startIndex?"),"): ",(0,i.kt)("inlineCode",{parentName:"p"},"Generator"),"<",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/tokens.Token"},(0,i.kt)("inlineCode",{parentName:"a"},"Token")),", ",(0,i.kt)("inlineCode",{parentName:"p"},"any"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"unknown"),">"),(0,i.kt)("h4",{id:"parameters-3"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"expression")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"string"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"startIndex?")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"number"))))),(0,i.kt)("h4",{id:"returns-3"},"Returns"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Generator"),"<",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/tokens.Token"},(0,i.kt)("inlineCode",{parentName:"a"},"Token")),", ",(0,i.kt)("inlineCode",{parentName:"p"},"any"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"unknown"),">"),(0,i.kt)("h4",{id:"defined-in-6"},"Defined in"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquidscript/blob/3faaf9f/src/expressions/arguments/lex.ts#L385"},"src/expressions/arguments/lex.ts:385")))}k.isMDXComponent=!0}}]);