"use strict";(self.webpackChunkliquidscript_docs=self.webpackChunkliquidscript_docs||[]).push([[4394],{9494:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return f}});var r=n(6687);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=s(n),d=i,f=c["".concat(p,".").concat(d)]||c[d]||u[d]||o;return n?r.createElement(f,a(a({ref:t},m),{},{components:n})):r.createElement(f,a({ref:t},m))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:i,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3027:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return a},default:function(){return u},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return s}});var r=n(1943),i=(n(6687),n(9494));const o={},a="Resource Limits",l={unversionedId:"guides/resource-limits",id:"guides/resource-limits",title:"Resource Limits",description:"_New in version 1.4.0_",source:"@site/docs/guides/resource-limits.md",sourceDirName:"guides",slug:"/guides/resource-limits",permalink:"/liquidscript/guides/resource-limits",draft:!1,editUrl:"https://github.com/jg-rp/liquidscript/tree/docs/docs/guides/resource-limits.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Template Static Analysis",permalink:"/liquidscript/guides/static-analysis"}},p={},s=[{value:"Context Depth Limit",id:"context-depth-limit",level:2},{value:"Local Namespace Limit",id:"local-namespace-limit",level:2},{value:"Loop Iteration Limit",id:"loop-iteration-limit",level:2},{value:"Output Stream Limit",id:"output-stream-limit",level:2}],m={toc:s},c="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"resource-limits"},"Resource Limits"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"New in version 1.4.0"))),(0,i.kt)("p",null,"For deployments where template authors are untrusted, you can set limits on some resources to avoid malicious templates from consuming too much memory or too many CPU cycles."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment } from "liquidscript";\n\nconst env = new Environment({\n  maxContextDepth: 30,\n  localNamespaceLimit: 3000,\n  loopIterationLimit: 1000,\n  outputStreamLimit: 15000,\n});\n\nconst template = env.fromString(`\n{% for x in (1..1000000) %}\n{% for y in (1..1000000) %}\n  {{ x }},{{ y }}\n{% endfor %}\n{% endfor %}\n`);\n\ntemplate.renderSync();\n// LoopIterationLimitError: loop iteration limit reached (<string>:2)\n')),(0,i.kt)("h2",{id:"context-depth-limit"},"Context Depth Limit"),(0,i.kt)("p",null,"The maximum number of times a render context can be copied or extended before a ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/ContextDepthError"},(0,i.kt)("inlineCode",{parentName:"a"},"ContextDepthError"))," is thrown. This helps us guard against recursive use of the ",(0,i.kt)("inlineCode",{parentName:"p"},"include")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"render")," tags."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment#maxcontextdepth"},(0,i.kt)("inlineCode",{parentName:"a"},"maxContextDepth"))," option defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"30"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment, ObjectLoader } from "liquidscript";\n\nconst templates = {\n  foo: "{% render \'bar\' %}",\n  bar: "{% render \'foo\' %}",\n};\n\nconst env = new Environment({\n  loader: new ObjectLoader(templates),\n  maxContextDepth: 30,\n});\n\nconst template = env.fromString("{% render \'foo\' %}");\ntemplate.renderSync();\n// ContextDepthError: maximum context depth reached, possible recursive render (bar:1)\n')),(0,i.kt)("h2",{id:"local-namespace-limit"},"Local Namespace Limit"),(0,i.kt)("p",null,'The maximum "size" of a render context local namespace. Rather than the number of bytes in memory a local namespace occupies, "size" is a non-specific indication of how much a template uses the local namespace when it is rendered, typically using the ',(0,i.kt)("inlineCode",{parentName:"p"},"assign")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"capture")," tags."),(0,i.kt)("p",null,"If the ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment#localnamespacelimit"},(0,i.kt)("inlineCode",{parentName:"a"},"localNamespaceLimit"))," option is ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," or less than ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", there is no limit. Otherwise a ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/LocalNamespaceLimitError"},(0,i.kt)("inlineCode",{parentName:"a"},"LocalNamespaceLimitError"))," is thrown when the namespace's size exceeds the limit."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment } from "liquidscript";\n\nconst env = new Environment({\n  localNamespaceLimit: 50, // Very low, for demonstration purposes.\n});\n\nconst template = env.fromString(\n  \'{% assign x = "Nunc est nulla, pellentesque ac dui id erat curae." %}\'\n);\n\ntemplate.renderSync();\n// LocalNamespaceLimitError: local namespace limit reached (<string>:1)\n')),(0,i.kt)("h2",{id:"loop-iteration-limit"},"Loop Iteration Limit"),(0,i.kt)("p",null,"The maximum number of loop iteration allowed before a ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/LoopIterationLimitError"},(0,i.kt)("inlineCode",{parentName:"a"},"LoopIterationLimitError"))," is thrown."),(0,i.kt)("p",null,"If the ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment#loopiterationlimit"},(0,i.kt)("inlineCode",{parentName:"a"},"loopIterationLimit"))," option is ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," or less than ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", there is no soft limit."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment } from "liquidscript";\n\nconst env = new Environment({\n  loopIterationLimit: 999,\n});\n\nconst template = env.fromString(`\n{% for x in (1..100) %}\n{% for y in (1..100) %}\n  {{ x }},{{ y }}\n{% endfor %}\n{% endfor %}\n`);\n\ntemplate.renderSync();\n// LoopIterationLimitError: loop iteration limit reached (<string>:2)\n')),(0,i.kt)("p",null,"Other built in tags that contribute to the loop iteration counter are ",(0,i.kt)("inlineCode",{parentName:"p"},"render"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"include")," (when using their ",(0,i.kt)("inlineCode",{parentName:"p"},"{% render 'thing' for some.thing %}")," syntax) and ",(0,i.kt)("inlineCode",{parentName:"p"},"tablerow"),". If a partial template is rendered within a ",(0,i.kt)("inlineCode",{parentName:"p"},"for")," loop, the loop counter is carried over to the render context of the partial template."),(0,i.kt)("h2",{id:"output-stream-limit"},"Output Stream Limit"),(0,i.kt)("p",null,"The maximum number of bytes that can be written to a template's output stream, per render, before an ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/OutputStreamLimitError"},(0,i.kt)("inlineCode",{parentName:"a"},"OutputStreamLimitError"))," is thrown."),(0,i.kt)("p",null,"If the ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment#outputstreamlimit"},(0,i.kt)("inlineCode",{parentName:"a"},"outputStreamLimit"))," option is ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," or less than ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", there is no soft limit."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment } from "liquidscript";\n\nconst env = new Environment({\n  outputStreamLimit: 20, // Very low, for demonstration purposes.\n});\n\nconst template = env.fromString(`\n{% if false %}\nthis is never rendered, so will not contribute the the output byte counter\n{% endif %}\nHello, {{ you }}! \n`);\n\ntemplate.renderSync({ you: "World" });\n// "\\nHello, World!\\n"\n\ntemplate.renderSync({ you: "something longer that exceeds our limit" });\n// OutputStreamLimitError: output stream limit reached (<string>:5)\n')))}u.isMDXComponent=!0}}]);