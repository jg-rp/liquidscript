"use strict";(self.webpackChunkliquidscript_docs=self.webpackChunkliquidscript_docs||[]).push([[1508],{9494:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(6687);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4712:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(6687),r=n(4923);const o={tabItem:"tabItem_QpX5"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:n},t)}},1547:(e,t,n)=>{n.d(t,{Z:()=>S});var a=n(1943),r=n(6687),o=n(4923),i=n(2315),s=n(668),l=n(4130),p=n(5681),c=n(7514);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function u(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=m(e),[i,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!u({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[l,p]=h({queryString:n,groupId:a}),[d,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),f=(()=>{const e=l??d;return u({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{f&&s(f)}),[f]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!u({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),p(e),g(e)}),[p,g,o]),tabValues:o}}var f=n(3979);const k={tabList:"tabList_AtKJ",tabItem:"tabItem_n7BL"};function y(e){let{className:t,block:n,selectedValue:s,selectValue:l,tabValues:p}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),m=e=>{const t=e.currentTarget,n=c.indexOf(t),a=p[n].value;a!==s&&(d(t),l(a))},u=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>c.push(e),onKeyDown:u,onClick:m},i,{className:(0,o.Z)("tabs__item",k.tabItem,i?.className,{"tabs__item--active":s===t})}),n??t)})))}function N(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function b(e){const t=g(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",k.tabList)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(N,(0,a.Z)({},e,t)))}function S(e){const t=(0,f.Z)();return r.createElement(b,(0,a.Z)({key:String(t)},e))}},1814:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>p,toc:()=>d});var a=n(1943),r=(n(6687),n(9494)),o=n(1547),i=n(4712);const s={},l="Custom Loaders",p={unversionedId:"guides/custom-loaders",id:"guides/custom-loaders",title:"Custom Loaders",description:"Template loaders are responsible for finding a template's source text given a name or identifier. You might want to write a custom template loader to read templates from a database, narrow the template search space for a specific user, or add extra context data to a template, for example.",source:"@site/docs/guides/custom-loaders.mdx",sourceDirName:"guides",slug:"/guides/custom-loaders",permalink:"/liquidscript/guides/custom-loaders",draft:!1,editUrl:"https://github.com/jg-rp/liquidscript/tree/docs/docs/guides/custom-loaders.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Custom Tags",permalink:"/liquidscript/guides/custom-tags"},next:{title:"Template Static Analysis",permalink:"/liquidscript/guides/static-analysis"}},c={},d=[{value:"Example Map Loader",id:"example-map-loader",level:2},{value:"Loading Sections and Snippets",id:"loading-sections-and-snippets",level:2},{value:"Caching Loaders",id:"caching-loaders",level:2},{value:"Front Matter Loader",id:"front-matter-loader",level:2},{value:"Scoped Database Loader",id:"scoped-database-loader",level:2}],m={toc:d},u="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"custom-loaders"},"Custom Loaders"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/liquidscript/introduction/loading-templates#built-in-template-loaders"},"Template loaders")," are responsible for finding a template's source text given a name or identifier. You might want to write a custom template loader to read templates from a database, narrow the template search space for a specific user, or add extra context data to a template, for example."),(0,r.kt)("p",null,"Write a custom template loader by extending the ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Loader"},(0,r.kt)("inlineCode",{parentName:"a"},"Loader"))," base class and implementing its ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Loader#getsource"},(0,r.kt)("inlineCode",{parentName:"a"},"getSource()"))," and ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Loader#getsourcesync"},(0,r.kt)("inlineCode",{parentName:"a"},"getSourceSync()"))," methods. Then configure an ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment"},(0,r.kt)("inlineCode",{parentName:"a"},"Environment"))," to use your loader with the ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/modules#environmentoptions"},(0,r.kt)("inlineCode",{parentName:"a"},"loader"))," option."),(0,r.kt)("h2",{id:"example-map-loader"},"Example Map Loader"),(0,r.kt)("p",null,"This example loader reads templates from a ",(0,r.kt)("inlineCode",{parentName:"p"},"Map")," of template names to template source text strings."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Loader#getsource"},(0,r.kt)("inlineCode",{parentName:"a"},"getSource()"))," and ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Loader#getsourcesync"},(0,r.kt)("inlineCode",{parentName:"a"},"getSourceSync()"))," are expected to return a ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/TemplateSource"},(0,r.kt)("inlineCode",{parentName:"a"},"TemplateSource"))," object representing the template source and associated meta data. If a template's source can not be found, ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Loader#getsource"},(0,r.kt)("inlineCode",{parentName:"a"},"getSource()"))," and ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Loader#getsourcesync"},(0,r.kt)("inlineCode",{parentName:"a"},"getSourceSync()"))," should throw a ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/TemplateNotFoundError"},(0,r.kt)("inlineCode",{parentName:"a"},"TemplateNotFoundError")),"."),(0,r.kt)(o.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { Loader, TemplateSource, TemplateNotFoundError } from "liquidscript";\n\nexport class MapLoader extends Loader {\n  #map;\n\n  constructor(map) {\n    super();\n    this.#map = map === undefined ? new Map() : map;\n  }\n\n  async getSource(name) {\n    return this.getSourceSync(name);\n  }\n\n  getSourceSync(name) {\n    const source = this.#map.get(name);\n    if (source === undefined) throw new TemplateNotFoundError(name);\n    return new TemplateSource(source, name);\n  }\n}\n'))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Loader, TemplateSource, TemplateNotFoundError } from "liquidscript";\n\nclass MapLoader extends Loader {\n  #templateMap: Map<string, string>;\n\n  constructor(map?: Map<string, string>) {\n    super();\n    this.#templateMap = map === undefined ? new Map<string, string>() : map;\n  }\n\n  public async getSource(name: string): Promise<TemplateSource> {\n    return this.getSourceSync(name);\n  }\n\n  public getSourceSync(name: string): TemplateSource {\n    const source = this.#templateMap.get(name);\n    if (source === undefined) throw new TemplateNotFoundError(name);\n    return new TemplateSource(source, name);\n  }\n}\n')))),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"MapLoader")," is exported from a ",(0,r.kt)("inlineCode",{parentName:"p"},'"my_loaders"')," module, we can import it and configure an ",(0,r.kt)("inlineCode",{parentName:"p"},"Environment")," to use it like this."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment } from "liquidscript";\nimport { MapLoader } from "./my_loaders";\n\nconst templates = new Map([\n  ["some_template", "{% include \'some_snippet\' %}"],\n  ["some_snippet", "Hello, {{ you }}!"],\n]);\n\nconst env = new Environment({ loader: new MapLoader(templates) });\nconst template = env.getTemplateSync("some_template");\nconsole.log(template.renderSync({ you: "World" }));\n// Hello, World!\n')),(0,r.kt)("h2",{id:"loading-sections-and-snippets"},"Loading Sections and Snippets"),(0,r.kt)("p",null,"We can mimic ",(0,r.kt)("a",{parentName:"p",href:"https://shopify.dev/api/liquid/tags/theme-tags#render"},"Shopify's snippet")," and ",(0,r.kt)("a",{parentName:"p",href:"https://shopify.dev/api/liquid/tags/theme-tags#section"},"static section")," loading behavior with a custom template loader and ",(0,r.kt)("inlineCode",{parentName:"p"},"section")," tag. This example will look for templates rendered with ",(0,r.kt)("inlineCode",{parentName:"p"},"{% include %}")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"{% render %}")," in a ",(0,r.kt)("inlineCode",{parentName:"p"},"snippets")," subfolder, those rendered with ",(0,r.kt)("inlineCode",{parentName:"p"},"{% section %}")," in a ",(0,r.kt)("inlineCode",{parentName:"p"},"section")," subfolder, and all other templates in a ",(0,r.kt)("inlineCode",{parentName:"p"},"templates")," subfolder."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SectionLoader")," makes use of the ",(0,r.kt)("inlineCode",{parentName:"p"},"LoaderContext")," object passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"getSource()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"getSourceSync()"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"LoaderContext")," can contain any arbitrary objects and primitives that a template loader might use to modify its search space or retrieve extra template meta data. By convention, the built in ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#include"},(0,r.kt)("inlineCode",{parentName:"a"},"include"))," and ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#render"},(0,r.kt)("inlineCode",{parentName:"a"},"render"))," tags add a ",(0,r.kt)("inlineCode",{parentName:"p"},"tag")," property to their ",(0,r.kt)("inlineCode",{parentName:"p"},"LoaderContext"),", allowing us to determine which tag, if any, is trying to load a template."),(0,r.kt)(o.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=section_loader.js",title:"section_loader.js"},'import fsCallback from "fs";\nimport fs from "fs/promises";\nimport path from "path";\n\nimport {\n  Loader,\n  TemplateSource,\n  TemplateNotFoundError,\n  object,\n  tags,\n} from "liquidscript";\n\nclass SectionLoader extends Loader {\n  #path;\n  #sections;\n  #snippets;\n  #templates;\n  encoding = "utf8";\n  fileExtension = ".liquid";\n\n  constructor(searchPath) {\n    super();\n    this.#path = searchPath;\n    this.#sections = path.join(this.#path, "sections");\n    this.#snippets = path.join(this.#path, "snippets");\n    this.#templates = path.join(this.#path, "templates");\n  }\n\n  async getSource(name, renderContext, loaderContext) {\n    const templatePath = await this.resolve(\n      this.withFileExtension(name),\n      object.liquidStringify(\n        loaderContext === undefined ? undefined : loaderContext.tag\n      )\n    );\n    const source = await fs.readFile(templatePath, { encoding: this.encoding });\n    return new TemplateSource(source, templatePath);\n  }\n\n  getSourceSync(name, renderContext, loaderContext) {\n    const templatePath = this.resolveSync(\n      this.withFileExtension(name),\n      object.liquidStringify(\n        loaderContext === undefined ? undefined : loaderContext.tag\n      )\n    );\n    const source = fsCallback.readFileSync(templatePath, {\n      encoding: this.encoding,\n    });\n    return new TemplateSource(source, templatePath);\n  }\n\n  withFileExtension(name) {\n    return path.extname(name) ? name : name + this.fileExtension;\n  }\n\n  async resolve(name, tag) {\n    const searchPath = this.resolveTag(tag);\n    const templatePath = path.join(searchPath, path.normalize(name));\n\n    if (!isSubPath(searchPath, templatePath))\n      throw new TemplateNotFoundError(name);\n\n    try {\n      const stat = await fs.stat(templatePath);\n      if (stat.isFile()) return templatePath;\n      throw new TemplateNotFoundError(name);\n    } catch {\n      throw new TemplateNotFoundError(name);\n    }\n  }\n\n  resolveSync(name, tag) {\n    const searchPath = this.resolveTag(tag);\n    const templatePath = path.join(searchPath, path.normalize(name));\n\n    if (!isSubPath(searchPath, templatePath))\n      throw new TemplateNotFoundError(name);\n\n    try {\n      const stat = fsCallback.statSync(templatePath);\n      if (stat.isFile()) return templatePath;\n      throw new TemplateNotFoundError(name);\n    } catch {\n      throw new TemplateNotFoundError(name);\n    }\n  }\n\n  resolveTag(tag) {\n    switch (tag) {\n      case "render":\n      case "include":\n        return this.#snippets;\n      case "section":\n        return this.#sections;\n      case "":\n        return this.#templates;\n      default:\n        throw new TemplateNotFoundError(\n          "SectionLoader can only load \'render\', \'include\' and \'section\' tags"\n        );\n    }\n  }\n}\n\nfunction isSubPath(parent, dir) {\n  const relative = path.relative(parent, dir);\n  return !!relative && !relative.startsWith(".") && !path.isAbsolute(relative);\n}\n'))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="section_loader.ts"',title:'"section_loader.ts"'},'import fsCallback from "fs";\nimport fs from "fs/promises";\nimport path from "path";\n\nimport {\n  Loader,\n  RenderContext,\n  TemplateSource,\n  TemplateNotFoundError,\n  object,\n  tags,\n} from "liquidscript";\n\nclass SectionLoader extends Loader {\n  #path: string;\n  #sections: string;\n  #snippets: string;\n  #templates: string;\n  readonly encoding: BufferEncoding = "utf8";\n  readonly fileExtension: string = ".liquid";\n\n  constructor(searchPath: string) {\n    super();\n    this.#path = searchPath;\n    this.#sections = path.join(this.#path, "sections");\n    this.#snippets = path.join(this.#path, "snippets");\n    this.#templates = path.join(this.#path, "templates");\n  }\n\n  public async getSource(\n    name: string,\n    renderContext?: RenderContext,\n    loaderContext?: { [index: string]: unknown }\n  ): Promise<TemplateSource> {\n    const templatePath = await this.resolve(\n      this.withFileExtension(name),\n      object.liquidStringify(loaderContext?.tag)\n    );\n    const source = await fs.readFile(templatePath, { encoding: this.encoding });\n    return new TemplateSource(source, templatePath);\n  }\n\n  public getSourceSync(\n    name: string,\n    renderContext?: RenderContext,\n    loaderContext?: { [index: string]: unknown }\n  ): TemplateSource {\n    const templatePath = this.resolveSync(\n      this.withFileExtension(name),\n      object.liquidStringify(loaderContext?.tag)\n    );\n    const source = fsCallback.readFileSync(templatePath, {\n      encoding: this.encoding,\n    });\n    return new TemplateSource(source, templatePath);\n  }\n\n  protected withFileExtension(name: string): string {\n    return path.extname(name) ? name : name + this.fileExtension;\n  }\n\n  protected async resolve(name: string, tag: string): Promise<string> {\n    const searchPath = this.resolveTag(tag);\n    const templatePath = path.join(searchPath, path.normalize(name));\n\n    if (!isSubPath(searchPath, templatePath))\n      throw new TemplateNotFoundError(name);\n\n    try {\n      const stat = await fs.stat(templatePath);\n      if (stat.isFile()) return templatePath;\n      throw new TemplateNotFoundError(name);\n    } catch {\n      throw new TemplateNotFoundError(name);\n    }\n  }\n\n  protected resolveSync(name: string, tag: string): string {\n    const searchPath = this.resolveTag(tag);\n    const templatePath = path.join(searchPath, path.normalize(name));\n\n    if (!isSubPath(searchPath, templatePath))\n      throw new TemplateNotFoundError(name);\n\n    try {\n      const stat = fsCallback.statSync(templatePath);\n      if (stat.isFile()) return templatePath;\n      throw new TemplateNotFoundError(name);\n    } catch {\n      throw new TemplateNotFoundError(name);\n    }\n  }\n\n  protected resolveTag(tag: string): string {\n    switch (tag) {\n      case "render":\n      case "include":\n        return this.#snippets;\n      case "section":\n        return this.#sections;\n      case "":\n        return this.#templates;\n      default:\n        throw new TemplateNotFoundError(\n          "SectionLoader can only load \'render\', \'include\' and \'section\' tags"\n        );\n    }\n  }\n}\n\nfunction isSubPath(parent: string, dir: string): boolean {\n  const relative = path.relative(parent, dir);\n  return !!relative && !relative.startsWith(".") && !path.isAbsolute(relative);\n}\n')))),(0,r.kt)("p",null,"Our ",(0,r.kt)("inlineCode",{parentName:"p"},"section")," tag is a minimal extension of the ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#include"},(0,r.kt)("inlineCode",{parentName:"a"},"include"))," tag."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="section_tag.js"',title:'"section_tag.js"'},'class SectionTag extends tags.IncludeTag {\n  name = "section";\n  nodeClass = SectionNode;\n}\n\nclass SectionNode extends tags.IncludeNode {\n  tag = "section";\n}\n')),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},"SectionLoader")," exported from a ",(0,r.kt)("inlineCode",{parentName:"p"},'"section_loader"')," module and ",(0,r.kt)("inlineCode",{parentName:"p"},"SectionTag")," exported from ",(0,r.kt)("inlineCode",{parentName:"p"},'"section_tag"'),", we can configure an ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment"},(0,r.kt)("inlineCode",{parentName:"a"},"Environment"))," like this."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment, StrictUndefined } from "liquidscript";\nimport { SectionLoader } from "./section_loader";\nimport { SectionTag } from "./section_tag";\n\nconst env = new Environment({\n  loader: new SectionLoader("templates/"),\n  undefinedFactory: StrictUndefined.from,\n});\n\nenv.addTag("section", new SectionTag());\n')),(0,r.kt)("h2",{id:"caching-loaders"},"Caching Loaders"),(0,r.kt)("p",null,"Parsing a Liquid template is significantly slower than rendering a Liquid template (not including render-time IO). As such, we should cache parsed templates where possible to prevent the same template being parsed multiple times unnecessarily. One example scenario where even a modest in-memory cache can yield a noticeable performance improvement is that of ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#include"},"including")," a partial template repeatedly inside a ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#for"},"for loop"),"."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Please see the implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"CachingNodeFileSystemLoader")," in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquidscript/blob/main/src/builtin/loaders/file_system_loader.ts"},"src/builtin/loaders/file_system_loader.ts")," for a full example.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/CachingNodeFileSystemLoader"},(0,r.kt)("inlineCode",{parentName:"a"},"CachingNodeFileSystemLoader"))," overrides ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Loader#load"},(0,r.kt)("inlineCode",{parentName:"a"},"load()"))," and ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Loader#loadsync"},(0,r.kt)("inlineCode",{parentName:"a"},"loadSync()"))," of its parent ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Loader"},(0,r.kt)("inlineCode",{parentName:"a"},"Loader"))," class. It uses an ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/LRUCache"},(0,r.kt)("inlineCode",{parentName:"a"},"LRUCache")),", which is checked before delegating to ",(0,r.kt)("inlineCode",{parentName:"p"},"getSource()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"getSourceSync()")," in the event of a cache miss."),(0,r.kt)("p",null,"The optional ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/TemplateSource#uptodate"},(0,r.kt)("inlineCode",{parentName:"a"},"upToDate"))," and ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/TemplateSource#uptodatesync"},(0,r.kt)("inlineCode",{parentName:"a"},"upToDateSync"))," properties of a ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/TemplateSource"},(0,r.kt)("inlineCode",{parentName:"a"},"TemplateSource"))," provide a way to bust a template cache if the underlying source text has been modified."),(0,r.kt)("h2",{id:"front-matter-loader"},"Front Matter Loader"),(0,r.kt)("p",null,"A ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/TemplateSource"},(0,r.kt)("inlineCode",{parentName:"a"},"TemplateSource"))," object, as returned by ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Loader#getsource"},(0,r.kt)("inlineCode",{parentName:"a"},"getSource()"))," and ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Loader#getsourcesync"},(0,r.kt)("inlineCode",{parentName:"a"},"getSourceSync()"))," of a template ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Loader"},(0,r.kt)("inlineCode",{parentName:"a"},"Loader")),", optionally includes a ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/TemplateSource#matter"},(0,r.kt)("inlineCode",{parentName:"a"},"matter"))," property. If given, ",(0,r.kt)("inlineCode",{parentName:"p"},"matter")," should be extra render context data in addition to ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/introduction/render-context#environment-globals"},"environment globals")," and ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/introduction/render-context#template-globals"},"template globals"),". Like template globals, matter data is pinned to a template and will be merged with environment globals at render time."),(0,r.kt)("p",null,"This example implements a front matter template loader by extending ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/NodeFileSystemLoader"},(0,r.kt)("inlineCode",{parentName:"a"},"NodeFileSystemLoader"))," and parsing ",(0,r.kt)("a",{parentName:"p",href:"https://yaml.org/"},"YAML")," from the start of a every template source file."),(0,r.kt)(o.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import {\n  Environment,\n  NodeFileSystemLoader,\n  TemplateSource,\n} from "liquidscript";\n\nimport yaml from "js-yaml";\n\nconst RE_FRONT_MATTER = /^\\s*---\\s*(.*?)\\s*---\\s*/ms;\n\nclass FrontMatterLoader extends NodeFileSystemLoader {\n  async getSource(name) {\n    return this.loadMatter(await super.getSource(name));\n  }\n\n  getSourceSync(name) {\n    return this.loadMatter(super.getSourceSync(name));\n  }\n\n  loadMatter(templateSource) {\n    const match = templateSource.source.match(RE_FRONT_MATTER);\n    if (match) {\n      // TODO: check YAML schema and handle YAML errors\n      const matter = yaml.load(match[1]);\n      return new TemplateSource(\n        templateSource.source.slice(match[0].length),\n        templateSource.name,\n        matter,\n        templateSource.upToDate,\n        templateSource.upToDateSync\n      );\n    }\n    return templateSource;\n  }\n}\n'))),(0,r.kt)(i.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import {\n  ContextScope,\n  NodeFileSystemLoader,\n  object,\n  TemplateSource,\n} from "liquidscript";\n\nimport yaml from "js-yaml";\n\nconst RE_FRONT_MATTER = /^\\s*---\\s*(.*?)\\s*---\\s*/ms;\n\nclass FrontMatterLoader extends NodeFileSystemLoader {\n  public async getSource(name: string): Promise<TemplateSource> {\n    return this.loadMatter(await super.getSource(name));\n  }\n\n  public getSourceSync(name: string): TemplateSource {\n    return this.loadMatter(super.getSourceSync(name));\n  }\n\n  protected loadMatter(templateSource: TemplateSource): TemplateSource {\n    const match = templateSource.source.match(RE_FRONT_MATTER);\n    if (match) {\n      // TODO: check YAML schema and handle YAML errors\n      const matter = yaml.load(match[1]);\n      if (object.isContextScope(matter)) {\n        return new TemplateSource(\n          templateSource.source.slice(match[0].length),\n          templateSource.name,\n          matter,\n          templateSource.upToDate,\n          templateSource.upToDateSync\n        );\n      }\n    }\n    return templateSource;\n  }\n}\n')))),(0,r.kt)("h2",{id:"scoped-database-loader"},"Scoped Database Loader"),(0,r.kt)("p",null,"We can implement a ",(0,r.kt)("em",{parentName:"p"},"scoped")," template loader using the ",(0,r.kt)("inlineCode",{parentName:"p"},"loaderContext")," argument to ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment#gettemplate"},(0,r.kt)("inlineCode",{parentName:"a"},"getTemplate()"))," or as part of the ",(0,r.kt)("inlineCode",{parentName:"p"},"templateContext")," argument to ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment#fromstring"},(0,r.kt)("inlineCode",{parentName:"a"},"fromString()")),". A scoped template loader is useful for multi-user application where each user has their own collection of templates."),(0,r.kt)("p",null,"This example loader reads templates from a MongoDB database, narrowing its search space using a ",(0,r.kt)("inlineCode",{parentName:"p"},"uid")," property set on the ",(0,r.kt)("inlineCode",{parentName:"p"},"loaderContext")," object passed to ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Loader#getsource"},(0,r.kt)("inlineCode",{parentName:"a"},"getSource()")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="mongo_loader.mjs"',title:'"mongo_loader.mjs"'},'import { Loader, TemplateNotFoundError, TemplateSource } from "liquidscript";\n\nexport class MongoDBLoader extends Loader {\n  constructor(collection) {\n    super();\n    this.collection = collection;\n    this.re = /[a-zA-Z][a-zA-Z0-9_\\-]+/;\n  }\n\n  async getSource(name, renderContext, loaderContext) {\n    const uid = loaderContext !== undefined ? loaderContext.uid : undefined;\n    if (uid === undefined)\n      throw new TemplateNotFoundError(\n        "MongoDBLoader requires a loader context with a \'uid\' property"\n      );\n\n    if (!this.re.test(name))\n      throw new TemplateNotFoundError(`invalid template name: ${name}`);\n\n    const query = { uid: uid, [`templates.${name}`]: { $exists: 1 } };\n    const projection = { _id: 0, [`templates.${name}`]: 1 };\n\n    const result = await this.collection.findOne(query, projection);\n    if (!result) throw new TemplateNotFoundError(name);\n    return new TemplateSource(result.templates[name], name);\n  }\n\n  getSourceSync() {\n    throw new Error("MongoDBLoader is an async only loader");\n  }\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"MongoDBLoader")," constructor expects a MongoDB ",(0,r.kt)("inlineCode",{parentName:"p"},"Collection")," from an already connected client, and that documents in that collection have a ",(0,r.kt)("inlineCode",{parentName:"p"},"uid")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"templates")," field. Fields in the embedded ",(0,r.kt)("inlineCode",{parentName:"p"},"templates")," document are Liquid template names and their values are Liquid template source text strings."),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"MongoDBLoader")," is exported from the module ",(0,r.kt)("inlineCode",{parentName:"p"},'"mongo_loader.mjs"'),", we could use it like this."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Environment } from "liquidscript";\nimport { MongoClient } from "mongodb";\nimport { MongoDBLoader } from "./mongo_loader";\n\nconst uri = "mongodb://<somehost>";\nconst client = new MongoClient(uri);\n\nasync function run() {\n  try {\n    await client.connect();\n    const db = client.db("mydatabase");\n    const col = db.collection("mycollection");\n    const env = new Environment({ loader: new MongoDBLoader(col) });\n\n    const template = await env.getTemplate("index", undefined, undefined, {\n      uid: "ABC0123",\n    });\n\n    const result = await template.render();\n    console.log(result);\n  } finally {\n    await client.close();\n  }\n}\nrun().catch(console.dir);\n')))}h.isMDXComponent=!0}}]);