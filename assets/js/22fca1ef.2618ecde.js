"use strict";(self.webpackChunkliquidscript_docs=self.webpackChunkliquidscript_docs||[]).push([[66189],{31724:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var s=t(74848),a=t(28453),r=t(11470),i=t(19365);const o={},l="Custom Tags",c={id:"guides/custom-tags",title:"Custom Tags",description:"Liquid tags are defined by a pair of JavaScript objects. One implementing the Tag interface and one implementing the Node interface. The parse method of a Tag is responsible for parsing a tag's expression and returning a Node, which will be added to a template's parse tree.",source:"@site/docs/guides/custom-tags.mdx",sourceDirName:"guides",slug:"/guides/custom-tags",permalink:"/liquidscript/guides/custom-tags",draft:!1,unlisted:!1,editUrl:"https://github.com/jg-rp/liquidscript/tree/docs/docs/guides/custom-tags.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Custom Filters",permalink:"/liquidscript/guides/custom-filters"},next:{title:"Custom Loaders",permalink:"/liquidscript/guides/custom-loaders"}},d={},p=[{value:"Add a Tag",id:"add-a-tag",level:2},{value:"Example Tag",id:"example-tag",level:3},{value:"Example Node",id:"example-node",level:3},{value:"Example Tag Usage",id:"example-tag-usage",level:3},{value:"Replace a Tag",id:"replace-a-tag",level:2},{value:"Remove a Tag",id:"remove-a-tag",level:2},{value:"Jekyll Style Include Example",id:"jekyll-style-include-example",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"custom-tags",children:"Custom Tags"}),"\n",(0,s.jsxs)(n.p,{children:["Liquid ",(0,s.jsx)(n.a,{href:"/liquidscript/language/introduction#tags",children:"tags"})," are defined by a pair of JavaScript objects. One implementing the ",(0,s.jsx)(n.a,{href:"/liquidscript/api/interfaces/Tag",children:(0,s.jsx)(n.code,{children:"Tag"})})," interface and one implementing the ",(0,s.jsx)(n.a,{href:"/liquidscript/api/interfaces/Node",children:(0,s.jsx)(n.code,{children:"Node"})})," interface. The ",(0,s.jsx)(n.a,{href:"/liquidscript/api/interfaces/Node",children:(0,s.jsx)(n.code,{children:"parse"})})," method of a ",(0,s.jsx)(n.code,{children:"Tag"})," is responsible for parsing a tag's expression and returning a ",(0,s.jsx)(n.code,{children:"Node"}),", which will be added to a template's parse tree."]}),"\n",(0,s.jsx)(n.p,{children:"You can add to, remove or modify Liquid's built-in tags to suit your needs by registering tags with an Environment, then rendering your templates from that environment."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["All built-in tags are implemented this way, so have a look in ",(0,s.jsx)(n.a,{href:"https://github.com/jg-rp/liquidscript/tree/main/src/builtin/tags",children:"src/builtin/tags/"})," for more examples."]})}),"\n",(0,s.jsx)(n.h2,{id:"add-a-tag",children:"Add a Tag"}),"\n",(0,s.jsxs)(n.p,{children:["Taking inspiration from ",(0,s.jsx)(n.a,{href:"https://docs.djangoproject.com/en/3.2/ref/templates/builtins/#with",children:"Django's Template Language"}),", lets implement a ",(0,s.jsx)(n.code,{children:"with"})," tag, which extends the local scope for the duration of its block. Our ",(0,s.jsx)(n.code,{children:"with"})," tag's expressions consists of one or more named arguments separated by commas. Each argument is a variable name, followed by a colon, then a Liquid keyword, string, integer, float, range expression or identifier."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-plain",children:"{% with <identifier>: <object> [, <identifier>: object ... ] %}\n  <literal,statement,tag> ...\n{% endwith %}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This implementation keeps any variables set inside the ",(0,s.jsx)(n.code,{children:"with"})," block (using ",(0,s.jsx)(n.code,{children:"assign"})," or ",(0,s.jsx)(n.code,{children:"capture"}),") alive after the block has been rendered."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["We use ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes",children:"class syntax"})," here for both JavaScript and TypeScript examples. Constructor functions and objects with function valued properties would work equally as well."]})}),"\n",(0,s.jsx)(n.h3,{id:"example-tag",children:"Example Tag"}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.a,{href:"/liquidscript/api/interfaces/Tag",children:(0,s.jsx)(n.code,{children:"Tag"})})," is free to parse its expression any way it chooses. Built in tags use regular expressions to ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",children:"generate"})," a ",(0,s.jsx)(n.a,{href:"/liquidscript/api/namespaces/expressions/classes/ExpressionTokenStream",children:"stream of tokens"}),", then step through those tokens yielding ",(0,s.jsx)(n.a,{href:"/liquidscript/api/interfaces/Expression",children:(0,s.jsx)(n.code,{children:"Expression"})})," objects."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Despite their names, ",(0,s.jsx)(n.code,{children:"ExpressionTokenStream"}),", ",(0,s.jsx)(n.code,{children:"TokenStream"})," and ",(0,s.jsx)(n.code,{children:"RenderStream"})," do not implement a Node.js stream or a web stream."]})}),"\n",(0,s.jsxs)(n.p,{children:["Here we'll reuse the tokenizer from the ",(0,s.jsx)(n.a,{href:"/liquidscript/language/tags#include",children:(0,s.jsx)(n.code,{children:"include"})})," tag, as it, too, accepts any number of comma separated named arguments. We will, however, supply a different set of allowed keywords to the tokenizer function."]}),"\n",(0,s.jsxs)(r.A,{groupId:"js-ts",children:[(0,s.jsx)(i.A,{value:"js",label:"JavaScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="with_tag.js"',children:'import { expressions, tokens } from "liquidscript";\n\n// Reuse the `include` tokenizer.\nconst tokenize = expressions.include.makeTokenizer(\n  expressions.include.RE,\n  new Set([\n    expressions.TOKEN_TRUE,\n    expressions.TOKEN_FALSE,\n    expressions.TOKEN_NIL,\n    expressions.TOKEN_NULL,\n  ])\n);\n\n// Indicates the end of a `with` block.\nconst TAG_ENDWITH = "endwith";\nconst END_WITH_BLOCK = new Set([TAG_ENDWITH]);\n\n// ...\n'})})}),(0,s.jsx)(i.A,{value:"ts",label:"TypeScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="with_tag.ts"',children:'import {\n  Environment,\n  Expression,\n  Tag,\n  expressions,\n  tokens,\n  Node,\n  BlockNode,\n  RenderContext,\n  RenderStream,\n  ContextScope,\n} from "liquidscript";\n\n// Reuse the `include` tokenizer.\nconst tokenize = expressions.include.makeTokenizer(\n  expressions.include.RE,\n  new Set([\n    expressions.TOKEN_TRUE,\n    expressions.TOKEN_FALSE,\n    expressions.TOKEN_NIL,\n    expressions.TOKEN_NULL,\n  ])\n);\n\n// Indicates the end of a `with` block.\nconst TAG_ENDWITH = "endwith";\nconst END_WITH_BLOCK = new Set([TAG_ENDWITH]);\n\ntype Arguments = {\n  [index: string]: Expression;\n};\n\n// ...\n'})})})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"/liquidscript/api/interfaces/Tag#parse",children:(0,s.jsx)(n.code,{children:"parse()"})})," method of a ",(0,s.jsx)(n.code,{children:"Tag"})," object receives a ",(0,s.jsx)(n.a,{href:"/liquidscript/api/namespaces/tokens/interfaces/TokenStream",children:(0,s.jsx)(n.code,{children:"TokenStream"})})," and a reference to the active ",(0,s.jsx)(n.a,{href:"/liquidscript/api/classes/Environment",children:(0,s.jsx)(n.code,{children:"Environment"})}),". This stream of ",(0,s.jsx)(n.a,{href:"/api/namespaces/tokens#variables",children:"tokens"})," includes template literals, output statements, tags and unparsed tag expressions."]}),"\n",(0,s.jsxs)(n.p,{children:["The current token in the stream will always be of the type ",(0,s.jsx)(n.a,{href:"/liquidscript/api/namespaces/tokens/variables/TOKEN_TAG",children:(0,s.jsx)(n.code,{children:"TOKEN_TAG"})}),", representing the start of the tag we're parsing. By convention, this token is used to populate the ",(0,s.jsx)(n.code,{children:"token"})," property of the associated ",(0,s.jsx)(n.code,{children:"Node"})," object. If the tag has an expression (anything after the tag's name), it will immediately follow the ",(0,s.jsx)(n.code,{children:"TOKEN_TAG"})," in the stream as a ",(0,s.jsx)(n.a,{href:"../api/namespaces/tokens/variables/TOKEN_EXPRESSION",children:(0,s.jsx)(n.code,{children:"TOKEN_EXPRESSION"})}),". In the example bellow we use ",(0,s.jsx)(n.a,{href:"/liquidscript/api/namespaces/tokens/interfaces/TokenStream#expect",children:(0,s.jsx)(n.code,{children:"TokenStream.expect()"})})," to confirm that an expression was provided."]}),"\n",(0,s.jsxs)(n.p,{children:["We use ",(0,s.jsx)(n.a,{href:"/liquidscript/api/interfaces/Parser#parseblock",children:(0,s.jsx)(n.code,{children:"parseBlock()"})})," from the active environment to parse our ",(0,s.jsx)(n.code,{children:"with"})," tag's block, which could contain any number of other tags and output statements. Every block tag is expected to leave the stream with it's \"end\" tag as the current token."]}),"\n",(0,s.jsxs)(n.p,{children:["Note that ",(0,s.jsx)(n.code,{children:"parseExpression"})," and ",(0,s.jsx)(n.code,{children:"parseArgument"})," are an implementation detail and not part of the ",(0,s.jsx)(n.a,{href:"/liquidscript/api/interfaces/Tag",children:(0,s.jsx)(n.code,{children:"Tag"})})," interface."]}),"\n",(0,s.jsxs)(r.A,{groupId:"js-ts",children:[(0,s.jsx)(i.A,{value:"js",label:"JavaScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="with_tag.js (continued)"',children:"class WithTag {\n  parse(stream, environment) {\n    const token = stream.next();\n    stream.expect(tokens.TOKEN_EXPRESSION);\n    const args = this.parseExpression(stream.current);\n    stream.next();\n    const block = environment.parser.parseBlock(stream, END_WITH_BLOCK, token);\n    stream.expectTag(TAG_ENDWITH);\n    return new WithNode(token, args, block);\n  }\n\n  parseExpression(expressionToken) {\n    const args = {};\n    const eStream = new expressions.ExpressionTokenStream(\n      tokenize(expressionToken.value, expressionToken.index)\n    );\n\n    while (eStream.current.kind !== tokens.TOKEN_EOF) {\n      const [key, expr] = this.parseArgument(eStream);\n      args[key] = expr;\n      // Eat comma.\n      if (eStream.current.kind === expressions.TOKEN_COMMA) eStream.next();\n    }\n\n    return args;\n  }\n\n  parseArgument(eStream) {\n    const key = expressions.parseUnchainedIdentifier(eStream).toString();\n    eStream.next();\n    eStream.expect(expressions.TOKEN_COLON);\n    eStream.next(); // Eat colon\n    const val = expressions.filtered.parseObject(eStream);\n    eStream.next();\n    return [key, val];\n  }\n}\n\n// ...\n"})})}),(0,s.jsx)(i.A,{value:"ts",label:"TypeScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="with_tag.ts (continued)"',children:"class WithTag implements Tag {\n  public parse(stream: tokens.TokenStream, environment: Environment): Node {\n    const token = stream.next();\n    stream.expect(tokens.TOKEN_EXPRESSION);\n    const args = this.parseExpression(stream.current);\n    stream.next();\n    const block = environment.parser.parseBlock(stream, END_WITH_BLOCK, token);\n    stream.expectTag(TAG_ENDWITH);\n    return new WithNode(token, args, block);\n  }\n\n  protected parseExpression(expressionToken: tokens.Token): Arguments {\n    const args: Arguments = {};\n    const eStream = new expressions.ExpressionTokenStream(\n      tokenize(expressionToken.value, expressionToken.index)\n    );\n\n    while (eStream.current.kind !== tokens.TOKEN_EOF) {\n      const [key, expr] = this.parseArgument(eStream);\n      args[key] = expr;\n      // Eat comma.\n      if (eStream.current.kind === expressions.TOKEN_COMMA) eStream.next();\n    }\n\n    return args;\n  }\n\n  protected parseArgument(\n    eStream: expressions.ExpressionTokenStream\n  ): [string, Expression] {\n    const key = expressions.parseUnchainedIdentifier(eStream).toString();\n    eStream.next();\n    eStream.expect(expressions.TOKEN_COLON);\n    eStream.next(); // Eat colon\n    const val = expressions.filtered.parseObject(eStream);\n    eStream.next();\n    return [key, val];\n  }\n}\n\n// ...\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"example-node",children:"Example Node"}),"\n",(0,s.jsxs)(n.p,{children:["Every ",(0,s.jsx)(n.a,{href:"/liquidscript/api/interfaces/Node",children:(0,s.jsx)(n.code,{children:"Node"})})," is required to implement synchronous and asynchronous versions of a ",(0,s.jsx)(n.a,{href:"/liquidscript/api/interfaces/Node#render",children:(0,s.jsx)(n.code,{children:"render"})})," method. By referencing its ",(0,s.jsx)(n.a,{href:"/liquidscript/api/interfaces/Expression",children:(0,s.jsx)(n.code,{children:"Expressions"})})," and the active ",(0,s.jsx)(n.a,{href:"/liquidscript/api/classes/RenderContext",children:"render context"}),", the ",(0,s.jsx)(n.code,{children:"render"})," method is responsible for writing text to the ",(0,s.jsx)(n.a,{href:"/liquidscript/api/interfaces/RenderStream",children:"output stream"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Our ",(0,s.jsx)(n.code,{children:"WithNode"})," simply evaluates each of its arguments and uses the results to extend the scope of the active render context before rendering its ",(0,s.jsx)(n.a,{href:"/liquidscript/api/classes/BlockNode",children:"block"}),"."]}),"\n",(0,s.jsxs)(r.A,{groupId:"js-ts",children:[(0,s.jsx)(i.A,{value:"js",label:"JavaScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="with_tag.js (continued)"',children:"class WithNode {\n  constructor(token, args, block) {\n    this.token = token;\n    this.args = args;\n    this.block = block;\n  }\n\n  async render(context, out) {\n    const scope = {};\n    for (const [key, value] of Object.entries(this.args)) {\n      scope[key] = await value.evaluate(context);\n    }\n    await context.extend(scope, () => this.block.render(context, out));\n  }\n\n  renderSync(context, out) {\n    const scope = Object.fromEntries(\n      Object.entries(this.args).map(([key, value]) => [\n        key,\n        value.evaluateSync(context),\n      ])\n    );\n    context.extendSync(scope, () => this.block.renderSync(context, out));\n  }\n\n  children() {\n    return [{ node: this.block }];\n  }\n}\n"})})}),(0,s.jsx)(i.A,{value:"ts",label:"TypeScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="with_tag.ts (continued)"',children:"class WithNode implements Node {\n  constructor(\n    readonly token: tokens.Token,\n    readonly args: Arguments,\n    readonly block: BlockNode\n  ) {}\n\n  async render(context: RenderContext, out: RenderStream): Promise<void> {\n    const scope: ContextScope = {};\n    for (const [key, value] of Object.entries(this.args)) {\n      scope[key] = await value.evaluate(context);\n    }\n    await context.extend(scope, () => this.block.render(context, out));\n  }\n\n  renderSync(context: RenderContext, out: RenderStream): void {\n    const scope: ContextScope = Object.fromEntries(\n      Object.entries(this.args).map(([key, value]) => [\n        key,\n        value.evaluateSync(context),\n      ])\n    );\n    context.extendSync(scope, () => this.block.renderSync(context, out));\n  }\n\n  children(): Node[] {\n    return [{ node: this.block }];\n  }\n}\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"example-tag-usage",children:"Example Tag Usage"}),"\n",(0,s.jsxs)(n.p,{children:["If the above tag implementation is exported from a module called ",(0,s.jsx)(n.code,{children:"with_tag.js"})," (or ",(0,s.jsx)(n.code,{children:"ts"}),"), we can import and register the tag with a LiquidScript ",(0,s.jsx)(n.a,{href:"/liquidscript/api/classes/Environment",children:(0,s.jsx)(n.code,{children:"Environment"})}),", then use ",(0,s.jsx)(n.code,{children:"{% with %}"})," in templates rendered from that environment."]}),"\n",(0,s.jsxs)(n.p,{children:["The first argument of ",(0,s.jsx)(n.a,{href:"/liquidscript/api/classes/Environment#addtag",children:(0,s.jsx)(n.code,{children:"addTag()"})})," is the tag's name, as used by template authors. The second argument is our object implementing the ",(0,s.jsx)(n.code,{children:"Tag"})," interface."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import { Environment } from "liquidscript";\nimport { WithTag } from "./with_tag";\n\nconst env = new Environment();\nenv.addTag("with", new WithTag());\n\nconst template = env.fromString(`\n{% with greeting: \'Hello\', name: \'Sally\' %}\n  {{ greeting }}, {{ name }}!\n{% endwith %}\n`);\n\nconsole.log(template.renderSync());\n// Hello, Sally!\n'})}),"\n",(0,s.jsx)(n.h2,{id:"replace-a-tag",children:"Replace a Tag"}),"\n",(0,s.jsxs)(n.p,{children:["If given the name of an existing tag, ",(0,s.jsx)(n.a,{href:"/liquidscript/api/classes/Environment#addtag",children:(0,s.jsx)(n.code,{children:"Environment.addTag()"})})," will replace it without warning. For example, the extra ",(0,s.jsx)(n.a,{href:"/liquidscript/extra/tags#if-not",children:'"if not" tag'}),", which adds support for negating expressions with ",(0,s.jsx)(n.code,{children:"not"})," and grouping terms with parentheses, is a drop-in replacement for the standard ",(0,s.jsx)(n.a,{href:"/liquidscript/language/tags#if",children:(0,s.jsx)(n.code,{children:"if"})})," tag."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import { Environment, extra } from "liquidscript";\n\nconst env = new Environment();\nenv.addTag("if", new extra.tags.IfNotTag());\n'})}),"\n",(0,s.jsx)(n.h2,{id:"remove-a-tag",children:"Remove a Tag"}),"\n",(0,s.jsxs)(n.p,{children:["Remove a tag by deleting it from ",(0,s.jsx)(n.a,{href:"/liquidscript/api/classes/Environment#tags",children:(0,s.jsx)(n.code,{children:"Environment.tags"})}),". It's a plain object mapping tag names to ",(0,s.jsx)(n.code,{children:"Tag"})," objects. This example removes the little known ",(0,s.jsx)(n.a,{href:"/liquidscript/language/tags#ifchanged",children:(0,s.jsx)(n.code,{children:"ifchanged"})})," tag, making it unavailable to templates rendered from the environment."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'import { Environment } from "liquidscript";\n\nconst env = new Environment();\ndelete env.tags.ifchanged;\n'})}),"\n",(0,s.jsx)(n.h2,{id:"jekyll-style-include-example",children:"Jekyll Style Include Example"}),"\n",(0,s.jsxs)(n.p,{children:["This example implements an ",(0,s.jsx)(n.code,{children:"{% include %}"})," tag, as found in ",(0,s.jsx)(n.a,{href:"https://jekyllrb.com/",children:"Jekyll"}),". Unlike the ",(0,s.jsxs)(n.a,{href:"/liquidscript/language/tags#include",children:["standard ",(0,s.jsx)(n.code,{children:"include"})," tag"]}),", this implementation expects either the name of the template without quotes (",(0,s.jsx)(n.code,{children:"my_template.liquid"}),"), or a fully formed output statement (",(0,s.jsx)(n.code,{children:"{{ some_variable }}"}),") that resolves to a string. Additionally, key/value arguments should be separated by ",(0,s.jsx)(n.code,{children:"="})," rather than ",(0,s.jsx)(n.code,{children:":"}),", and those arguments are put into an ",(0,s.jsx)(n.code,{children:"include"})," namespace rather than merging them into the existing scope."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.a,{href:"/liquidscript/guides/custom-loaders#loading-sections-and-snippets",children:"custom template loader"})," would also be needed to mimic Jekyll's folder structure."]})}),"\n",(0,s.jsxs)(r.A,{groupId:"js-ts",children:[(0,s.jsx)(i.A,{value:"js",label:"JavaScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",metastring:'title="jekyll_include_tag.mjs"',children:'import { StringLiteral, expressions, tokens } from "liquidscript";\n\nconst RE_VARIABLE_SYNTAX =\n  /^\\s*\\{\\{\\s*(?<stmt>[\\w\\-.]+\\s*(?:\\|.*)?)\\}\\}\\s*(?<args>.*)$/ds;\n\nclass JekyllIncludeTag {\n  parse(stream) {\n    const token = stream.next();\n    stream.expect(tokens.TOKEN_EXPRESSION);\n\n    // An expression that evaluates to the template name\n    let templateNameExpression;\n    // An expression token stream including argument tokens only.\n    let argStream;\n\n    const match = stream.current.value.match(RE_VARIABLE_SYNTAX);\n    if (match) {\n      templateNameExpression = expressions.filtered.parse(match.groups.stmt);\n      argStream = new expressions.ExpressionTokenStream(\n        expressions.arguments.tokenize(\n          match.groups.args,\n          stream.current.index + match.indices.groups.args[0]\n        )\n      );\n    } else {\n      const [name, args] = stream.current.value.trim().split(/\\s(.*)/s);\n      templateNameExpression = new StringLiteral(name);\n      argStream = new expressions.ExpressionTokenStream(\n        expressions.arguments.tokenize(args, stream.current.index + name.length)\n      );\n    }\n\n    // Key/value pairs, separated by commas, with `=` between each key and\n    // it\'s corresponding value.\n    const args = expressions.arguments.parseArguments(\n      argStream,\n      expressions.TOKEN_ASSIGN\n    );\n\n    return new JekyllIncludeNode(token, templateNameExpression, args);\n  }\n}\n\nclass JekyllIncludeNode {\n  constructor(token, templateName, args) {\n    this.token = token;\n    this.templateName = templateName;\n    this.args = args;\n  }\n\n  async render(context, out) {\n    // Resolve the template name. It could be a variable that resolves to a\n    // string or a string literal.\n    const templateName = await this.templateName.evaluate(context);\n\n    // Load the template. We tag it with "include" so the template loader\n    // knows what tag is asking for a template.\n    const template = await context.getTemplate(templateName, {\n      tag: "include",\n    });\n\n    // Arguments go into an `include` namespace.\n    const includeScope = {};\n    for (const [key, value] of Object.entries(this.args)) {\n      includeScope[key] = await value.evaluate(context);\n    }\n\n    await context.extend({ include: includeScope }, async () => {\n      await template.renderWithContext(context, out, false, true);\n    });\n  }\n\n  renderSync(context, out) {\n    const templateName = this.templateName.evaluateSync(context);\n    const template = context.getTemplateSync(templateName, { tag: "include" });\n\n    const includeScope = {};\n    for (const [key, value] of Object.entries(this.args)) {\n      includeScope[key] = value.evaluateSync(context);\n    }\n\n    context.extendSync({ include: includeScope }, () => {\n      template.renderWithContextSync(context, out, false, true);\n    });\n  }\n}\n'})})}),(0,s.jsx)(i.A,{value:"ts",label:"TypeScript",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:'title="jekyll_include_tag.ts"',children:'import {\n  ContextScope,\n  Expression,\n  expressions,\n  LiquidTypeError,\n  Node,\n  object,\n  RenderContext,\n  RenderStream,\n  StringLiteral,\n  tokens,\n  Tag,\n} from "liquidscript";\n\nconst RE_VARIABLE_SYNTAX =\n  /^\\s*\\{\\{\\s*(?<stmt>[\\w\\-.]+\\s*(?:\\|.*)?)\\}\\}\\s*(?<args>.*)$/ds;\n\n/**\n * The match object we expect back from our variable syntax regular expression.\n */\ninterface VariableSyntaxMatch {\n  groups: { stmt: string; args: string };\n  indices: { groups: { stmt: number[]; args: number[] } };\n}\n\n/**\n * A type predicate for the `VariableSyntaxMatch` interface.\n */\nfunction isVariableSyntaxMatch(match: unknown): match is VariableSyntaxMatch {\n  return match !== null;\n}\n\nclass JekyllIncludeTag implements Tag {\n  parse(stream: tokens.TokenStream) {\n    const token = stream.next();\n    stream.expect(tokens.TOKEN_EXPRESSION);\n\n    // An expression that evaluates to the template name.\n    let templateNameExpression;\n    // An expression token stream including argument tokens only.\n    let argStream;\n\n    const match = stream.current.value.match(RE_VARIABLE_SYNTAX);\n    if (isVariableSyntaxMatch(match)) {\n      templateNameExpression = expressions.filtered.parse(match.groups.stmt);\n      argStream = new expressions.ExpressionTokenStream(\n        expressions.arguments.tokenize(\n          match.groups.args,\n          stream.current.index + match.indices.groups.args[0]\n        )\n      );\n    } else {\n      const [name, args] = stream.current.value.trim().split(/\\s(.*)/s);\n      templateNameExpression = new StringLiteral(name);\n      argStream = new expressions.ExpressionTokenStream(\n        expressions.arguments.tokenize(args, stream.current.index + name.length)\n      );\n    }\n\n    // Key/value pairs, separated by commas, with `=` between each key and\n    // it\'s corresponding value.\n    const args = expressions.arguments.parseArguments(\n      argStream,\n      expressions.TOKEN_ASSIGN\n    );\n\n    return new JekyllIncludeNode(token, templateNameExpression, args);\n  }\n}\n\nclass JekyllIncludeNode implements Node {\n  constructor(\n    readonly token: tokens.Token,\n    readonly templateName: Expression,\n    readonly args: expressions.arguments.Arguments\n  ) {}\n\n  async render(context: RenderContext, out: RenderStream) {\n    // Resolve the template name. It could be a variable that resolves to a\n    // string or a string literal.\n    const templateName = await this.templateName.evaluate(context);\n\n    if (!object.isString(templateName))\n      throw new LiquidTypeError(\n        `invalid template name, expected a string, found ${templateName}`,\n        this.token\n      );\n\n    // Load the template. We tag it with "include" so the template loader\n    // knows what tag is asking for a template.\n    const template = await context.getTemplate(templateName, {\n      tag: "include",\n    });\n\n    // Arguments go into an `include` namespace.\n    const includeScope: ContextScope = {};\n    for (const [key, value] of Object.entries(this.args)) {\n      includeScope[key] = await value.evaluate(context);\n    }\n\n    await context.extend({ include: includeScope }, async () => {\n      await template.renderWithContext(context, out, false, true);\n    });\n  }\n\n  renderSync(context: RenderContext, out: RenderStream) {\n    const templateName = this.templateName.evaluateSync(context);\n\n    if (!object.isString(templateName))\n      throw new LiquidTypeError(\n        `invalid template name, expected a string, found ${templateName}`,\n        this.token\n      );\n\n    const template = context.getTemplateSync(templateName, { tag: "include" });\n\n    const includeScope: ContextScope = {};\n    for (const [key, value] of Object.entries(this.args)) {\n      includeScope[key] = value.evaluateSync(context);\n    }\n\n    context.extendSync({ include: includeScope }, () => {\n      template.renderWithContextSync(context, out, false, true);\n    });\n  }\n}\n'})})})]})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>i});t(96540);var s=t(34164);const a={tabItem:"tabItem_Ymn6"};var r=t(74848);function i(e){let{children:n,hidden:t,className:i}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.A)(a.tabItem,i),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>y});var s=t(96540),a=t(34164),r=t(23104),i=t(56347),o=t(205),l=t(57485),c=t(31682),d=t(70679);function p(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:a}}=e;return{value:n,label:t,attributes:s,default:a}}))}(t);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const a=(0,i.W6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(r),(0,s.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function x(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,r=u(e),[i,l]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:r}))),[c,p]=h({queryString:t,groupId:a}),[x,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,d.Dv)(t);return[a,(0,s.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:a}),f=(()=>{const e=c??x;return m({value:e,tabValues:r})?e:null})();(0,o.A)((()=>{f&&l(f)}),[f]);return{selectedValue:i,selectValue:(0,s.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),g(e)}),[p,g,r]),tabValues:r}}var g=t(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=t(74848);function v(e){let{className:n,block:t,selectedValue:s,selectValue:i,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),d=e=>{const n=e.currentTarget,t=l.indexOf(n),a=o[t].value;a!==s&&(c(n),i(a))},p=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>l.push(e),onKeyDown:p,onClick:d,...r,className:(0,a.A)("tabs__item",f.tabItem,r?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function k(e){let{lazy:n,children:t,selectedValue:a}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==a})))})}function b(e){const n=x(e);return(0,j.jsxs)("div",{className:(0,a.A)("tabs-container",f.tabList),children:[(0,j.jsx)(v,{...n,...e}),(0,j.jsx)(k,{...n,...e})]})}function y(e){const n=(0,g.A)();return(0,j.jsx)(b,{...e,children:p(e.children)},String(n))}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(96540);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);