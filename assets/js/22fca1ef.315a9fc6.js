"use strict";(self.webpackChunkliquidscript_docs=self.webpackChunkliquidscript_docs||[]).push([[1884],{9494:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(6687);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=l(n),u=r,g=d["".concat(p,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(g,s(s({ref:t},c),{},{components:n})):a.createElement(g,s({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4296:function(e,t,n){n.d(t,{Z:function(){return r}});var a=n(6687);function r(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},9747:function(e,t,n){n.d(t,{Z:function(){return c}});var a=n(9149),r=n(6687),i=n(4428),s=n(6749),o=n(6355),p="tabItem_xFFf";function l(e){var t,n,i,l=e.lazy,c=e.block,m=e.defaultValue,d=e.values,u=e.groupId,g=e.className,k=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=d?d:k.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),f=(0,s.lx)(h,(function(e,t){return e.value===t.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===m?m:null!=(t=null!=m?m:null==(n=k.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(i=k[0])?void 0:i.props.value;if(null!==v&&!h.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,s.UB)(),x=N.tabGroupChoices,b=N.setTabGroupChoices,T=(0,r.useState)(v),w=T[0],y=T[1],E=[],S=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=u){var C=x[u];null!=C&&C!==w&&h.some((function(e){return e.value===C}))&&y(C)}var O=function(e){var t=e.currentTarget,n=E.indexOf(t),a=h[n].value;a!==w&&(S(t),y(a),null!=u&&b(u,a))},j=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=E.indexOf(e.currentTarget)+1;n=E[a]||E[0];break;case"ArrowLeft":var r=E.indexOf(e.currentTarget)-1;n=E[r]||E[E.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":c},g)},h.map((function(e){var t=e.value,n=e.label,i=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:function(e){return E.push(e)},onKeyDown:j,onFocus:O,onClick:O},i,{className:(0,o.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":w===t})}),null!=n?n:t)}))),l?(0,r.cloneElement)(k.filter((function(e){return e.props.value===w}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},k.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})}))))}function c(e){var t=(0,i.Z)();return r.createElement(l,(0,a.Z)({key:String(t)},e))}},6194:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return k},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return u}});var a=n(9149),r=n(8332),i=(n(6687),n(9494)),s=n(9747),o=n(4296),p=["components"],l={},c="Custom Tags",m={unversionedId:"guides/custom-tags",id:"guides/custom-tags",title:"Custom Tags",description:"Liquid tags are defined by a pair of JavaScript objects. One implementing the Tag interface and one implementing the Node interface. The parse method of a Tag is responsible for parsing a tag's expression and returning a Node, which will be added to a template's parse tree.",source:"@site/docs/guides/custom-tags.mdx",sourceDirName:"guides",slug:"/guides/custom-tags",permalink:"/liquidscript/guides/custom-tags",editUrl:"https://github.com/jg-rp/liquidscript/tree/docs/docs/guides/custom-tags.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Custom Filters",permalink:"/liquidscript/guides/custom-filters"},next:{title:"Custom Loaders",permalink:"/liquidscript/guides/custom-loaders"}},d={},u=[{value:"Add a Tag",id:"add-a-tag",level:2},{value:"Example Tag",id:"example-tag",level:3},{value:"Example Node",id:"example-node",level:3},{value:"Example Tag Usage",id:"example-tag-usage",level:3},{value:"Replace a Tag",id:"replace-a-tag",level:2},{value:"Remove a Tag",id:"remove-a-tag",level:2}],g={toc:u};function k(e){var t=e.components,n=(0,r.Z)(e,p);return(0,i.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"custom-tags"},"Custom Tags"),(0,i.kt)("p",null,"Liquid ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/language/introduction#tags"},"tags")," are defined by a pair of JavaScript objects. One implementing the ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Tag"},(0,i.kt)("inlineCode",{parentName:"a"},"Tag"))," interface and one implementing the ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Node"},(0,i.kt)("inlineCode",{parentName:"a"},"Node"))," interface. The ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Node"},(0,i.kt)("inlineCode",{parentName:"a"},"parse"))," method of a ",(0,i.kt)("inlineCode",{parentName:"p"},"Tag")," is responsible for parsing a tag's expression and returning a ",(0,i.kt)("inlineCode",{parentName:"p"},"Node"),", which will be added to a template's parse tree."),(0,i.kt)("p",null,"You can add to, remove or modify Liquid's built-in tags to suit your needs by registering tags with an Environment, then rendering your templates from that environment."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"All built-in tags are implemented this way, so have a look in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquidscript/tree/main/src/builtin/tags"},"src/builtin/tags/")," for more examples."))),(0,i.kt)("h2",{id:"add-a-tag"},"Add a Tag"),(0,i.kt)("p",null,"Taking inspiration from ",(0,i.kt)("a",{parentName:"p",href:"https://docs.djangoproject.com/en/3.2/ref/templates/builtins/#with"},"Django's Template Language"),", lets implement a ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," tag, which extends the local scope for the duration of its block. Our ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," tag's expressions consists of one or more named arguments separated by commas. Each argument is a variable name, followed by a colon, then a Liquid keyword, string, integer, float, range expression or identifier."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain"},"{% with <identifier>: <object> [, <identifier>: object ... ] %}\n  <literal,statement,tag> ...\n{% endwith %}\n")),(0,i.kt)("p",null,"This implementation keeps any variables set inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," block (using ",(0,i.kt)("inlineCode",{parentName:"p"},"assign")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"capture"),") alive after the block has been rendered."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"We use ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes"},"class syntax")," here for both Javascript and TypeScript examples. Constructor functions and objects with function valued properties would work equally as well."))),(0,i.kt)("h3",{id:"example-tag"},"Example Tag"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Tag"},(0,i.kt)("inlineCode",{parentName:"a"},"Tag"))," is free to parse its expression any way it chooses. Built in tags use regular expressions to ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator"},"generate")," a ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/expressions.ExpressionTokenStream"},"stream of tokens"),", then step through those tokens yielding ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Expression"},(0,i.kt)("inlineCode",{parentName:"a"},"Expression"))," objects."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Despite their names, ",(0,i.kt)("inlineCode",{parentName:"p"},"ExpressionTokenStream"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"TokenStream")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"RenderStream")," do not implement a Node.js stream or a web stream."))),(0,i.kt)("p",null,"Here we'll reuse the tokenizer from the ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#include"},(0,i.kt)("inlineCode",{parentName:"a"},"include"))," tag, as it, too, accepts any number of comma separated named arguments. We will, however, supply a different set of allowed keywords to the tokenizer function."),(0,i.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="with_tag.js"',title:'"with_tag.js"'},'import { expressions, tokens } from "liquidscript";\n\n// Reuse the `include` tokenizer.\nconst tokenize = expressions.include.makeTokenizer(\n  expressions.include.RE,\n  new Set([\n    expressions.TOKEN_TRUE,\n    expressions.TOKEN_FALSE,\n    expressions.TOKEN_NIL,\n    expressions.TOKEN_NULL,\n  ])\n);\n\n// Indicates the end of a `with` block.\nconst TAG_ENDWITH = "endwith";\nconst END_WITH_BLOCK = new Set([TAG_ENDWITH]);\n\n// ...\n'))),(0,i.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="with_tag.ts"',title:'"with_tag.ts"'},'import {\n  Environment,\n  Expression,\n  Tag,\n  expressions,\n  tokens,\n  Node,\n  BlockNode,\n  RenderContext,\n  RenderStream,\n  ContextScope,\n} from "liquidscript";\n\n// Reuse the `include` tokenizer.\nconst tokenize = expressions.include.makeTokenizer(\n  expressions.include.RE,\n  new Set([\n    expressions.TOKEN_TRUE,\n    expressions.TOKEN_FALSE,\n    expressions.TOKEN_NIL,\n    expressions.TOKEN_NULL,\n  ])\n);\n\n// Indicates the end of a `with` block.\nconst TAG_ENDWITH = "endwith";\nconst END_WITH_BLOCK = new Set([TAG_ENDWITH]);\n\ntype Arguments = {\n  [index: string]: Expression;\n};\n\n// ...\n')))),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Tag#parse"},(0,i.kt)("inlineCode",{parentName:"a"},"parse()"))," method of a ",(0,i.kt)("inlineCode",{parentName:"p"},"Tag")," object receives a ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/tokens.TemplateTokenStream"},(0,i.kt)("inlineCode",{parentName:"a"},"TokenStream"))," and a reference to the active ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment"},(0,i.kt)("inlineCode",{parentName:"a"},"Environment")),". This stream of ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/namespaces/tokens#variables"},"tokens")," includes template literals, output statements, tags and unparsed tag expressions."),(0,i.kt)("p",null,"The current token in the stream will always be of the type ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/namespaces/tokens#token_tag"},(0,i.kt)("inlineCode",{parentName:"a"},"TOKEN_TAG")),", representing the start of the tag we're parsing. By convention, this token is used to populate the ",(0,i.kt)("inlineCode",{parentName:"p"},"token")," property of the associated ",(0,i.kt)("inlineCode",{parentName:"p"},"Node")," object. If the tag has an expression (anything after the tag's name), it will immediately follow the ",(0,i.kt)("inlineCode",{parentName:"p"},"TOKEN_TAG")," in the stream as a ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/namespaces/tokens#token_expression"},(0,i.kt)("inlineCode",{parentName:"a"},"TOKEN_EXPRESSION")),". In the example bellow we use ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/tokens.TokenStream#expect"},(0,i.kt)("inlineCode",{parentName:"a"},"TokenStream.expect()"))," to confirm that an expression was provided."),(0,i.kt)("p",null,"We use ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Parser#parseblock"},(0,i.kt)("inlineCode",{parentName:"a"},"parseBlock()"))," from the active environment to parse our ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," tag's block, which could contain any number of other tags and output statements. Every block tag is expected to leave the stream with it's \"end\" tag as the current token."),(0,i.kt)("p",null,"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"parseExpression")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"parseArgument")," are an implementation detail and not part of the ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Tag"},(0,i.kt)("inlineCode",{parentName:"a"},"Tag"))," interface."),(0,i.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="with_tag.js (continued)"',title:'"with_tag.js','(continued)"':!0},"class WithTag {\n  parse(stream, environment) {\n    const token = stream.next();\n    stream.expect(tokens.TOKEN_EXPRESSION);\n    const args = this.parseExpression(stream.current);\n    stream.next();\n    const block = environment.parser.parseBlock(stream, END_WITH_BLOCK, token);\n    stream.expectTag(TAG_ENDWITH);\n    return new WithNode(token, args, block);\n  }\n\n  parseExpression(expressionToken) {\n    const args = {};\n    const eStream = new expressions.ExpressionTokenStream(\n      tokenize(expressionToken.value, expressionToken.index)\n    );\n\n    while (eStream.current.kind !== tokens.TOKEN_EOF) {\n      const [key, expr] = this.parseArgument(eStream);\n      args[key] = expr;\n      // Eat comma.\n      if (eStream.current.kind === expressions.TOKEN_COMMA) eStream.next();\n    }\n\n    return args;\n  }\n\n  parseArgument(eStream) {\n    const key = expressions.parseUnchainedIdentifier(eStream).toString();\n    eStream.next();\n    eStream.expect(expressions.TOKEN_COLON);\n    eStream.next(); // Eat colon\n    const val = expressions.filtered.parseObject(eStream);\n    eStream.next();\n    return [key, val];\n  }\n}\n\n// ...\n"))),(0,i.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="with_tag.ts (continued)"',title:'"with_tag.ts','(continued)"':!0},"class WithTag implements Tag {\n  public parse(stream: tokens.TokenStream, environment: Environment): Node {\n    const token = stream.next();\n    stream.expect(tokens.TOKEN_EXPRESSION);\n    const args = this.parseExpression(stream.current);\n    stream.next();\n    const block = environment.parser.parseBlock(stream, END_WITH_BLOCK, token);\n    stream.expectTag(TAG_ENDWITH);\n    return new WithNode(token, args, block);\n  }\n\n  protected parseExpression(expressionToken: tokens.Token): Arguments {\n    const args: Arguments = {};\n    const eStream = new expressions.ExpressionTokenStream(\n      tokenize(expressionToken.value, expressionToken.index)\n    );\n\n    while (eStream.current.kind !== tokens.TOKEN_EOF) {\n      const [key, expr] = this.parseArgument(eStream);\n      args[key] = expr;\n      // Eat comma.\n      if (eStream.current.kind === expressions.TOKEN_COMMA) eStream.next();\n    }\n\n    return args;\n  }\n\n  protected parseArgument(\n    eStream: expressions.ExpressionTokenStream\n  ): [string, Expression] {\n    const key = expressions.parseUnchainedIdentifier(eStream).toString();\n    eStream.next();\n    eStream.expect(expressions.TOKEN_COLON);\n    eStream.next(); // Eat colon\n    const val = expressions.filtered.parseObject(eStream);\n    eStream.next();\n    return [key, val];\n  }\n}\n\n// ...\n")))),(0,i.kt)("h3",{id:"example-node"},"Example Node"),(0,i.kt)("p",null,"Every ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Node"},(0,i.kt)("inlineCode",{parentName:"a"},"Node"))," is required to implement synchronous and asynchronous versions of a ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Node#render"},(0,i.kt)("inlineCode",{parentName:"a"},"render"))," method. By referencing its ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Expression"},(0,i.kt)("inlineCode",{parentName:"a"},"Expressions"))," and the active ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/RenderContext"},"render context"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"render")," method is responsible for writing text to the ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/RenderStream"},"output stream"),"."),(0,i.kt)("p",null,"Our ",(0,i.kt)("inlineCode",{parentName:"p"},"WithNode")," simply evaluates each of its arguments and uses the results to extend the scope of the active render context before rendering its ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/BlockNode"},"block"),"."),(0,i.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="with_tag.js (continued)"',title:'"with_tag.js','(continued)"':!0},"class WithNode {\n  constructor(token, args, block) {\n    this.token = token;\n    this.args = args;\n    this.block = block;\n  }\n\n  async render(context, out) {\n    const scope = {};\n    for (const [key, value] of Object.entries(this.args)) {\n      scope[key] = await value.evaluate(context);\n    }\n    await context.extend(scope, () => this.block.render(context, out));\n  }\n\n  renderSync(context, out) {\n    const scope = Object.fromEntries(\n      Object.entries(this.args).map(([key, value]) => [\n        key,\n        value.evaluateSync(context),\n      ])\n    );\n    context.extendSync(scope, () => this.block.renderSync(context, out));\n  }\n\n  children() {\n    return [{ node: this.block }];\n  }\n}\n"))),(0,i.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="with_tag.ts (continued)"',title:'"with_tag.ts','(continued)"':!0},"class WithNode implements Node {\n  constructor(\n    readonly token: tokens.Token,\n    readonly args: Arguments,\n    readonly block: BlockNode\n  ) {}\n\n  async render(context: RenderContext, out: RenderStream): Promise<void> {\n    const scope: ContextScope = {};\n    for (const [key, value] of Object.entries(this.args)) {\n      scope[key] = await value.evaluate(context);\n    }\n    await context.extend(scope, () => this.block.render(context, out));\n  }\n\n  renderSync(context: RenderContext, out: RenderStream): void {\n    const scope: ContextScope = Object.fromEntries(\n      Object.entries(this.args).map(([key, value]) => [\n        key,\n        value.evaluateSync(context),\n      ])\n    );\n    context.extendSync(scope, () => this.block.renderSync(context, out));\n  }\n\n  children(): Node[] {\n    return [{ node: this.block }];\n  }\n}\n")))),(0,i.kt)("h3",{id:"example-tag-usage"},"Example Tag Usage"),(0,i.kt)("p",null,"If the above tag implementation is exported from a module called ",(0,i.kt)("inlineCode",{parentName:"p"},"with_tag.js")," (or ",(0,i.kt)("inlineCode",{parentName:"p"},"ts"),"), we can import and register the tag with a LiquidScript ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment"},(0,i.kt)("inlineCode",{parentName:"a"},"Environment")),", then use ",(0,i.kt)("inlineCode",{parentName:"p"},"{% with %}")," in templates rendered from that environment."),(0,i.kt)("p",null,"The first argument of ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment#addtag"},(0,i.kt)("inlineCode",{parentName:"a"},"addTag()"))," is the tag's name, as used by template authors. The second argument is our object implementing the ",(0,i.kt)("inlineCode",{parentName:"p"},"Tag")," interface."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment } from "liquidscript";\nimport { WithTag } from "./with_tag";\n\nconst env = new Environment();\nenv.addTag("with", new WithTag());\n\nconst template = env.fromString(`\n{% with greeting: \'Hello\', name: \'Sally\' %}\n  {{ greeting }}, {{ name }}!\n{% endwith %}\n`);\n\nconsole.log(template.renderSync());\n// Hello, Sally!\n')),(0,i.kt)("h2",{id:"replace-a-tag"},"Replace a Tag"),(0,i.kt)("p",null,"If given the name of an existing tag, ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment#addtag"},(0,i.kt)("inlineCode",{parentName:"a"},"Environment.addTag()")),' will replace it without warning. For example, the extra "if not" tag, which adds support for negating expressions with ',(0,i.kt)("inlineCode",{parentName:"p"},"not")," and grouping terms with parentheses, is a drop-in replacement for the standard ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#if"},(0,i.kt)("inlineCode",{parentName:"a"},"if"))," tag."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The extra ",(0,i.kt)("inlineCode",{parentName:"p"},"IfNotTag")," has not yet been implemented, but will be."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment, extra } from "liquidscript";\n\nconst env = new Environment();\nenv.addTag("if", new extra.tags.IfNotTag());\n')),(0,i.kt)("h2",{id:"remove-a-tag"},"Remove a Tag"),(0,i.kt)("p",null,"Remove a tag by deleting it from ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment#tags"},(0,i.kt)("inlineCode",{parentName:"a"},"Environment.tags")),". It's a plain object mapping tag names to ",(0,i.kt)("inlineCode",{parentName:"p"},"Tag")," objects. This example removes the little known ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#ifchanged"},(0,i.kt)("inlineCode",{parentName:"a"},"ifchanged"))," tag, making it unavailable to templates rendered from the environment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment } from "liquidscript";\n\nconst env = new Environment();\ndelete env.tags.ifchanged;\n')))}k.isMDXComponent=!0}}]);