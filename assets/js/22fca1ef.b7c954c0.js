"use strict";(self.webpackChunkliquidscript_docs=self.webpackChunkliquidscript_docs||[]).push([[1884],{9494:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(6687);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,g=d["".concat(l,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(g,s(s({ref:t},c),{},{components:n})):a.createElement(g,s({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2145:function(e,t,n){n.d(t,{Z:function(){return s}});var a=n(6687),r=n(6355),i="tabItem_o8NL";function s(e){var t=e.children,n=e.hidden,s=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,s),hidden:n},t)}},5428:function(e,t,n){n.d(t,{Z:function(){return u}});var a=n(9853),r=n(6687),i=n(6355),s=n(87),o=n(6041),l=n(2784),p=n(125),c="tabList_lYTa",m="tabItem_ePyA";function d(e){var t,n,s=e.lazy,d=e.block,u=e.defaultValue,g=e.values,k=e.groupId,h=e.className,f=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),N=null!=g?g:f.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),v=(0,o.l)(N,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var x=null===u?u:null!=(t=null!=u?u:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?t:f[0].props.value;if(null!==x&&!N.some((function(e){return e.value===x})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+x+'" but none of its children has the corresponding value. Available values are: '+N.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,l.U)(),b=y.tabGroupChoices,T=y.setTabGroupChoices,w=(0,r.useState)(x),S=w[0],E=w[1],C=[],O=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=k){var j=b[k];null!=j&&j!==S&&N.some((function(e){return e.value===j}))&&E(j)}var _=function(e){var t=e.currentTarget,n=C.indexOf(t),a=N[n].value;a!==S&&(O(t),E(a),null!=k&&T(k,String(a)))},I=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,r=C.indexOf(e.currentTarget)+1;n=null!=(a=C[r])?a:C[0];break;case"ArrowLeft":var i,s=C.indexOf(e.currentTarget)-1;n=null!=(i=C[s])?i:C[C.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":d},h)},N.map((function(e){var t=e.value,n=e.label,s=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:S===t?0:-1,"aria-selected":S===t,key:t,ref:function(e){return C.push(e)},onKeyDown:I,onFocus:_,onClick:_},s,{className:(0,i.Z)("tabs__item",m,null==s?void 0:s.className,{"tabs__item--active":S===t})}),null!=n?n:t)}))),s?(0,r.cloneElement)(f.filter((function(e){return e.props.value===S}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==S})}))))}function u(e){var t=(0,s.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},2698:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return k},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return u}});var a=n(9853),r=n(5309),i=(n(6687),n(9494)),s=n(5428),o=n(2145),l=["components"],p={},c="Custom Tags",m={unversionedId:"guides/custom-tags",id:"guides/custom-tags",title:"Custom Tags",description:"Liquid tags are defined by a pair of JavaScript objects. One implementing the Tag interface and one implementing the Node interface. The parse method of a Tag is responsible for parsing a tag's expression and returning a Node, which will be added to a template's parse tree.",source:"@site/docs/guides/custom-tags.mdx",sourceDirName:"guides",slug:"/guides/custom-tags",permalink:"/liquidscript/guides/custom-tags",draft:!1,editUrl:"https://github.com/jg-rp/liquidscript/tree/docs/docs/guides/custom-tags.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Custom Filters",permalink:"/liquidscript/guides/custom-filters"},next:{title:"Custom Loaders",permalink:"/liquidscript/guides/custom-loaders"}},d={},u=[{value:"Add a Tag",id:"add-a-tag",level:2},{value:"Example Tag",id:"example-tag",level:3},{value:"Example Node",id:"example-node",level:3},{value:"Example Tag Usage",id:"example-tag-usage",level:3},{value:"Replace a Tag",id:"replace-a-tag",level:2},{value:"Remove a Tag",id:"remove-a-tag",level:2},{value:"Jekyll Style Include Example",id:"jekyll-style-include-example",level:2}],g={toc:u};function k(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"custom-tags"},"Custom Tags"),(0,i.kt)("p",null,"Liquid ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/language/introduction#tags"},"tags")," are defined by a pair of JavaScript objects. One implementing the ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Tag"},(0,i.kt)("inlineCode",{parentName:"a"},"Tag"))," interface and one implementing the ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Node"},(0,i.kt)("inlineCode",{parentName:"a"},"Node"))," interface. The ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Node"},(0,i.kt)("inlineCode",{parentName:"a"},"parse"))," method of a ",(0,i.kt)("inlineCode",{parentName:"p"},"Tag")," is responsible for parsing a tag's expression and returning a ",(0,i.kt)("inlineCode",{parentName:"p"},"Node"),", which will be added to a template's parse tree."),(0,i.kt)("p",null,"You can add to, remove or modify Liquid's built-in tags to suit your needs by registering tags with an Environment, then rendering your templates from that environment."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"All built-in tags are implemented this way, so have a look in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquidscript/tree/main/src/builtin/tags"},"src/builtin/tags/")," for more examples."))),(0,i.kt)("h2",{id:"add-a-tag"},"Add a Tag"),(0,i.kt)("p",null,"Taking inspiration from ",(0,i.kt)("a",{parentName:"p",href:"https://docs.djangoproject.com/en/3.2/ref/templates/builtins/#with"},"Django's Template Language"),", lets implement a ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," tag, which extends the local scope for the duration of its block. Our ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," tag's expressions consists of one or more named arguments separated by commas. Each argument is a variable name, followed by a colon, then a Liquid keyword, string, integer, float, range expression or identifier."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain"},"{% with <identifier>: <object> [, <identifier>: object ... ] %}\n  <literal,statement,tag> ...\n{% endwith %}\n")),(0,i.kt)("p",null,"This implementation keeps any variables set inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," block (using ",(0,i.kt)("inlineCode",{parentName:"p"},"assign")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"capture"),") alive after the block has been rendered."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"We use ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes"},"class syntax")," here for both JavaScript and TypeScript examples. Constructor functions and objects with function valued properties would work equally as well."))),(0,i.kt)("h3",{id:"example-tag"},"Example Tag"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Tag"},(0,i.kt)("inlineCode",{parentName:"a"},"Tag"))," is free to parse its expression any way it chooses. Built in tags use regular expressions to ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator"},"generate")," a ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/expressions.ExpressionTokenStream"},"stream of tokens"),", then step through those tokens yielding ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Expression"},(0,i.kt)("inlineCode",{parentName:"a"},"Expression"))," objects."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Despite their names, ",(0,i.kt)("inlineCode",{parentName:"p"},"ExpressionTokenStream"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"TokenStream")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"RenderStream")," do not implement a Node.js stream or a web stream."))),(0,i.kt)("p",null,"Here we'll reuse the tokenizer from the ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#include"},(0,i.kt)("inlineCode",{parentName:"a"},"include"))," tag, as it, too, accepts any number of comma separated named arguments. We will, however, supply a different set of allowed keywords to the tokenizer function."),(0,i.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="with_tag.js"',title:'"with_tag.js"'},'import { expressions, tokens } from "liquidscript";\n\n// Reuse the `include` tokenizer.\nconst tokenize = expressions.include.makeTokenizer(\n  expressions.include.RE,\n  new Set([\n    expressions.TOKEN_TRUE,\n    expressions.TOKEN_FALSE,\n    expressions.TOKEN_NIL,\n    expressions.TOKEN_NULL,\n  ])\n);\n\n// Indicates the end of a `with` block.\nconst TAG_ENDWITH = "endwith";\nconst END_WITH_BLOCK = new Set([TAG_ENDWITH]);\n\n// ...\n'))),(0,i.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="with_tag.ts"',title:'"with_tag.ts"'},'import {\n  Environment,\n  Expression,\n  Tag,\n  expressions,\n  tokens,\n  Node,\n  BlockNode,\n  RenderContext,\n  RenderStream,\n  ContextScope,\n} from "liquidscript";\n\n// Reuse the `include` tokenizer.\nconst tokenize = expressions.include.makeTokenizer(\n  expressions.include.RE,\n  new Set([\n    expressions.TOKEN_TRUE,\n    expressions.TOKEN_FALSE,\n    expressions.TOKEN_NIL,\n    expressions.TOKEN_NULL,\n  ])\n);\n\n// Indicates the end of a `with` block.\nconst TAG_ENDWITH = "endwith";\nconst END_WITH_BLOCK = new Set([TAG_ENDWITH]);\n\ntype Arguments = {\n  [index: string]: Expression;\n};\n\n// ...\n')))),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Tag#parse"},(0,i.kt)("inlineCode",{parentName:"a"},"parse()"))," method of a ",(0,i.kt)("inlineCode",{parentName:"p"},"Tag")," object receives a ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/tokens.TemplateTokenStream"},(0,i.kt)("inlineCode",{parentName:"a"},"TokenStream"))," and a reference to the active ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment"},(0,i.kt)("inlineCode",{parentName:"a"},"Environment")),". This stream of ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/namespaces/tokens#variables"},"tokens")," includes template literals, output statements, tags and unparsed tag expressions."),(0,i.kt)("p",null,"The current token in the stream will always be of the type ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/namespaces/tokens#token_tag"},(0,i.kt)("inlineCode",{parentName:"a"},"TOKEN_TAG")),", representing the start of the tag we're parsing. By convention, this token is used to populate the ",(0,i.kt)("inlineCode",{parentName:"p"},"token")," property of the associated ",(0,i.kt)("inlineCode",{parentName:"p"},"Node")," object. If the tag has an expression (anything after the tag's name), it will immediately follow the ",(0,i.kt)("inlineCode",{parentName:"p"},"TOKEN_TAG")," in the stream as a ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/namespaces/tokens#token_expression"},(0,i.kt)("inlineCode",{parentName:"a"},"TOKEN_EXPRESSION")),". In the example bellow we use ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/tokens.TokenStream#expect"},(0,i.kt)("inlineCode",{parentName:"a"},"TokenStream.expect()"))," to confirm that an expression was provided."),(0,i.kt)("p",null,"We use ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Parser#parseblock"},(0,i.kt)("inlineCode",{parentName:"a"},"parseBlock()"))," from the active environment to parse our ",(0,i.kt)("inlineCode",{parentName:"p"},"with")," tag's block, which could contain any number of other tags and output statements. Every block tag is expected to leave the stream with it's \"end\" tag as the current token."),(0,i.kt)("p",null,"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"parseExpression")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"parseArgument")," are an implementation detail and not part of the ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Tag"},(0,i.kt)("inlineCode",{parentName:"a"},"Tag"))," interface."),(0,i.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="with_tag.js (continued)"',title:'"with_tag.js','(continued)"':!0},"class WithTag {\n  parse(stream, environment) {\n    const token = stream.next();\n    stream.expect(tokens.TOKEN_EXPRESSION);\n    const args = this.parseExpression(stream.current);\n    stream.next();\n    const block = environment.parser.parseBlock(stream, END_WITH_BLOCK, token);\n    stream.expectTag(TAG_ENDWITH);\n    return new WithNode(token, args, block);\n  }\n\n  parseExpression(expressionToken) {\n    const args = {};\n    const eStream = new expressions.ExpressionTokenStream(\n      tokenize(expressionToken.value, expressionToken.index)\n    );\n\n    while (eStream.current.kind !== tokens.TOKEN_EOF) {\n      const [key, expr] = this.parseArgument(eStream);\n      args[key] = expr;\n      // Eat comma.\n      if (eStream.current.kind === expressions.TOKEN_COMMA) eStream.next();\n    }\n\n    return args;\n  }\n\n  parseArgument(eStream) {\n    const key = expressions.parseUnchainedIdentifier(eStream).toString();\n    eStream.next();\n    eStream.expect(expressions.TOKEN_COLON);\n    eStream.next(); // Eat colon\n    const val = expressions.filtered.parseObject(eStream);\n    eStream.next();\n    return [key, val];\n  }\n}\n\n// ...\n"))),(0,i.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="with_tag.ts (continued)"',title:'"with_tag.ts','(continued)"':!0},"class WithTag implements Tag {\n  public parse(stream: tokens.TokenStream, environment: Environment): Node {\n    const token = stream.next();\n    stream.expect(tokens.TOKEN_EXPRESSION);\n    const args = this.parseExpression(stream.current);\n    stream.next();\n    const block = environment.parser.parseBlock(stream, END_WITH_BLOCK, token);\n    stream.expectTag(TAG_ENDWITH);\n    return new WithNode(token, args, block);\n  }\n\n  protected parseExpression(expressionToken: tokens.Token): Arguments {\n    const args: Arguments = {};\n    const eStream = new expressions.ExpressionTokenStream(\n      tokenize(expressionToken.value, expressionToken.index)\n    );\n\n    while (eStream.current.kind !== tokens.TOKEN_EOF) {\n      const [key, expr] = this.parseArgument(eStream);\n      args[key] = expr;\n      // Eat comma.\n      if (eStream.current.kind === expressions.TOKEN_COMMA) eStream.next();\n    }\n\n    return args;\n  }\n\n  protected parseArgument(\n    eStream: expressions.ExpressionTokenStream\n  ): [string, Expression] {\n    const key = expressions.parseUnchainedIdentifier(eStream).toString();\n    eStream.next();\n    eStream.expect(expressions.TOKEN_COLON);\n    eStream.next(); // Eat colon\n    const val = expressions.filtered.parseObject(eStream);\n    eStream.next();\n    return [key, val];\n  }\n}\n\n// ...\n")))),(0,i.kt)("h3",{id:"example-node"},"Example Node"),(0,i.kt)("p",null,"Every ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Node"},(0,i.kt)("inlineCode",{parentName:"a"},"Node"))," is required to implement synchronous and asynchronous versions of a ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Node#render"},(0,i.kt)("inlineCode",{parentName:"a"},"render"))," method. By referencing its ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Expression"},(0,i.kt)("inlineCode",{parentName:"a"},"Expressions"))," and the active ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/RenderContext"},"render context"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"render")," method is responsible for writing text to the ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/RenderStream"},"output stream"),"."),(0,i.kt)("p",null,"Our ",(0,i.kt)("inlineCode",{parentName:"p"},"WithNode")," simply evaluates each of its arguments and uses the results to extend the scope of the active render context before rendering its ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/BlockNode"},"block"),"."),(0,i.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="with_tag.js (continued)"',title:'"with_tag.js','(continued)"':!0},"class WithNode {\n  constructor(token, args, block) {\n    this.token = token;\n    this.args = args;\n    this.block = block;\n  }\n\n  async render(context, out) {\n    const scope = {};\n    for (const [key, value] of Object.entries(this.args)) {\n      scope[key] = await value.evaluate(context);\n    }\n    await context.extend(scope, () => this.block.render(context, out));\n  }\n\n  renderSync(context, out) {\n    const scope = Object.fromEntries(\n      Object.entries(this.args).map(([key, value]) => [\n        key,\n        value.evaluateSync(context),\n      ])\n    );\n    context.extendSync(scope, () => this.block.renderSync(context, out));\n  }\n\n  children() {\n    return [{ node: this.block }];\n  }\n}\n"))),(0,i.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="with_tag.ts (continued)"',title:'"with_tag.ts','(continued)"':!0},"class WithNode implements Node {\n  constructor(\n    readonly token: tokens.Token,\n    readonly args: Arguments,\n    readonly block: BlockNode\n  ) {}\n\n  async render(context: RenderContext, out: RenderStream): Promise<void> {\n    const scope: ContextScope = {};\n    for (const [key, value] of Object.entries(this.args)) {\n      scope[key] = await value.evaluate(context);\n    }\n    await context.extend(scope, () => this.block.render(context, out));\n  }\n\n  renderSync(context: RenderContext, out: RenderStream): void {\n    const scope: ContextScope = Object.fromEntries(\n      Object.entries(this.args).map(([key, value]) => [\n        key,\n        value.evaluateSync(context),\n      ])\n    );\n    context.extendSync(scope, () => this.block.renderSync(context, out));\n  }\n\n  children(): Node[] {\n    return [{ node: this.block }];\n  }\n}\n")))),(0,i.kt)("h3",{id:"example-tag-usage"},"Example Tag Usage"),(0,i.kt)("p",null,"If the above tag implementation is exported from a module called ",(0,i.kt)("inlineCode",{parentName:"p"},"with_tag.js")," (or ",(0,i.kt)("inlineCode",{parentName:"p"},"ts"),"), we can import and register the tag with a LiquidScript ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment"},(0,i.kt)("inlineCode",{parentName:"a"},"Environment")),", then use ",(0,i.kt)("inlineCode",{parentName:"p"},"{% with %}")," in templates rendered from that environment."),(0,i.kt)("p",null,"The first argument of ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment#addtag"},(0,i.kt)("inlineCode",{parentName:"a"},"addTag()"))," is the tag's name, as used by template authors. The second argument is our object implementing the ",(0,i.kt)("inlineCode",{parentName:"p"},"Tag")," interface."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment } from "liquidscript";\nimport { WithTag } from "./with_tag";\n\nconst env = new Environment();\nenv.addTag("with", new WithTag());\n\nconst template = env.fromString(`\n{% with greeting: \'Hello\', name: \'Sally\' %}\n  {{ greeting }}, {{ name }}!\n{% endwith %}\n`);\n\nconsole.log(template.renderSync());\n// Hello, Sally!\n')),(0,i.kt)("h2",{id:"replace-a-tag"},"Replace a Tag"),(0,i.kt)("p",null,"If given the name of an existing tag, ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment#addtag"},(0,i.kt)("inlineCode",{parentName:"a"},"Environment.addTag()"))," will replace it without warning. For example, the extra ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/extra/tags#if-not"},'"if not" tag'),", which adds support for negating expressions with ",(0,i.kt)("inlineCode",{parentName:"p"},"not")," and grouping terms with parentheses, is a drop-in replacement for the standard ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#if"},(0,i.kt)("inlineCode",{parentName:"a"},"if"))," tag."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment, extra } from "liquidscript";\n\nconst env = new Environment();\nenv.addTag("if", new extra.tags.IfNotTag());\n')),(0,i.kt)("h2",{id:"remove-a-tag"},"Remove a Tag"),(0,i.kt)("p",null,"Remove a tag by deleting it from ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment#tags"},(0,i.kt)("inlineCode",{parentName:"a"},"Environment.tags")),". It's a plain object mapping tag names to ",(0,i.kt)("inlineCode",{parentName:"p"},"Tag")," objects. This example removes the little known ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#ifchanged"},(0,i.kt)("inlineCode",{parentName:"a"},"ifchanged"))," tag, making it unavailable to templates rendered from the environment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment } from "liquidscript";\n\nconst env = new Environment();\ndelete env.tags.ifchanged;\n')),(0,i.kt)("h2",{id:"jekyll-style-include-example"},"Jekyll Style Include Example"),(0,i.kt)("p",null,"This example implements an ",(0,i.kt)("inlineCode",{parentName:"p"},"{% include %}")," tag, as found in ",(0,i.kt)("a",{parentName:"p",href:"https://jekyllrb.com/"},"Jekyll"),". Unlike the ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#include"},"standard ",(0,i.kt)("inlineCode",{parentName:"a"},"include")," tag"),", this implementation expects either the name of the template without quotes (",(0,i.kt)("inlineCode",{parentName:"p"},"my_template.liquid"),"), or a fully formed output statement (",(0,i.kt)("inlineCode",{parentName:"p"},"{{ some_variable }}"),") that resolves to a string. Additionally, key/value arguments should be separated by ",(0,i.kt)("inlineCode",{parentName:"p"},"=")," rather than ",(0,i.kt)("inlineCode",{parentName:"p"},":"),", and those arguments are put into an ",(0,i.kt)("inlineCode",{parentName:"p"},"include")," namespace rather than merging them into the existing scope."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"A ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/guides/custom-loaders#loading-sections-and-snippets"},"custom template loader")," would also be needed to mimic Jekyll's folder structure."))),(0,i.kt)(s.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="jekyll_include_tag.mjs"',title:'"jekyll_include_tag.mjs"'},'import { StringLiteral, expressions, tokens } from "liquidscript";\n\nconst RE_VARIABLE_SYNTAX =\n  /^\\s*\\{\\{\\s*(?<stmt>[\\w\\-.]+\\s*(?:\\|.*)?)\\}\\}\\s*(?<args>.*)$/ds;\n\nclass JekyllIncludeTag {\n  parse(stream) {\n    const token = stream.next();\n    stream.expect(tokens.TOKEN_EXPRESSION);\n\n    // An expression that evaluates to the template name\n    let templateNameExpression;\n    // An expression token stream including argument tokens only.\n    let argStream;\n\n    const match = stream.current.value.match(RE_VARIABLE_SYNTAX);\n    if (match) {\n      templateNameExpression = expressions.filtered.parse(match.groups.stmt);\n      argStream = new expressions.ExpressionTokenStream(\n        expressions.arguments.tokenize(\n          match.groups.args,\n          stream.current.index + match.indices.groups.args[0]\n        )\n      );\n    } else {\n      const [name, args] = stream.current.value.trim().split(/\\s(.*)/s);\n      templateNameExpression = new StringLiteral(name);\n      argStream = new expressions.ExpressionTokenStream(\n        expressions.arguments.tokenize(args, stream.current.index + name.length)\n      );\n    }\n\n    // Key/value pairs, separated by commas, with `=` between each key and\n    // it\'s corresponding value.\n    const args = expressions.arguments.parseArguments(\n      argStream,\n      expressions.TOKEN_ASSIGN\n    );\n\n    return new JekyllIncludeNode(token, templateNameExpression, args);\n  }\n}\n\nclass JekyllIncludeNode {\n  constructor(token, templateName, args) {\n    this.token = token;\n    this.templateName = templateName;\n    this.args = args;\n  }\n\n  async render(context, out) {\n    // Resolve the template name. It could be a variable that resolves to a\n    // string or a string literal.\n    const templateName = await this.templateName.evaluate(context);\n\n    // Load the template. We tag it with "include" so the template loader\n    // knows what tag is asking for a template.\n    const template = await context.getTemplate(templateName, {\n      tag: "include",\n    });\n\n    // Arguments go into an `include` namespace.\n    const includeScope = {};\n    for (const [key, value] of Object.entries(this.args)) {\n      includeScope[key] = await value.evaluate(context);\n    }\n\n    await context.extend({ include: includeScope }, async () => {\n      await template.renderWithContext(context, out, false, true);\n    });\n  }\n\n  renderSync(context, out) {\n    const templateName = this.templateName.evaluateSync(context);\n    const template = context.getTemplateSync(templateName, { tag: "include" });\n\n    const includeScope = {};\n    for (const [key, value] of Object.entries(this.args)) {\n      includeScope[key] = value.evaluateSync(context);\n    }\n\n    context.extendSync({ include: includeScope }, () => {\n      template.renderWithContextSync(context, out, false, true);\n    });\n  }\n}\n'))),(0,i.kt)(o.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="jekyll_include_tag.ts"',title:'"jekyll_include_tag.ts"'},'import {\n  ContextScope,\n  Expression,\n  expressions,\n  LiquidTypeError,\n  Node,\n  object,\n  RenderContext,\n  RenderStream,\n  StringLiteral,\n  tokens,\n  Tag,\n} from "liquidscript";\n\nconst RE_VARIABLE_SYNTAX =\n  /^\\s*\\{\\{\\s*(?<stmt>[\\w\\-.]+\\s*(?:\\|.*)?)\\}\\}\\s*(?<args>.*)$/ds;\n\n/**\n * The match object we expect back from our variable syntax regular expression.\n */\ninterface VariableSyntaxMatch {\n  groups: { stmt: string; args: string };\n  indices: { groups: { stmt: number[]; args: number[] } };\n}\n\n/**\n * A type predicate for the `VariableSyntaxMatch` interface.\n */\nfunction isVariableSyntaxMatch(match: unknown): match is VariableSyntaxMatch {\n  return match !== null;\n}\n\nclass JekyllIncludeTag implements Tag {\n  parse(stream: tokens.TokenStream) {\n    const token = stream.next();\n    stream.expect(tokens.TOKEN_EXPRESSION);\n\n    // An expression that evaluates to the template name.\n    let templateNameExpression;\n    // An expression token stream including argument tokens only.\n    let argStream;\n\n    const match = stream.current.value.match(RE_VARIABLE_SYNTAX);\n    if (isVariableSyntaxMatch(match)) {\n      templateNameExpression = expressions.filtered.parse(match.groups.stmt);\n      argStream = new expressions.ExpressionTokenStream(\n        expressions.arguments.tokenize(\n          match.groups.args,\n          stream.current.index + match.indices.groups.args[0]\n        )\n      );\n    } else {\n      const [name, args] = stream.current.value.trim().split(/\\s(.*)/s);\n      templateNameExpression = new StringLiteral(name);\n      argStream = new expressions.ExpressionTokenStream(\n        expressions.arguments.tokenize(args, stream.current.index + name.length)\n      );\n    }\n\n    // Key/value pairs, separated by commas, with `=` between each key and\n    // it\'s corresponding value.\n    const args = expressions.arguments.parseArguments(\n      argStream,\n      expressions.TOKEN_ASSIGN\n    );\n\n    return new JekyllIncludeNode(token, templateNameExpression, args);\n  }\n}\n\nclass JekyllIncludeNode implements Node {\n  constructor(\n    readonly token: tokens.Token,\n    readonly templateName: Expression,\n    readonly args: expressions.arguments.Arguments\n  ) {}\n\n  async render(context: RenderContext, out: RenderStream) {\n    // Resolve the template name. It could be a variable that resolves to a\n    // string or a string literal.\n    const templateName = await this.templateName.evaluate(context);\n\n    if (!object.isString(templateName))\n      throw new LiquidTypeError(\n        `invalid template name, expected a string, found ${templateName}`,\n        this.token\n      );\n\n    // Load the template. We tag it with "include" so the template loader\n    // knows what tag is asking for a template.\n    const template = await context.getTemplate(templateName, {\n      tag: "include",\n    });\n\n    // Arguments go into an `include` namespace.\n    const includeScope: ContextScope = {};\n    for (const [key, value] of Object.entries(this.args)) {\n      includeScope[key] = await value.evaluate(context);\n    }\n\n    await context.extend({ include: includeScope }, async () => {\n      await template.renderWithContext(context, out, false, true);\n    });\n  }\n\n  renderSync(context: RenderContext, out: RenderStream) {\n    const templateName = this.templateName.evaluateSync(context);\n\n    if (!object.isString(templateName))\n      throw new LiquidTypeError(\n        `invalid template name, expected a string, found ${templateName}`,\n        this.token\n      );\n\n    const template = context.getTemplateSync(templateName, { tag: "include" });\n\n    const includeScope: ContextScope = {};\n    for (const [key, value] of Object.entries(this.args)) {\n      includeScope[key] = value.evaluateSync(context);\n    }\n\n    context.extendSync({ include: includeScope }, () => {\n      template.renderWithContextSync(context, out, false, true);\n    });\n  }\n}\n')))))}k.isMDXComponent=!0}}]);