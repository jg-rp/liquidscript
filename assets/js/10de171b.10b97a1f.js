"use strict";(self.webpackChunkliquidscript_docs=self.webpackChunkliquidscript_docs||[]).push([[2380],{9494:function(e,n,a){a.d(n,{Zo:function(){return m},kt:function(){return d}});var t=a(6687);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=t.createContext({}),s=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},m=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=s(a),d=l,g=u["".concat(p,".").concat(d)]||u[d]||c[d]||i;return a?t.createElement(g,r(r({ref:n},m),{},{components:a})):t.createElement(g,r({ref:n},m))}));function d(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=u;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var s=2;s<i;s++)r[s]=a[s];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8008:function(e,n,a){a.r(n),a.d(n,{assets:function(){return m},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c}});var t=a(9853),l=a(5309),i=(a(6687),a(9494)),r=["components"],o={},p="Template Static Analysis",s={unversionedId:"guides/static-analysis",id:"guides/static-analysis",title:"Template Static Analysis",description:"_New in version 1.3.0_",source:"@site/docs/guides/static-analysis.md",sourceDirName:"guides",slug:"/guides/static-analysis",permalink:"/liquidscript/guides/static-analysis",draft:!1,editUrl:"https://github.com/jg-rp/liquidscript/tree/docs/docs/guides/static-analysis.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Custom Loaders",permalink:"/liquidscript/guides/custom-loaders"}},m={},c=[{value:"All Template Variables",id:"all-template-variables",level:2},{value:"Global Template Variables",id:"global-template-variables",level:2},{value:"Local Template Variables",id:"local-template-variables",level:2},{value:"Analyzing Partial Templates",id:"analyzing-partial-templates",level:2},{value:"Analyzing Custom Tags",id:"analyzing-custom-tags",level:2}],u={toc:c};function d(e){var n=e.components,a=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"template-static-analysis"},"Template Static Analysis"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"New in version 1.3.0"))),(0,i.kt)("p",null,"Use the ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Template#analyze"},(0,i.kt)("inlineCode",{parentName:"a"},"analyze()"))," or ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Template#analyzesync"},(0,i.kt)("inlineCode",{parentName:"a"},"analyzeSync()"))," methods of a Liquid ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Template"},(0,i.kt)("inlineCode",{parentName:"a"},"Template"))," to traverse its abstract syntax tree and report template variable usage."),(0,i.kt)("h2",{id:"all-template-variables"},"All Template Variables"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/modules#templateanalysis"},(0,i.kt)("inlineCode",{parentName:"a"},"TemplateAnalysis"))," object returned from ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Template#analyze"},(0,i.kt)("inlineCode",{parentName:"a"},"Template.analyze()"))," includes a ",(0,i.kt)("inlineCode",{parentName:"p"},"variables")," property, mapping template variable names to arrays of locations where those names occur. Each location is an object with a ",(0,i.kt)("inlineCode",{parentName:"p"},"templateName")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"lineNumber")," property."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Template } from "liquidscript";\n\nconst template = Template.fromString(`\\\n{% assign people = "Sally, John, Brian, Sue" | split: ", " %}\n{{ people }}\n{% for name in people %}\n    {{ forloop.index }} - {{ greeting }}, {{ name }}!\n{% endfor %}`);\n\nconst analysis = template.analyzeSync();\nconsole.log(Object.keys(analysis.variables));\n\nfor (const [name, locations] of Object.entries(analysis.variables)) {\n  for (const { templateName, lineNumber } of locations) {\n    console.log(`\'${name}\' found in \'${templateName}\' on line ${lineNumber}`);\n  }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"['people', 'forloop.index', 'greeting', 'name']\n'people' found in '<string>' on line 2\n'people' found in '<string>' on line 3\n'forloop.index' found in '<string>' on line 4\n'greeting' found in '<string>' on line 4\n'name' found in '<string>' on line 4\n")),(0,i.kt)("h2",{id:"global-template-variables"},"Global Template Variables"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"globalVariables")," property of a ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/modules#templateanalysis"},(0,i.kt)("inlineCode",{parentName:"a"},"TemplateAnalysis"))," object is similar to ",(0,i.kt)("inlineCode",{parentName:"p"},"variables"),", but only includes those variables that are not in scope from previous ",(0,i.kt)("inlineCode",{parentName:"p"},"assign"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"capture"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"increment")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"decrement")," tags, or added to a block's scope by a block tag."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Template } from "liquidscript";\n\nconst template = Template.fromString(`\\\n{% assign people = "Sally, John, Brian, Sue" | split: ", " %}\n{{ people }}\n{% for name in people %}\n    {{ forloop.index }} - {{ greeting }}, {{ name }}!\n{% endfor %}`);\n\nconst analysis = template.analyzeSync();\nconsole.log("all variables:", Object.keys(analysis.variables));\nconsole.log("global variables:", Object.keys(analysis.globalVariables));\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"all variables:  ['people', 'forloop.index', 'greeting', 'name']\nglobal variables:  ['greeting']\n")),(0,i.kt)("p",null,"While ",(0,i.kt)("inlineCode",{parentName:"p"},"greeting")," is assumed to be global (that is, provided by application developers rather than a template author), LiquidScript knows that ",(0,i.kt)("inlineCode",{parentName:"p"},"forloop")," is in scope for the duration of the ",(0,i.kt)("inlineCode",{parentName:"p"},"for")," block. If ",(0,i.kt)("inlineCode",{parentName:"p"},"people")," were referenced before being assigned, we'd see an entry in the ",(0,i.kt)("inlineCode",{parentName:"p"},"people")," array for each location where it is out of scope."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Template } from "liquidscript";\n\nconst template = Template.fromString(`\\\n{{ people }}\n{% assign people = "Sally, John, Brian, Sue" | split: ", " %}\n{{ people }}`);\n\nconst analysis = template.analyzeSync();\n\nfor (const [name, locations] of Object.entries(a.globalVariables)) {\n  for (const { templateName, lineNumber } of locations) {\n    console.log(\n      `\'${name}\' is out of scope in \'${templateName}\' on line ${lineNumber}`\n    );\n  }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"'people' is out of scope in '<string>' on line 1\n")),(0,i.kt)("h2",{id:"local-template-variables"},"Local Template Variables"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"localVariables")," property of a ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/modules#templateanalysis"},(0,i.kt)("inlineCode",{parentName:"a"},"TemplateAnalysis"))," object is, again, a mapping of template variable names to their locations. Each entry is the location of an ",(0,i.kt)("inlineCode",{parentName:"p"},"assign"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"capture"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"increment"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"decrement")," tag (or any custom tag that introduces names into the template local namespace) that initializes or updates the variable."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Template } from "liquidscript";\n\nconst template = Template.fromString(`\\\n{% assign people = "Sally, John, Brian, Sue" | split: ", " %}\n{% assign people = "Bob, Frank" | split: ", " %}`);\n\nconst analysis = template.analyzeSync();\n\nfor (const [name, locations] of Object.entries(a.localVariables)) {\n  for (const { templateName, lineNumber } of locations) {\n    console.log(\n      `\'${name}\' assigned in \'${templateName}\' on line ${lineNumber}`\n    );\n  }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"'people' assigned in '<string>' on line 1\n'people' assigned in '<string>' on line 2\n")),(0,i.kt)("h2",{id:"analyzing-partial-templates"},"Analyzing Partial Templates"),(0,i.kt)("p",null,"When the ",(0,i.kt)("inlineCode",{parentName:"p"},"followPartials")," option to ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Template#analyze"},(0,i.kt)("inlineCode",{parentName:"a"},"Template.analyze()"))," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," (the default), LiquidScript will attempt to load and analyze templates from ",(0,i.kt)("inlineCode",{parentName:"p"},"include")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"render")," tags. In the case of ",(0,i.kt)("inlineCode",{parentName:"p"},"include"),", this is only possible when the template name is a string literal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Environment, ObjectLoader } from "liquidscript";\n\nconst templates = {\n  layout: `"\\\n        {% include \'nav\', title: page_name %}\n        {% render \'foot\' with website as site_name %}\n    `,\n  nav: "{{ title }} nav bar",\n  foot: "a footer for {{ site_name }}",\n};\n\nconst env = new Environment({ loader: new ObjectLoader(templates) });\nconst layout = env.getTemplateSync("layout");\n\nconst analysis = layout.analyzeSync({ followPartials: true });\nconsole.log(analysis.variables);\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"{\n  title: [ { templateName: 'nav', lineNumber: 1 } ],\n  page_name: [ { templateName: 'layout', lineNumber: 1 } ],\n  site_name: [ { templateName: 'foot', lineNumber: 1 } ],\n  website: [ { templateName: 'layout', lineNumber: 2 } ]\n}\n")),(0,i.kt)("p",null,"When the ",(0,i.kt)("inlineCode",{parentName:"p"},"raiseForFailures")," option is ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," (the default), we should expect a ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/TemplateTraversalError"},(0,i.kt)("inlineCode",{parentName:"a"},"TemplateTraversalError"))," to be thrown if a partial template can not be loaded. If ",(0,i.kt)("inlineCode",{parentName:"p"},"raiseForFailures")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", a mapping of unloadable ",(0,i.kt)("inlineCode",{parentName:"p"},"include"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"render")," tags is available as ",(0,i.kt)("inlineCode",{parentName:"p"},"TemplateAnalysis.unloadablePartials"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Environment, ObjectLoader } from "liquidscript";\n\nconst templates = {\n  layout: `"\\\n        {% include \'nav\', title: page_name %}\n        {% render \'foot\' with website as site_name %}\n    `,\n};\n\nconst env = new Environment({ loader: new ObjectLoader(templates) });\nconst layout = env.getTemplateSync("layout");\n\nconst analysis = layout.analyzeSync({\n  followPartials: true,\n  raiseForFailures: false,\n});\nconsole.log(analysis.unloadablePartials);\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"{\n  nav: [ { templateName: 'layout', lineNumber: 1 } ],\n  foot: [ { templateName: 'layout', lineNumber: 2 } ]\n}\n")),(0,i.kt)("h2",{id:"analyzing-custom-tags"},"Analyzing Custom Tags"),(0,i.kt)("p",null,"All built-in tags (the tag's ",(0,i.kt)("inlineCode",{parentName:"p"},"Node")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Expression")," objects) implement a ",(0,i.kt)("inlineCode",{parentName:"p"},"children()")," method. When analyzing a custom tag that does not implement ",(0,i.kt)("inlineCode",{parentName:"p"},"children()"),", and with the ",(0,i.kt)("inlineCode",{parentName:"p"},"raiseForFailures")," argument set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," (the default), LiquidSCript will raise a ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/TemplateTraversalError"},(0,i.kt)("inlineCode",{parentName:"a"},"TemplateTraversalError")),". When ",(0,i.kt)("inlineCode",{parentName:"p"},"raiseForFailures")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", a mapping of unvisitable AST nodes and expressions is available as ",(0,i.kt)("inlineCode",{parentName:"p"},"TemplateAnalysis.failedVisits"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import {\n  Environment,\n  Node,\n  ObjectLoader,\n  RenderContext,\n  RenderStream,\n  Tag,\n  tokens,\n} from "liquidscript";\n\nclass ExampleNode implements Node {\n  constructor(readonly token: tokens.Token) {}\n\n  async render(context: RenderContext, out: RenderStream): Promise<void> {\n    out.write("example node");\n  }\n\n  renderSync(context: RenderContext, out: RenderStream): void {\n    out.write("example node");\n  }\n\n  // This node does not implement `children()`\n}\n\nclass ExampleTag implements Tag {\n  parse(stream: tokens.TokenStream): Node {\n    return new ExampleNode(stream.current);\n  }\n\n  // This tag does not implement `children()`\n}\n\nconst templates = {\n  layout: "{% example %}",\n};\n\nconst env = new Environment({ loader: new ObjectLoader(templates) });\nenv.addTag("example", new ExampleTag());\n\nconst layout = env.getTemplateSync("layout");\nconst analysis = layout.analyzeSync({\n  followPartials: true,\n  raiseForFailures: false,\n});\nconsole.log(analysis.failedVisits);\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"{ ExampleNode: [ { templateName: 'layout', lineNumber: 1 } ] }\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Node#children"},(0,i.kt)("inlineCode",{parentName:"a"},"Node.children()"))," should return an array of ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/modules#childnode"},(0,i.kt)("inlineCode",{parentName:"a"},"ChildNode"))," objects. Each ",(0,i.kt)("inlineCode",{parentName:"p"},"ChildNode")," includes a child ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Expression"},(0,i.kt)("inlineCode",{parentName:"a"},"Expression"))," and/or ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Node"},(0,i.kt)("inlineCode",{parentName:"a"},"Node")),", plus any names the tag adds to the template local scope or subsequent block scope. Please see ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquidscript/tree/main/src/builtin/tags"},"src/builtin/tags")," for examples."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Expression#children"},(0,i.kt)("inlineCode",{parentName:"a"},"Expression.children()"))," is expected to return an array of child ",(0,i.kt)("inlineCode",{parentName:"p"},"Expression"),"s. For example, ",(0,i.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/RangeLiteral#children"},(0,i.kt)("inlineCode",{parentName:"a"},"RangeLiteral.children()"))," returns an array containing expressions for its ",(0,i.kt)("inlineCode",{parentName:"p"},"start")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"stop")," properties. Please see ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquidscript/blob/main/src/expression.ts"},"src/expression.ts")," for examples."))}d.isMDXComponent=!0}}]);