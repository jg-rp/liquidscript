"use strict";(self.webpackChunkliquidscript_docs=self.webpackChunkliquidscript_docs||[]).push([[6820],{9494:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return h}});var a=n(6687);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,h=d["".concat(p,".").concat(u)]||d[u]||c[u]||l;return n?a.createElement(h,o(o({ref:t},m),{},{components:n})):a.createElement(h,o({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},317:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return c},frontMatter:function(){return l},metadata:function(){return i},toc:function(){return s}});var a=n(1943),r=(n(6687),n(9494));const l={},o="Render Context",i={unversionedId:"introduction/render-context",id:"introduction/render-context",title:"Render Context",description:"The result of rendering a template depends on the context in which it is rendered. That is, available variables and their values, and options set on the bound Environment.",source:"@site/docs/introduction/render-context.md",sourceDirName:"introduction",slug:"/introduction/render-context",permalink:"/liquidscript/introduction/render-context",draft:!1,editUrl:"https://github.com/jg-rp/liquidscript/tree/docs/docs/introduction/render-context.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Loading Templates",permalink:"/liquidscript/introduction/loading-templates"},next:{title:"Objects and Drops",permalink:"/liquidscript/introduction/objects-and-drops"}},p={},s=[{value:"Environment Globals",id:"environment-globals",level:2},{value:"Template Globals",id:"template-globals",level:2},{value:"Render Arguments",id:"render-arguments",level:2},{value:"Matter",id:"matter",level:2}],m={toc:s},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"render-context"},"Render Context"),(0,r.kt)("p",null,"The result of rendering a template depends on the ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/RenderContext"},"context")," in which it is rendered. That is, available variables and their values, and options set on the bound ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment"},"Environment"),"."),(0,r.kt)("p",null,"Template ",(0,r.kt)("em",{parentName:"p"},"global")," variables are those added to a render context by application developers. From a template author's perspective, ",(0,r.kt)("em",{parentName:"p"},"globals")," are read-only and are available to all templates, including those rendered with the ",(0,r.kt)("inlineCode",{parentName:"p"},"render")," tag."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Local")," variables are those defined by template authors using ",(0,r.kt)("inlineCode",{parentName:"p"},"{% assign %}")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"{% capture %}"),". Local variables can mask names defined in the global namespace, but never change them."),(0,r.kt)("p",null,"Named counters created with ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#increment"},(0,r.kt)("inlineCode",{parentName:"a"},"{% increment %}"))," and ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/language/tags#decrement"},(0,r.kt)("inlineCode",{parentName:"a"},"{% decrement %}"))," have their own namespace. Outside of an ",(0,r.kt)("inlineCode",{parentName:"p"},"increment")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"decrement")," tag, Liquid will look in the counters namespace last, after ",(0,r.kt)("em",{parentName:"p"},"locals")," and ",(0,r.kt)("em",{parentName:"p"},"globals"),"."),(0,r.kt)("h2",{id:"environment-globals"},"Environment Globals"),(0,r.kt)("p",null,"You can add ",(0,r.kt)("em",{parentName:"p"},"global")," variables to an ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment"},"Environment")," using the ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/modules#environmentoptions"},(0,r.kt)("inlineCode",{parentName:"a"},"globals"))," option. Environment globals are automatically added to the render context of every ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Template"},"Template")," created from that environment."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment } from "liquidscript";\n\nconst env = new Environment({ globals: { site_name: "My Site" } });\nconst source = `\n<html>\n  <head>\n    <title>{{ site_name }}</title>\n  </head>\n</html>\n`;\n\nconst template = env.fromString(source);\nconsole.log(template.renderSync());\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="output"',title:'"output"'},"<html>\n  <head>\n    <title>My Site</title>\n  </head>\n</html>\n")),(0,r.kt)("h2",{id:"template-globals"},"Template Globals"),(0,r.kt)("p",null,"Similar to ",(0,r.kt)("a",{parentName:"p",href:"#environment-globals"},"Environment Globals"),", you can pin global template variables to a ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Template"},"Template"),". Globals set on a template will be merged with any set on its environment and added to the render context automatically."),(0,r.kt)("p",null,"If environment and template globals have conflicting names, template variables will take priority over environment variables."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment } from "liquidscript";\n\nconst env = new Environment({ globals: { site_name: "My Site" } });\nconst source = `\n<html>\n  <head>\n    <title>{{ site_name }} - {{ page.name }}</title>\n  </head>\n</html>\n`;\n\nconst template = env.fromString(source, { page: { name: "Blog" } });\nconsole.log(template.renderSync());\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="output"',title:'"output"'},"<html>\n  <head>\n    <title>My Site - Blog</title>\n  </head>\n</html>\n")),(0,r.kt)("h2",{id:"render-arguments"},"Render Arguments"),(0,r.kt)("p",null,"Properties from the object passes to ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Template#render"},(0,r.kt)("inlineCode",{parentName:"a"},"Template.render()"))," and ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Template#rendersync"},(0,r.kt)("inlineCode",{parentName:"a"},"Template.renderSync()"))," are also added to the ",(0,r.kt)("em",{parentName:"p"},"global")," namespace, although, unlike environment and template globals, they do not persist between calls to ",(0,r.kt)("inlineCode",{parentName:"p"},"render()"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"render()")," keyword arguments take priority over environment and template globals."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment } from "liquidscript";\n\nconst env = new Environment({ globals: { site_name: "My Site" } });\nconst source = `\n<html>\n  <head>\n    <title>{{ site_name }} - {{ page.name }}</title>\n  </head>\n  <body>\n    <p>Hello, {{ user.name }}</p>\n  </body>\n</html>\n`;\n\nconst template = env.fromString(source, { page: { name: "Blog" } });\nconsole.log(template.renderSync({ user: { name: "Sally" } }));\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="output"',title:'"output"'},"<html>\n  <head>\n    <title>My Site - Blog</title>\n  </head>\n  <body>\n    <p>Hello, Sally</p>\n  </body>\n</html>\n")),(0,r.kt)("h2",{id:"matter"},"Matter"),(0,r.kt)("p",null,"Matter variables are those that are added to a ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Template"},"template")," by a ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/introduction/loading-templates"},"loader"),". They could be from a ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/guides/custom-loaders#front-matter-loader"},"front matter loader")," or extra meta data from a ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/guides/custom-loaders#async-database-loader"},"database loader"),"."),(0,r.kt)("p",null,"These, too, are merged into the ",(0,r.kt)("em",{parentName:"p"},"global")," namespace, taking priority over template globals, but not ",(0,r.kt)("inlineCode",{parentName:"p"},"render()")," keyword arguments."))}c.isMDXComponent=!0}}]);