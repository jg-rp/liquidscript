"use strict";(self.webpackChunkliquidscript_docs=self.webpackChunkliquidscript_docs||[]).push([[5456],{9494:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var r=a(6687);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),o=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=o(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=o(a),m=n,k=c["".concat(p,".").concat(m)]||c[m]||u[m]||i;return a?r.createElement(k,l(l({ref:t},d),{},{components:a})):r.createElement(k,l({ref:t},d))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:n,l[1]=s;for(var o=2;o<i;o++)l[o]=a[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},785:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var r=a(1943),n=(a(6687),a(9494));const i={id:"tags.BreakTag",title:"Class: BreakTag",sidebar_label:"BreakTag",custom_edit_url:null},l=void 0,s={unversionedId:"api/classes/tags.BreakTag",id:"api/classes/tags.BreakTag",title:"Class: BreakTag",description:"tags.BreakTag",source:"@site/docs/api/classes/tags.BreakTag.md",sourceDirName:"api/classes",slug:"/api/classes/tags.BreakTag",permalink:"/liquidscript/api/classes/tags.BreakTag",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"tags.BreakTag",title:"Class: BreakTag",sidebar_label:"BreakTag",custom_edit_url:null},sidebar:"API",previous:{title:"BreakNode",permalink:"/liquidscript/api/classes/tags.BreakNode"},next:{title:"CaptureNode",permalink:"/liquidscript/api/classes/tags.CaptureNode"}},p={},o=[{value:"Implements",id:"implements",level:2},{value:"Constructors",id:"constructors",level:2},{value:"constructor",id:"constructor",level:3},{value:"Properties",id:"properties",level:2},{value:"block",id:"block",level:3},{value:"Defined in",id:"defined-in",level:4},{value:"name",id:"name",level:3},{value:"Defined in",id:"defined-in-1",level:4},{value:"Methods",id:"methods",level:2},{value:"parse",id:"parse",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Implementation of",id:"implementation-of",level:4},{value:"Defined in",id:"defined-in-2",level:4}],d={toc:o},c="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(c,(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/liquidscript/api/namespaces/tags"},"tags"),".BreakTag"),(0,n.kt)("p",null,"A class that implements the ",(0,n.kt)("inlineCode",{parentName:"p"},"Tag")," interface is responsible for\nparsing one or more tokens from a token stream, and returning\nan ast.Node to be added into the abstract syntax tree."),(0,n.kt)("h2",{id:"implements"},"Implements"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/liquidscript/api/interfaces/Tag"},(0,n.kt)("inlineCode",{parentName:"a"},"Tag")))),(0,n.kt)("h2",{id:"constructors"},"Constructors"),(0,n.kt)("h3",{id:"constructor"},"constructor"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("strong",{parentName:"p"},"new BreakTag"),"()"),(0,n.kt)("h2",{id:"properties"},"Properties"),(0,n.kt)("h3",{id:"block"},"block"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,n.kt)("strong",{parentName:"p"},"block"),": ",(0,n.kt)("inlineCode",{parentName:"p"},"false")),(0,n.kt)("h4",{id:"defined-in"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquidscript/blob/622a8c1/src/builtin/tags/for.ts#L21"},"src/builtin/tags/for.ts:21")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"name"},"name"),(0,n.kt)("p",null,"\u2022 ",(0,n.kt)("inlineCode",{parentName:"p"},"Readonly")," ",(0,n.kt)("strong",{parentName:"p"},"name"),": ",(0,n.kt)("inlineCode",{parentName:"p"},"string")," = ",(0,n.kt)("inlineCode",{parentName:"p"},"TAG_BREAK")),(0,n.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquidscript/blob/622a8c1/src/builtin/tags/for.ts#L20"},"src/builtin/tags/for.ts:20")),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"parse"},"parse"),(0,n.kt)("p",null,"\u25b8 ",(0,n.kt)("strong",{parentName:"p"},"parse"),"(",(0,n.kt)("inlineCode",{parentName:"p"},"stream"),"): ",(0,n.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/tags.BreakNode"},(0,n.kt)("inlineCode",{parentName:"a"},"BreakNode"))),(0,n.kt)("p",null,"Create a syntax tree node by parsing tokens from the token\nstream."),(0,n.kt)("p",null,"If implementing a block tag (one with a start and end tag),\nthe stream should be left with the end tag as its current\ntoken."),(0,n.kt)("h4",{id:"parameters"},"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("inlineCode",{parentName:"td"},"stream")),(0,n.kt)("td",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"td",href:"/liquidscript/api/interfaces/tokens.TokenStream"},(0,n.kt)("inlineCode",{parentName:"a"},"TokenStream"))),(0,n.kt)("td",{parentName:"tr",align:"left"},"A stream of template tokens.")))),(0,n.kt)("h4",{id:"returns"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/tags.BreakNode"},(0,n.kt)("inlineCode",{parentName:"a"},"BreakNode"))),(0,n.kt)("h4",{id:"implementation-of"},"Implementation of"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Tag"},"Tag"),".",(0,n.kt)("a",{parentName:"p",href:"/liquidscript/api/interfaces/Tag#parse"},"parse")),(0,n.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquidscript/blob/622a8c1/src/builtin/tags/for.ts#L23"},"src/builtin/tags/for.ts:23")))}u.isMDXComponent=!0}}]);