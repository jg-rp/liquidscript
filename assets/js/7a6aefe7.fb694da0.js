"use strict";(self.webpackChunkliquidscript_docs=self.webpackChunkliquidscript_docs||[]).push([[1618],{9494:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(6687);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4712:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(6687),a=n(4923);const i={tabItem:"tabItem_QpX5"};function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i.tabItem,l),hidden:n},t)}},1547:(e,t,n)=>{n.d(t,{Z:()=>N});var r=n(1943),a=n(6687),i=n(4923),l=n(2315),o=n(668),s=n(4130),u=n(5681),p=n(7514);function c(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const r=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(r.location.search);t.set(i,e),r.replace({...r.location,search:t.toString()})}),[i,r])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,i=d(e),[l,o]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[s,u]=f({queryString:n,groupId:r}),[c,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,i]=(0,p.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:r}),g=(()=>{const e=s??c;return m({value:e,tabValues:i})?e:null})();(0,a.useLayoutEffect)((()=>{g&&o(g)}),[g]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),h(e)}),[u,h,i]),tabValues:i}}var g=n(3979);const k={tabList:"tabList_AtKJ",tabItem:"tabItem_n7BL"};function b(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),d=e=>{const t=e.currentTarget,n=p.indexOf(t),r=u[n].value;r!==o&&(c(t),s(r))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>p.push(e),onKeyDown:m,onClick:d},l,{className:(0,i.Z)("tabs__item",k.tabItem,l?.className,{"tabs__item--active":o===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:r}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function y(e){const t=h(e);return a.createElement("div",{className:(0,i.Z)("tabs-container",k.tabList)},a.createElement(b,(0,r.Z)({},e,t)),a.createElement(v,(0,r.Z)({},e,t)))}function N(e){const t=(0,g.Z)();return a.createElement(y,(0,r.Z)({key:String(t)},e))}},2268:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>u,toc:()=>c});var r=n(1943),a=(n(6687),n(9494)),i=n(1547),l=n(4712);const o={},s="Custom Filters",u={unversionedId:"guides/custom-filters",id:"guides/custom-filters",title:"Custom Filters",description:"Liquid filters are JavaScript functions. A filter function is any callable that accepts at least one argument, the result of the left hand side of a filtered expression. The function's return value will be output, assigned or piped to more filters.",source:"@site/docs/guides/custom-filters.mdx",sourceDirName:"guides",slug:"/guides/custom-filters",permalink:"/liquidscript/guides/custom-filters",draft:!1,editUrl:"https://github.com/jg-rp/liquidscript/tree/docs/docs/guides/custom-filters.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"HTML Auto-Escape",permalink:"/liquidscript/introduction/auto-escape"},next:{title:"Custom Tags",permalink:"/liquidscript/guides/custom-tags"}},p={},c=[{value:"Add a Filter",id:"add-a-filter",level:2},{value:"Replace a Filter",id:"replace-a-filter",level:2},{value:"Remove a Filter",id:"remove-a-filter",level:2},{value:"Filter Context",id:"filter-context",level:2},{value:"Keyword Arguments and Options",id:"keyword-arguments-and-options",level:3},{value:"Liquid Numbers and Arithmetic",id:"liquid-numbers-and-arithmetic",level:2},{value:"Auto-Escape and Markup",id:"auto-escape-and-markup",level:2},{value:"Missing and Excess Arguments",id:"missing-and-excess-arguments",level:2},{value:"Undefined vs undefined",id:"undefined-vs-undefined",level:2}],d={toc:c},m="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"custom-filters"},"Custom Filters"),(0,a.kt)("p",null,"Liquid ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/language/introduction#filters"},"filters")," are JavaScript functions. A filter function is any callable that accepts at least one argument, the result of the left hand side of a filtered expression. The function's return value will be output, assigned or piped to more filters."),(0,a.kt)("p",null,"You can add to, remove or modify Liquid's ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/language/filters"},"built-in filters")," to suit your needs by registering filter functions with an ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment"},"Environment"),", then rendering your templates from that environment."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"All built-in filters are implemented in this way, so have a look in ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/jg-rp/liquidscript/tree/main/src/builtin/filters"},"src/builtin/filters/")," for more examples.")),(0,a.kt)("h2",{id:"add-a-filter"},"Add a Filter"),(0,a.kt)("p",null,"Add a custom template filter to an ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment"},"Environment")," by calling its ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment#addfilter"},(0,a.kt)("inlineCode",{parentName:"a"},"addFilter()"))," method. Here's a simple example of adding JavaScript's ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith"},(0,a.kt)("inlineCode",{parentName:"a"},"String.prototype.endsWith"))," as a filter function."),(0,a.kt)(i.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment } from "liquidscript";\n\nconst env = new Environment();\nenv.addFilter("ends_with", (val, arg) => val.endsWith(arg));\n'))),(0,a.kt)(l.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Environment } from "liquidscript";\n\nconst env = new Environment();\nenv.addFilter("ends_with", (val: string, arg: string) => val.endsWith(arg));\n')))),(0,a.kt)("p",null,"In a template you'd use it like this."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign foo = "foobar" | ends_with: "bar" %}\n{% if foo %}\n    \x3c!-- do something --\x3e\n{% endif %}\n')),(0,a.kt)("h2",{id:"replace-a-filter"},"Replace a Filter"),(0,a.kt)("p",null,"If given the name of an existing filter function, ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment#addfilter"},(0,a.kt)("inlineCode",{parentName:"a"},"Environment.add_filter()"))," will replace it without warning. For example, suppose you wish to replace the ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/language/filters#slice"},"slice")," filter for one which uses start and end values instead of start and length, and is a bit more forgiving in terms of allowed inputs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment, Markup, filters, object } from "liquidscript";\n\nfunction mySlice(value, start, end) {\n  // Make sure the input value is an array or string.\n  value = object.isArray(value) ? value : object.liquidStringify(value);\n  // Make sure `start` is a number.\n  start = filters.parseNumberOrZero(start);\n  // End is optional\n  if (end === undefined) return value.slice(start);\n  // Make sure `end` is a number.\n  end = filters.parseNumberOrZero(end);\n  return value.slice(start, end);\n}\n\nconst env = new Environment();\nenv.addFilter("slice", mySlice);\n')),(0,a.kt)("h2",{id:"remove-a-filter"},"Remove a Filter"),(0,a.kt)("p",null,"Remove a filter by deleting it from ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Environment#filters"},(0,a.kt)("inlineCode",{parentName:"a"},"Environment.filters")),". It's a plain object mapping filter names to filter functions."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment } from "liquidscript";\n\nconst env = new Environment();\ndelete env.filters.base64_decode;\n')),(0,a.kt)("h2",{id:"filter-context"},"Filter Context"),(0,a.kt)("p",null,"Filter functions are applied with their ",(0,a.kt)("inlineCode",{parentName:"p"},"this")," value set to a ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/api/modules#filtercontext"},(0,a.kt)("inlineCode",{parentName:"a"},"FilterContext")),", giving filters access to the current environment and render context."),(0,a.kt)("p",null,"This example resolves the name ",(0,a.kt)("inlineCode",{parentName:"p"},'"handle"')," in the scope of the current render context, then uses the result as part of the filter's return value. We also reference the ",(0,a.kt)("inlineCode",{parentName:"p"},"autoEscape")," option set on the active environment."),(0,a.kt)(i.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { Environment, Markup } from "liquidscript";\n\nfunction LinkToTag(label, tag) {\n  const handle = this.context.resolveSync("handle");\n  const result = `<a title="Show tag ${tag}" href="/collections/${handle}/${tag}">${label}</a>`;\n  return this.context.environment.autoEscape ? new Markup(result) : result;\n}\n\nconst env = new Environment();\nenv.addFilter("link_to_tag", LinkToTag);\n'))),(0,a.kt)(l.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Environment, Markup, FilterContext } from "liquidscript";\n\nfunction LinkToTag(this: FilterContext, label: string, tag: string): string {\n  const handle = this.context.resolveSync("handle");\n  const result = `<a title="Show tag ${tag}" href="/collections/${handle}/${tag}">${label}</a>`;\n  return this.context.environment.autoEscape ? new Markup(result) : result;\n}\n\nconst env = new Environment();\nenv.addFilter("link_to_tag", LinkToTag);\n')))),(0,a.kt)("h3",{id:"keyword-arguments-and-options"},"Keyword Arguments and Options"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/api/modules#filtercontext"},(0,a.kt)("inlineCode",{parentName:"a"},"FilterContext"))," also includes any keyword arguments passed to the filter. These are available as ",(0,a.kt)("inlineCode",{parentName:"p"},"this.options"),". The ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/language/filters#default"},(0,a.kt)("inlineCode",{parentName:"a"},"default"))," filter is the only built-in filter to use a keyword argument. For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"{{ user.name | default: 'anonymous', allow_false: false }}")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"In Liquid, keyword arguments can appear in any order, even before and inbetween positional arguments. It is because of this, and the desire to allow filters with ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters"},"rest parameters"),", that LiquidScript puts options in the filter context object instead of the last argument of the filter function.")),(0,a.kt)("h2",{id:"liquid-numbers-and-arithmetic"},"Liquid Numbers and Arithmetic"),(0,a.kt)("p",null,"Unlike JavaScript, Liquid has distinct integer and float number types. To maintain compatibility with the reference implementation of Liquid, LiquidScript defines an ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Integer"},(0,a.kt)("inlineCode",{parentName:"a"},"Integer"))," type, a ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Float"},(0,a.kt)("inlineCode",{parentName:"a"},"Float"))," type and ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/api/modules#parsenumbert"},"utility functions")," for converting to these types."),(0,a.kt)("p",null,"Both ",(0,a.kt)("inlineCode",{parentName:"p"},"Integer")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Float")," export methods for performing decimal arithmetic, as opposed to JavaScript's usual floating point arithmetic."),(0,a.kt)("p",null,"When writing custom filters that expect numbers as inputs, you should be prepared to handle JavaScript primitive numbers ",(0,a.kt)("strong",{parentName:"p"},"and")," Liquid numbers. All built-in math filters convert their arguments to Liquid's ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/api/modules#numbert"},(0,a.kt)("inlineCode",{parentName:"a"},"NumberT"))," type on input, exclusively use methods of those types for arithmetic, and return a ",(0,a.kt)("inlineCode",{parentName:"p"},"NumberT")," too."),(0,a.kt)("p",null,"To illustrate, here's the implementation of the ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/language/filters#plus"},(0,a.kt)("inlineCode",{parentName:"a"},"plus"))," filter. It makes no assumptions about the type of its arguments and both arguments default to zero if they can't be converted to a number."),(0,a.kt)(i.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { FilterContext, NumberT, checkArguments, filters } from "liquidscript";\n\nfunction plus(left, right) {\n  // Throw an error if there are too many or too few arguments.\n  checkArguments(arguments.length, 1, 1);\n  return filters.parseNumberOrZero(left).plus(filters.parseNumberOrZero(right));\n}\n'))),(0,a.kt)(l.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { FilterContext, NumberT, checkArguments, filters } from "liquidscript";\n\nfunction plus(this: FilterContext, left: unknown, right: unknown): NumberT {\n  // Throw an error if there are too many or too few arguments.\n  checkArguments(arguments.length, 1, 1);\n  return filters.parseNumberOrZero(left).plus(filters.parseNumberOrZero(right));\n}\n')))),(0,a.kt)("h2",{id:"auto-escape-and-markup"},"Auto-Escape and Markup"),(0,a.kt)("p",null,"LiquidScript exports a ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/Markup"},(0,a.kt)("inlineCode",{parentName:"a"},"Markup"))," object that wraps a string, indicating it is safe to output without ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/introduction/auto-escape"},"HTML escaping"),". Most filter functions that expect strings as inputs should be prepared to handle ",(0,a.kt)("inlineCode",{parentName:"p"},"Markup")," objects too."),(0,a.kt)("p",null,"Here's an implementation of the ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/language/filters#append"},(0,a.kt)("inlineCode",{parentName:"a"},"append"))," filter that demonstrates handling of ",(0,a.kt)("inlineCode",{parentName:"p"},"Markup")," objects."),(0,a.kt)(i.Z,{groupId:"js-ts",mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import {\n  FilterContext,\n  checkArguments,\n  Markup,\n  toLiquidString,\n  object,\n} from "liquidscript";\n\nfunction append(left, other) {\n  // Throw an error if there are too many or too few arguments.\n  checkArguments(arguments.length, 1, 1);\n\n  if (left instanceof Markup)\n    return new Markup(\n      left[toLiquidString]() + Markup.escape(other)[toLiquidString]()\n    );\n\n  if (other instanceof Markup) {\n    return new Markup(\n      Markup.escape(left)[toLiquidString]() + other[toLiquidString]()\n    );\n  }\n\n  return object.liquidStringify(left) + object.liquidStringify(other);\n}\n'))),(0,a.kt)(l.Z,{value:"ts",label:"TypeScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import {\n  FilterContext,\n  checkArguments,\n  Markup,\n  toLiquidString,\n  object,\n} from "liquidscript";\n\nfunction append(\n  this: FilterContext,\n  left: unknown,\n  other: unknown\n): string | Markup {\n  // Throw an error if there are too many or too few arguments.\n  checkArguments(arguments.length, 1, 1);\n\n  if (left instanceof Markup)\n    return new Markup(\n      left[toLiquidString]() + Markup.escape(other)[toLiquidString]()\n    );\n\n  if (other instanceof Markup) {\n    return new Markup(\n      Markup.escape(left)[toLiquidString]() + other[toLiquidString]()\n    );\n  }\n\n  return object.liquidStringify(left) + object.liquidStringify(other);\n}\n')))),(0,a.kt)("h2",{id:"missing-and-excess-arguments"},"Missing and Excess Arguments"),(0,a.kt)("p",null,"All filters built in to Liquid throw a ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/LiquidFilterArgumentError"},(0,a.kt)("inlineCode",{parentName:"a"},"LiquidFilterArgumentError"))," if a required argument is missing or too many arguments are provided."),(0,a.kt)("p",null,"When writing custom filters, if you want to be consistent with those built-in filters, you can use ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/api/modules#checkarguments"},(0,a.kt)("inlineCode",{parentName:"a"},"checkArguments"))," to throw an error with a suitable message."),(0,a.kt)("h2",{id:"undefined-vs-undefined"},"Undefined vs undefined"),(0,a.kt)("p",null,"LiquidScript defines an ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/introduction/undefined"},(0,a.kt)("inlineCode",{parentName:"a"},"Undefined"))," type, which is distinct from JavaScript's primitive ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," value. With ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/api/classes/LaxUndefined"},(0,a.kt)("inlineCode",{parentName:"a"},"LaxUndefined")),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Undefined"),' objects will be passed to filter functions if they are "called" with arguments that can not be resolved by the active render context.'),(0,a.kt)("p",null,"If a filter function needs to detect ",(0,a.kt)("inlineCode",{parentName:"p"},"Undefined")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," arguments, it can use ",(0,a.kt)("a",{parentName:"p",href:"/liquidscript/api/namespaces/object#isundefined"},(0,a.kt)("inlineCode",{parentName:"a"},"object.isUndefined()")),"."))}f.isMDXComponent=!0}}]);