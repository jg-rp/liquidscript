"use strict";(self.webpackChunkliquidscript_docs=self.webpackChunkliquidscript_docs||[]).push([[8523],{9494:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var a=n(6687);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=u(n),m=l,g=c["".concat(o,".").concat(m)]||c[m]||d[m]||r;return n?a.createElement(g,i(i({ref:t},s),{},{components:n})):a.createElement(g,i({ref:t},s))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=c;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:l,i[1]=p;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4533:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return p},metadata:function(){return u},toc:function(){return d}});var a=n(9853),l=n(5309),r=(n(6687),n(9494)),i=["components"],p={},o="Liquid Filters",u={unversionedId:"language/filters",id:"language/filters",title:"Liquid Filters",description:"This page documents the standard filters built-in to Liquid. See custom filters for examples of how to write your own.",source:"@site/docs/language/filters.md",sourceDirName:"language",slug:"/language/filters",permalink:"/liquidscript/language/filters",draft:!1,editUrl:"https://github.com/jg-rp/liquidscript/tree/docs/docs/language/filters.md",tags:[],version:"current",frontMatter:{},sidebar:"languageSidebar",previous:{title:"Introduction to Liquid",permalink:"/liquidscript/language/introduction"},next:{title:"Liquid Tags",permalink:"/liquidscript/language/tags"}},s={},d=[{value:"abs",id:"abs",level:2},{value:"append",id:"append",level:2},{value:"at_least",id:"at_least",level:2},{value:"at_most",id:"at_most",level:2},{value:"base64_decode",id:"base64_decode",level:2},{value:"base64_encode",id:"base64_encode",level:2},{value:"base64_url_safe_decode",id:"base64_url_safe_decode",level:2},{value:"base64_url_safe_encode",id:"base64_url_safe_encode",level:2},{value:"capitalize",id:"capitalize",level:2},{value:"ceil",id:"ceil",level:2},{value:"compact",id:"compact",level:2},{value:"concat",id:"concat",level:2},{value:"date",id:"date",level:2},{value:"default",id:"default",level:2},{value:"divided_by",id:"divided_by",level:2},{value:"downcase",id:"downcase",level:2},{value:"escape",id:"escape",level:2},{value:"escape_once",id:"escape_once",level:2},{value:"first",id:"first",level:2},{value:"floor",id:"floor",level:2},{value:"join",id:"join",level:2},{value:"last",id:"last",level:2},{value:"lstrip",id:"lstrip",level:2},{value:"map",id:"map",level:2},{value:"minus",id:"minus",level:2},{value:"modulo",id:"modulo",level:2},{value:"newline_to_br",id:"newline_to_br",level:2},{value:"plus",id:"plus",level:2},{value:"prepend",id:"prepend",level:2},{value:"remove",id:"remove",level:2},{value:"remove_first",id:"remove_first",level:2},{value:"remove_last",id:"remove_last",level:2},{value:"replace",id:"replace",level:2},{value:"replace_first",id:"replace_first",level:2},{value:"replace_last",id:"replace_last",level:2},{value:"reverse",id:"reverse",level:2},{value:"round",id:"round",level:2},{value:"rstrip",id:"rstrip",level:2},{value:"size",id:"size",level:2},{value:"slice",id:"slice",level:2},{value:"sort",id:"sort",level:2},{value:"sort_natural",id:"sort_natural",level:2},{value:"split",id:"split",level:2},{value:"strip",id:"strip",level:2},{value:"strip_html",id:"strip_html",level:2},{value:"strip_newlines",id:"strip_newlines",level:2},{value:"times",id:"times",level:2},{value:"truncate",id:"truncate",level:2},{value:"truncatewords",id:"truncatewords",level:2},{value:"uniq",id:"uniq",level:2},{value:"upcase",id:"upcase",level:2},{value:"url_decode",id:"url_decode",level:2},{value:"url_encode",id:"url_encode",level:2},{value:"where",id:"where",level:2}],c={toc:d};function m(e){var t=e.components,n=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"liquid-filters"},"Liquid Filters"),(0,r.kt)("p",null,"This page documents the standard filters built-in to Liquid. See ",(0,r.kt)("a",{parentName:"p",href:"/liquidscript/guides/custom-filters"},"custom filters")," for examples of how to write your own."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Some of the examples here are borrowed from ",(0,r.kt)("a",{parentName:"p",href:"https://shopify.github.io/liquid/"},"Shopify's Liquid documentation"),". You can find their license ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Shopify/liquid/blob/master/LICENSE"},"here"),"."))),(0,r.kt)("h2",{id:"abs"},"abs"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<number> | abs")),(0,r.kt)("p",null,"Return the absolute value of a number. Works on integers, floats and string representations of\nintegers or floats."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ -42 | abs }}\n{{ 7.5 | abs }}\n{{ '42.0' | abs }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"42\n7.5\n42.0\n")),(0,r.kt)("p",null,"Given a value that can't be cast to an integer or float, ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," will be returned."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 'hello' | abs }}\n{{ nosuchthing | abs }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"0\n0\n")),(0,r.kt)("h2",{id:"append"},"append"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | append: <string>")),(0,r.kt)("p",null,"Return the input value concatenated with the argument value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 'Hello, ' | append: 'World!' }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hello, World!\n")),(0,r.kt)("p",null,"If either the input value or argument are not a string, they will be coerced to a string before concatenation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{% assign a_number = 7.5 -%}\n{{ 42 | append: a_number }}\n{{ nosuchthing | append: 'World!' }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"427.5\nWorld!\n")),(0,r.kt)("h2",{id:"at_least"},"at_least"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<number> | at_least: <number>")),(0,r.kt)("p",null,"Return the maximum of the filter's input value and its argument. If either input value or argument are string representations of an integer or float, they will be cast to an integer or float prior to comparison."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ -5.1 | at_least: 8 }}\n{{ 8 | at_least: '5' }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"8\n8\n")),(0,r.kt)("p",null,"If either input value or argument can not be cast to an integer or float, ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," will be used instead."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "hello" | at_least: 2 }}\n{{ "hello" | at_least: -2 }}\n{{ -1 | at_least: "abc" }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"2\n0\n0\n")),(0,r.kt)("h2",{id:"at_most"},"at_most"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<number> | at_most: <number>")),(0,r.kt)("p",null,"Return the minimum of the filter's input value and its argument. If either input value or argument are string representations of an integer or float, they will be cast to an integer or float prior to comparison."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 5 | at_most: 8 }}\n{{ '8' | at_most: 5 }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"5\n5\n")),(0,r.kt)("p",null,"If either input value or argument can not be cast to an integer or float, ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," will be used instead."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "hello" | at_most: 2 }}\n{{ "hello" | at_most: -2 }}\n{{ -1 | at_most: "abc" }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"0\n-2\n-1\n")),(0,r.kt)("h2",{id:"base64_decode"},"base64_decode"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | base64_decode")),(0,r.kt)("p",null,"Decode a base64 encoded string. The decoded value is assumed to be UTF-8 and will be decoded as UTF-8."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 'SGVsbG8sIFdvcmxkIQ==' | base64_decode }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hello, World!\n")),(0,r.kt)("p",null,"If the input value is not a valid base64 encoded string, an exception will be raised."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 'notbase64' | base64_decode }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"FilterError: invalid base64-encoded string, on line 1\n")),(0,r.kt)("h2",{id:"base64_encode"},"base64_encode"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | base64_encode")),(0,r.kt)("p",null,"Encode a string using base64."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 'Hello, World!' | base64_encode }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"SGVsbG8sIFdvcmxkIQ==\n")),(0,r.kt)("p",null,"If the input value is not a string, it will be converted to a string before base64 encoding."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 5 | base64_encode }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"NQ==\n")),(0,r.kt)("h2",{id:"base64_url_safe_decode"},"base64_url_safe_decode"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | base64_url_safe_decode")),(0,r.kt)("p",null,"Decode a URL safe base64 encoded string. Substitutes ",(0,r.kt)("inlineCode",{parentName:"p"},"-")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"+")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"_")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," in the standard base64 alphabet. The decoded value is assumed to be UTF-8 and will be decoded as UTF-8."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 'SGVsbG8sIFdvcmxkIQ==' | base64_url_safe_decode }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hello, World!\n")),(0,r.kt)("p",null,"If the input value is not a valid base64 encoded string, an exception will be raised."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 'notbase64' | base64_url_safe_decode }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"FilterError: invalid base64-encoded string, on line 1\n")),(0,r.kt)("h2",{id:"base64_url_safe_encode"},"base64_url_safe_encode"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | base64_url_safe_encode")),(0,r.kt)("p",null,"Encode a string using URL safe base64. Substitutes ",(0,r.kt)("inlineCode",{parentName:"p"},"-")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"+")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"_")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," in the standard base64 alphabet."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 'Hello, World!' | base64_url_safe_encode }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"SGVsbG8sIFdvcmxkIQ==\n")),(0,r.kt)("p",null,"If the input value is not a string, it will be converted to a string before base64 encoding."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 5 | base64_url_safe_encode }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"NQ==\n")),(0,r.kt)("h2",{id:"capitalize"},"capitalize"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | capitalize")),(0,r.kt)("p",null,"Return the input string with the first character in upper case and the rest lowercase."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 'heLLO, World!' | capitalize }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hello, world!\n")),(0,r.kt)("p",null,"If the input value is not a string, it will be converted to a string."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 42 | capitalize }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"42\n")),(0,r.kt)("h2",{id:"ceil"},"ceil"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<number> | ceil")),(0,r.kt)("p",null,"Round the input value up to the nearest whole number. The input value will be converted to a number if it is not an integer or float."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 5.1 | ceil }}\n{{ 5.0 | ceil }}\n{{ 5 | ceil }}\n{{ '5.4' | ceil }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"6\n5\n5\n5\n")),(0,r.kt)("p",null,"If the input is undefined or can't be converted to a number, ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," is returned."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 'hello' | ceil }}\n{{ nosuchthing | ceil }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"0\n0\n")),(0,r.kt)("h2",{id:"compact"},"compact"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<array> | compact[: <string>]")),(0,r.kt)("p",null,"Remove ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," (or ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"null")," in JavaScript) values from an array-like object. If given, the argument should be the name of a property that exists on each object in the array-like sequence."),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"pages")," is an array of objects, some of which have a ",(0,r.kt)("inlineCode",{parentName:"p"},"category")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="data"',title:'"data"'},'{\n  "pages": [\n    { "category": "business" },\n    { "category": "celebrities" },\n    {},\n    { "category": "lifestyle" },\n    { "category": "sports" },\n    {},\n    { "category": "technology" }\n  ]\n}\n')),(0,r.kt)("p",null,"Without ",(0,r.kt)("inlineCode",{parentName:"p"},"compact"),", iterating those categories will include ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign categories = pages | map: "category" -%}\n\n{% for category in categories -%}\n- {{ category }}\n{%- endfor %}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"- business\n- celebrities\n-\n- lifestyle\n- sports\n-\n- technology\n")),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},"compact"),", we can remove those missing categories before the loop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign categories = pages | map: "category" | compact %}\n\n{% for category in categories %}\n- {{ category }}\n{% endfor %}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"- business\n- celebrities\n- lifestyle\n- sports\n- technology\n")),(0,r.kt)("p",null,"Using the optional argument to ",(0,r.kt)("inlineCode",{parentName:"p"},"compact"),", we could avoid using ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," and create an array of pages with a ",(0,r.kt)("inlineCode",{parentName:"p"},"category")," property, rather than an array of categories."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign pages_with_category = pages | compact: "category" %}\n\n{% for page in pages_with_category %}\n- {{ page.category }}\n{% endfor %}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"- business\n- celebrities\n- lifestyle\n- sports\n- technology\n")),(0,r.kt)("h2",{id:"concat"},"concat"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<array> | concat: <array>")),(0,r.kt)("p",null,"Create a new array by joining one array-like object with another."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign fruits = "apples, oranges, peaches" | split: ", " %}\n{% assign vegetables = "carrots, turnips, potatoes" | split: ", " %}\n\n{% assign everything = fruits | concat: vegetables %}\n\n{% for item in everything %}\n- {{ item }}\n{% endfor %}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"- apples\n- oranges\n- peaches\n- carrots\n- turnips\n- potatoes\n")),(0,r.kt)("p",null,"If the input value is not array-like, it will be converted to an array. No conversion is attempted for the argument value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign fruits = "apples, oranges, peaches" | split: ", " %}\n{% assign things = "hello" | concat: fruits %}\n\n{% for item in things %}\n- {{ item }}\n{% endfor %}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"- hello\n- apples\n- oranges\n- peaches\n")),(0,r.kt)("p",null,"If the input is a nested array, it will be flattened before concatenation. The argument is not flattened."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="data"',title:'"data"'},'{\n  "a": [\n    ["a", "x"],\n    ["b", ["y", ["z"]]]\n  ],\n  "b": ["c", "d"]\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ a | concat: b | join: '#' }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"a#x#b#y#z#c#d\n")),(0,r.kt)("h2",{id:"date"},"date"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<datetime> | date: <string>")),(0,r.kt)("p",null,"Format a date and/or time according the the given format string. The input can be a string, in which case the string will be parsed as a date/time before formatting."),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"LiquidScript's ",(0,r.kt)("inlineCode",{parentName:"p"},"date")," filter can parse Unix timestamps, ISO 8601, RFC2822, SQL and HTTP header formatted date/time strings. It does not do fuzzy parsing like Ruby or Python Liquid."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "March 14, 2016" | date: "%b %d, %y" }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Mar 14, 16\n")),(0,r.kt)("p",null,"The special ",(0,r.kt)("inlineCode",{parentName:"p"},"'now'")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"'today'")," input values can be used to get the current timestamp. ",(0,r.kt)("inlineCode",{parentName:"p"},"'today'")," is an alias for ",(0,r.kt)("inlineCode",{parentName:"p"},"'now'"),". Both include time information."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "now" | date: "%Y-%m-%d %H:%M" }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"2021-12-02 10:17\n")),(0,r.kt)("p",null,"If the input is undefined, an empty string is returned."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ nosuchthing | date: "%Y-%m-%d %H:%M" }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"")),(0,r.kt)("h2",{id:"default"},"default"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<object> | default[: <object>[, allow_false:<bool>]]")),(0,r.kt)("p",null,"Return a default value if the input is undefined, ",(0,r.kt)("inlineCode",{parentName:"p"},"nil"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," or empty, or return the input unchanged otherwise."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," filter is the only built-in filter to use a keyword argument."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ product_price | default: 2.99 }}\n\n{%- assign product_price = "" %}\n{{ product_price | default: 2.99 }}\n\n{%- assign product_price = 4.99 %}\n{{ product_price | default: 2.99 }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"2.99\n2.99\n4.99\n")),(0,r.kt)("p",null,"If the optional ",(0,r.kt)("inlineCode",{parentName:"p"},"allow_false")," argument is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", an input of ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," will not return the default. ",(0,r.kt)("inlineCode",{parentName:"p"},"allow_false")," defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{% assign product_reduced = false -%}\n{{ product_reduced | default: true, allow_false: true }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"false\n")),(0,r.kt)("p",null,"If no argument is given, the default value will be an empty string."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ product_price | default }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"")),(0,r.kt)("h2",{id:"divided_by"},"divided_by"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<number> | divided_by: <number>")),(0,r.kt)("p",null,"Divide a number by another number. The result is rounded down to the nearest integer if the divisor is an integer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 16 | divided_by: 4 }}\n{{ 5 | divided_by: 3 }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"4\n1\n")),(0,r.kt)("p",null,"If you divide by a float, the result will be a float."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 20 | divided_by: 7 }}\n{{ 20 | divided_by: 7.0 }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"2\n2.857142857142857\n")),(0,r.kt)("p",null,"If either the input or argument are not an integer or float, Liquid will try to convert them to an integer or float. If the input can't be converted, ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," will be used instead. If the argument can't be converted, and exception is raised."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "20" | divided_by: "7" }}\n{{ "hello" | divided_by: 2 }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"2\n0\n")),(0,r.kt)("h2",{id:"downcase"},"downcase"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | downcase")),(0,r.kt)("p",null,"Return the input string with all characters in lowercase."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 'Hello, World!' | downcase }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"hello, world!\n")),(0,r.kt)("p",null,"If the input is not a string, Liquid will convert it to a string before forcing characters to lowercase."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 5 | downcase }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"5\n")),(0,r.kt)("p",null,"If the input is undefined, an empty string is returned."),(0,r.kt)("h2",{id:"escape"},"escape"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | escape")),(0,r.kt)("p",null,"Return the input string with characters ",(0,r.kt)("inlineCode",{parentName:"p"},"&"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"<")," and ",(0,r.kt)("inlineCode",{parentName:"p"},">")," converted to HTML-safe sequences."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ \"Have you read 'James & the Giant Peach'?\" | escape }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Have you read &#39;James &amp; the Giant Peach&#39;?\n")),(0,r.kt)("h2",{id:"escape_once"},"escape_once"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | escape_once")),(0,r.kt)("p",null,"Return the input string with characters ",(0,r.kt)("inlineCode",{parentName:"p"},"&"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"<")," and ",(0,r.kt)("inlineCode",{parentName:"p"},">")," converted to HTML-safe sequences, while\npreserving existing HTML escape sequences."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ \"Have you read 'James &amp; the Giant Peach'?\" | escape_once }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Have you read &#39;James &amp; the Giant Peach&#39;?\n")),(0,r.kt)("h2",{id:"first"},"first"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<sequence> | first")),(0,r.kt)("p",null,"Return the first item of the input sequence. The input could be array-like or a mapping, but not a\nstring."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "Ground control to Major Tom." | split: " " | first }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Ground\n")),(0,r.kt)("p",null,"If the input sequence is undefined, empty or not a sequence, ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," is returned."),(0,r.kt)("h2",{id:"floor"},"floor"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<number> | floor")),(0,r.kt)("p",null,"Return the input down to the nearest whole number. Liquid tries to convert the input to a number\nbefore the filter is applied."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ 1.2 | floor }}\n{{ 2.0 | floor }}\n{{ 183.357 | floor }}\n{{ -5.4 | floor }}\n{{ "3.5" | floor }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"1\n2\n183\n-6\n3\n")),(0,r.kt)("p",null,"If the input can't be converted to a number, ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," is returned."),(0,r.kt)("h2",{id:"join"},"join"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<array> | join[: <string>]")),(0,r.kt)("p",null,"Return the items in the input array as a single string, separated by the argument string. If the\ninput is not an array, Liquid will convert it to one. If input array items are not strings, they\nwill be converted to strings before joining."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign beatles = "John, Paul, George, Ringo" | split: ", " -%}\n\n{{ beatles | join: " and " }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"John and Paul and George and Ringo\n")),(0,r.kt)("p",null,"If an argument string is not given, it defaults to a single space."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign beatles = "John, Paul, George, Ringo" | split: ", " -%}\n\n{{ beatles | join }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"John Paul George Ringo\n")),(0,r.kt)("h2",{id:"last"},"last"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<array> | last")),(0,r.kt)("p",null,"Return the last item in the array-like input."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "Ground control to Major Tom." | split: " " | last }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Tom.\n")),(0,r.kt)("p",null,"If the input is undefined, empty, string or a number, ",(0,r.kt)("inlineCode",{parentName:"p"},"nil")," will be returned."),(0,r.kt)("h2",{id:"lstrip"},"lstrip"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | lstrip")),(0,r.kt)("p",null,"Return the input string with all leading whitespace removed. If the input is not a string, it will\nbe converted to a string before stripping whitespace."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "          So much room for activities          " | lstrip }}!\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"So much room for activities          !\n")),(0,r.kt)("h2",{id:"map"},"map"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<array> | map: <string>")),(0,r.kt)("p",null,"Extract properties from an array of objects into a new array."),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"pages")," is an array of objects with a ",(0,r.kt)("inlineCode",{parentName:"p"},"category")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="data"',title:'"data"'},'{\n  "pages": [\n    { "category": "business" },\n    { "category": "celebrities" },\n    { "category": "lifestyle" },\n    { "category": "sports" },\n    { "category": "technology" }\n  ]\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign categories = pages | map: "category" -%}\n\n{% for category in categories -%}\n- {{ category }}\n{%- endfor %}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"- business\n- celebrities\n- lifestyle\n- sports\n- technology\n")),(0,r.kt)("h2",{id:"minus"},"minus"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<number> | minus: <number>")),(0,r.kt)("p",null,"Subtract one number from another. If either the input or argument are not a number, Liquid will try\nto convert them to a number. If that conversion fails, ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," is used instead."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ 4 | minus: 2 }}\n{{ "16" | minus: 4 }}\n{{ 183.357 | minus: 12.2 }}\n{{ "hello" | minus: 10 }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"2\n12\n171.157\n-10\n")),(0,r.kt)("h2",{id:"modulo"},"modulo"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<number> | modulo: <number>")),(0,r.kt)("p",null,"Return the remainder from the division of the input by the argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ 3 | modulo: 2 }}\n{{ "24" | modulo: "7" }}\n{{ 183.357 | modulo: 12 }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"1\n3\n3.357\n")),(0,r.kt)("p",null,"If either the input or argument are not an integer or float, Liquid will try to convert them to an\ninteger or float. If the input can't be converted, ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," will be used instead. If the argument can't\nbe converted, and exception is raised."),(0,r.kt)("h2",{id:"newline_to_br"},"newline_to_br"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | newline_to_br")),(0,r.kt)("p",null,"Return the input string with ",(0,r.kt)("inlineCode",{parentName:"p"},"\\n")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"\\r\\n")," replaced with ",(0,r.kt)("inlineCode",{parentName:"p"},"<br />\\n"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{% capture string_with_newlines %}\nHello\nthere\n{% endcapture %}\n\n{{ string_with_newlines | newline_to_br }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"\n\n<br />\nHello<br />\nthere<br />\n\n")),(0,r.kt)("h2",{id:"plus"},"plus"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<number> | plus: <number>")),(0,r.kt)("p",null,"Add one number to another. If either the input or argument are not a number, Liquid will try to\nconvert them to a number. If that conversion fails, ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," is used instead."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ 4 | plus: 2 }}\n{{ "16" | plus: "4" }}\n{{ 183.357 | plus: 12 }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"6\n20\n195.357\n")),(0,r.kt)("h2",{id:"prepend"},"prepend"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | prepend: <string>")),(0,r.kt)("p",null,"Return the argument concatenated with the filter input."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "apples, oranges, and bananas" | prepend: "Some fruit: " }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Some fruit: apples, oranges, and bananas\n")),(0,r.kt)("p",null,"If either the input value or argument are not a string, they will be coerced to a string before\nconcatenation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{% assign a_number = 7.5 -%}\n{{ 42 | prepend: a_number }}\n{{ nosuchthing | prepend: 'World!' }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"7.542\nWorld!\n")),(0,r.kt)("h2",{id:"remove"},"remove"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | remove: <string>")),(0,r.kt)("p",null,"Return the input with all occurrences of the argument string removed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "I strained to see the train through the rain" | remove: "rain" }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"I sted to see the t through the\n")),(0,r.kt)("p",null,"If either the filter input or argument are not a string, they will be coerced to a string before\nsubstring removal."),(0,r.kt)("h2",{id:"remove_first"},"remove_first"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | remove_first: <string>")),(0,r.kt)("p",null,"Return a copy of the input string with the first occurrence of the argument string removed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "I strained to see the train through the rain" | remove_first: "rain" }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"I sted to see the train through the rain\n")),(0,r.kt)("p",null,"If either the filter input or argument are not a string, they will be coerced to a string before substring removal."),(0,r.kt)("h2",{id:"remove_last"},"remove_last"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | remove_last: <string>")),(0,r.kt)("p",null,"Return a copy of the input string with the last occurrence of the argument string removed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "I strained to see the train through the rain" | remove_last: "rain" }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"I strained to see the train through the\n")),(0,r.kt)("p",null,"If either the filter input or argument are not a string, they will be coerced to a string before substring removal."),(0,r.kt)("h2",{id:"replace"},"replace"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | replace: <string>[, <string>]")),(0,r.kt)("p",null,"Return the input with all occurrences of the first argument replaced with the second argument. If\nthe second argument is omitted, it will default to an empty string, making ",(0,r.kt)("inlineCode",{parentName:"p"},"replace")," behave like\n",(0,r.kt)("inlineCode",{parentName:"p"},"remove"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "Take my protein pills and put my helmet on" | replace: "my", "your" }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Take your protein pills and put your helmet on\n")),(0,r.kt)("p",null,"If either the filter input or argument are not a string, they will be coerced to a string before\nreplacement."),(0,r.kt)("h2",{id:"replace_first"},"replace_first"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | replace_first: <string>[, <string>]")),(0,r.kt)("p",null,"Return a copy of the input string with the first occurrence of the first argument replaced with the second argument. If the second argument is omitted, it will default to an empty string, making ",(0,r.kt)("inlineCode",{parentName:"p"},"replace_first")," behave like ",(0,r.kt)("inlineCode",{parentName:"p"},"remove_first"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "Take my protein pills and put my helmet on" | replace_first: "my", "your" }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Take your protein pills and put my helmet on\n")),(0,r.kt)("p",null,"If either the filter input or argument are not a string, they will be coerced to a string before replacement."),(0,r.kt)("h2",{id:"replace_last"},"replace_last"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | replace_last: <string>, <string>")),(0,r.kt)("p",null,"Return a copy of the input string with the last occurrence of the first argument replaced with the second argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "Take my protein pills and put my helmet on" | replace_first: "my", "your" }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Take my protein pills and put your helmet on\n")),(0,r.kt)("p",null,"If either the filter input or argument are not a string, they will be coerced to a string before replacement."),(0,r.kt)("h2",{id:"reverse"},"reverse"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<array> | reverse")),(0,r.kt)("p",null,"Return a copy of the input array with the items in reverse order. If the filter input is a string,\n",(0,r.kt)("inlineCode",{parentName:"p"},"reverse")," will return the string unchanged."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign my_array = "apples, oranges, peaches, plums" | split: ", " -%}\n\n{{ my_array | reverse | join: ", " }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"plums, peaches, oranges, apples\n")),(0,r.kt)("h2",{id:"round"},"round"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<number> | round[: <number>]")),(0,r.kt)("p",null,"Return the input number rounded to the given number of decimal places. The number of digits defaults\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 1.2 | round }}\n{{ 2.7 | round }}\n{{ 183.357 | round: 2 }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"1\n3\n183.36\n")),(0,r.kt)("p",null,"If either the filter input or its optional argument are not an integer or float, they will be\nconverted to an integer or float before rounding."),(0,r.kt)("h2",{id:"rstrip"},"rstrip"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | rstrip")),(0,r.kt)("p",null,"Return the input string with all trailing whitespace removed. If the input is not a string, it will\nbe converted to a string before stripping whitespace."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "          So much room for activities          " | rstrip }}!\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"          So much room for activities!\n")),(0,r.kt)("h2",{id:"size"},"size"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<object> | size")),(0,r.kt)("p",null,"Return the size of the input object. Works on strings, arrays and hashes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "Ground control to Major Tom." | size }}\n{{ "apples, oranges, peaches, plums" | split: ", " | size }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"28\n4\n")),(0,r.kt)("h2",{id:"slice"},"slice"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<sequence> | slice: <int>[, <int>]")),(0,r.kt)("p",null,"Return a substring or subsequence of the input string or array. The first argument is the zero-based\nstart index. The second, optional argument is the length of the substring or sequence, which\ndefaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "Liquid" | slice: 0 }}\n{{ "Liquid" | slice: 2 }}\n{{ "Liquid" | slice: 2, 5 }}\n{% assign beatles = "John, Paul, George, Ringo" | split: ", " -%}\n{{ beatles | slice: 1, 2 | join: " " }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"L\nq\nquid\nPaul George\n")),(0,r.kt)("p",null,"If the first argument is negative, the start index is counted from the end of the sequence."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "Liquid" | slice: -3 }}\n{{ "Liquid" | slice: -3, 2 }}\n{% assign beatles = "John, Paul, George, Ringo" | split: ", " -%}\n{{ beatles | slice: -2, 2 | join: " " }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"u\nui\nGeorge Ringo\n")),(0,r.kt)("h2",{id:"sort"},"sort"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<array> | sort[: <string>]")),(0,r.kt)("p",null,"Return a copy of the input array with its elements sorted."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign my_array = "zebra, octopus, giraffe, Sally Snake" | split: ", " -%}\n{{ my_array | sort | join: ", " }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Sally Snake, giraffe, octopus, zebra\n")),(0,r.kt)("p",null,"The optional argument is a sort key. If given, it should be the name of a property and the filter's\ninput should be an array of objects."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="data"',title:'"data"'},'{\n  "collection": {\n    "products": [\n      { "title": "A Shoe", "price": "9.95" },\n      { "title": "A Tie", "price": "0.50" },\n      { "title": "A Hat", "price": "2.50" }\n    ]\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},'{% assign products_by_price = collection.products | sort: "price" -%}\n{% for product in products_by_price %}\n  <h4>{{ product.title }}</h4>\n{% endfor %}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"<h4>A Tie</h4>\n<h4>A Hat</h4>\n<h4>A Shoe</h4>\n")),(0,r.kt)("h2",{id:"sort_natural"},"sort_natural"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<array> | sort_natural[: <string>]")),(0,r.kt)("p",null,"Return a copy of the input array with its elements sorted case-insensitively. Array elements\ncompared by their string representations, forced to lowercase."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign my_array = "zebra, octopus, giraffe, Sally Snake" | split: ", " -%}\n{{ my_array | sort_natural | join: ", " }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"giraffe, octopus, Sally Snake, zebra\n")),(0,r.kt)("p",null,"The optional argument is a sort key. If given, it should be the name of a property and the filter's\ninput should be an array of objects. Array elements are compared using the lowercase string\nrepresentation of that property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="data"',title:'"data"'},'{\n  "collection": {\n    "products": [\n      { "title": "A Shoe", "company": "Cool Shoes" },\n      { "title": "A Tie", "company": "alpha Ties" },\n      { "title": "A Hat", "company": "Beta Hats" }\n    ]\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},'{% assign products_by_company = collection.products | sort_natural: "company" %}\n{% for product in products_by_company %}\n  <h4>{{ product.title }}</h4>\n{% endfor %}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"<h4>A Tie</h4>\n<h4>A Hat</h4>\n<h4>A Shoe</h4>\n")),(0,r.kt)("h2",{id:"split"},"split"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | split: <string>")),(0,r.kt)("p",null,"Return an array of strings that are the input string split on the filter's argument string."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign beatles = "John, Paul, George, Ringo" | split: ", " -%}\n\n{% for member in beatles %}\n  {{- member }}\n{% endfor %}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"John\nPaul\nGeorge\nRingo\n")),(0,r.kt)("p",null,"If the argument is undefined or an empty string, the input will be split at every character."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "Hello there" | split: nosuchthing | join: "#" }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"H#e#l#l#o# #t#h#e#r#e\n")),(0,r.kt)("h2",{id:"strip"},"strip"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | strip")),(0,r.kt)("p",null,"Return the input string with all leading and trailing whitespace removed. If the input is not a\nstring, it will be converted to a string before stripping whitespace."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "          So much room for activities          " | strip }}!\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"So much room for activities!\n")),(0,r.kt)("h2",{id:"strip_html"},"strip_html"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | strip_html")),(0,r.kt)("p",null,"Return the input string with all HTML tags removed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "Have <em>you</em> read <strong>Ulysses</strong>?" | strip_html }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Have you read Ulysses?\n")),(0,r.kt)("h2",{id:"strip_newlines"},"strip_newlines"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | strip_newlines")),(0,r.kt)("p",null,"Return the input string with ",(0,r.kt)("inlineCode",{parentName:"p"},"\\n")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"\\r\\n")," removed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{% capture string_with_newlines %}\nHello\nthere\n{% endcapture -%}\n\n{{ string_with_newlines | strip_newlines }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Hellothere\n")),(0,r.kt)("h2",{id:"times"},"times"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<number> | times: <number>")),(0,r.kt)("p",null,"Return the product of the input number and the argument number. If either the input or argument are\nnot a number, Liquid will try to convert them to a number. If that conversion fails, ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," is used\ninstead."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ 3 | times: 2 }}\n{{ "24" | times: "7" }}\n{{ 183.357 | times: 12 }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"6\n168\n2200.284\n")),(0,r.kt)("h2",{id:"truncate"},"truncate"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | truncate[: <integer>[, <string>]]")),(0,r.kt)("p",null,"Return a truncated version of the input string. The first argument, length, defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"50"),". The\nsecond argument defaults to an ellipsis (",(0,r.kt)("inlineCode",{parentName:"p"},"..."),")."),(0,r.kt)("p",null,"If the length of the input string is less than the given length (first argument), the input string\nwill be truncated to ",(0,r.kt)("inlineCode",{parentName:"p"},"length")," minus the length of the second argument, with the second argument\nappended."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "Ground control to Major Tom." | truncate: 20 }}\n{{ "Ground control to Major Tom." | truncate: 25, ", and so on" }}\n{{ "Ground control to Major Tom." | truncate: 20, "" }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Ground control to...\nGround control, and so on\nGround control to Ma\n")),(0,r.kt)("h2",{id:"truncatewords"},"truncatewords"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | truncatewords[: <integer>[, <string>]]")),(0,r.kt)("p",null,"Return the input string truncated to the specified number of words, with the second argument\nappended. The number of words (first argument) defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"15"),". The second argument defaults to an\nellipsis (",(0,r.kt)("inlineCode",{parentName:"p"},"..."),")."),(0,r.kt)("p",null,"If the input string already has fewer than the given number of words, it is returned unchanged."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "Ground control to Major Tom." | truncatewords: 3 }}\n{{ "Ground control to Major Tom." | truncatewords: 3, "--" }}\n{{ "Ground control to Major Tom." | truncatewords: 3, "" }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"Ground control to...\nGround control to--\nGround control to\n")),(0,r.kt)("h2",{id:"uniq"},"uniq"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<array> | uniq[: <string>]")),(0,r.kt)("p",null,"Return a copy of the input array with duplicate elements removed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{% assign my_array = "ants, bugs, bees, bugs, ants" | split: ", " -%}\n{{ my_array | uniq | join: ", " }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"ants, bugs, bees\n")),(0,r.kt)("p",null,"If an argument is given, it should be the name of a property and the filter's input should be an\narray of objects."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="data"',title:'"data"'},'{\n  "collection": {\n    "products": [\n      { "title": "A Shoe", "company": "Cool Shoes" },\n      { "title": "A Tie", "company": "alpha Ties" },\n      { "title": "Another Tie", "company": "alpha Ties" },\n      { "title": "A Hat", "company": "Beta Hats" }\n    ]\n  }\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid",metastring:'title="template"',title:'"template"'},'{% assign one_product_from_each_company = collections.products | uniq: "company" -%}\n{% for product in one_product_from_each_company -%}\n  - product.title\n{% endfor %}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"- A Shoe\n- A Tie\n- A Hat\n")),(0,r.kt)("h2",{id:"upcase"},"upcase"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | upcase")),(0,r.kt)("p",null,"Return the input string with all characters in uppercase."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ 'Hello, World!' | upcase }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"HELLO, WORLD!\n")),(0,r.kt)("h2",{id:"url_decode"},"url_decode"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | url_decode")),(0,r.kt)("p",null,"Return the input string with ",(0,r.kt)("inlineCode",{parentName:"p"},"%xx")," escapes replaced with their single-character equivalents. Also\nreplaces ",(0,r.kt)("inlineCode",{parentName:"p"},"'+'")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"' '"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'{{ "My+email+address+is+bob%40example.com%21" | url_decode }}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"My email address is bob@example.com!\n")),(0,r.kt)("h2",{id:"url_encode"},"url_encode"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<string> | url_encode")),(0,r.kt)("p",null,"Return the input string with URL reserved characters %-escaped. Also replaces ",(0,r.kt)("inlineCode",{parentName:"p"},"' '")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"'+'"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},"{{ My email address is bob@example.com! | url_encode }}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"My+email+address+is+bob%40example.com%21\n")),(0,r.kt)("h2",{id:"where"},"where"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"<array> | where: <string>[, <object>]")),(0,r.kt)("p",null,"Return a copy of the input array including only those objects that have a property, named with the\nfirst argument, equal to a value, given as the second argument. If a second argument is not given,\nonly elements with the named property that are truthy will be included."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="data"',title:'"data"'},'{\n  "products": [\n    { "title": "Vacuum", "type": "house", "available": true },\n    { "title": "Spatula", "type": "kitchen", "available": false },\n    { "title": "Television", "type": "lounge", "available": true },\n    { "title": "Garlic press", "type": "kitchen", "available": true }\n  ]\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-liquid"},'All products:\n{% for product in products -%}\n- {{ product.title }}\n{% endfor %}\n\n{%- assign kitchen_products = products | where: "type", "kitchen" -%}\n\nKitchen products:\n{% for product in kitchen_products -%}\n- {{ product.title }}\n{% endfor %}\n\n{%- assign available_products = products | where: "available" -%}\n\nAvailable products:\n{% for product in available_products -%}\n- {{ product.title }}\n{% endfor %}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plain",metastring:'title="output"',title:'"output"'},"All products:\n- Vacuum\n- Spatula\n- Television\n- Garlic press\n\nKitchen products:\n- Spatula\n- Garlic press\n\nAvailable product:\n- Vacuum\n- Television\n- Garlic press\n")))}m.isMDXComponent=!0}}]);